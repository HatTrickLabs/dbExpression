using DbEx.DataService;
using FluentAssertions;
using HatTrick.DbEx.MsSql.Expression;
using HatTrick.DbEx.MsSql.Test.Executor;
using HatTrick.DbEx.Sql.Builder;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Xunit;

namespace HatTrick.DbEx.MsSql.Test.Database.Executor
{
    [Trait("Function", "DATEADD")]
    [Trait("Function", "DATEPART")]
    public partial class DateDiffAndDatePart : ExecutorTestBase
    {
<<<<<<< HEAD
=======
        [Theory]
        [MsSqlVersions.AllVersions]
        public void Does_selecting_datepart_of_day_of_datediff_of_ship_date_and_purchase_date_succeed(int version, int expected = 15)
        {
            //given
            ConfigureForMsSqlVersion(version);

            var exp = db.SelectMany(
                    db.fx.DatePart(DateParts.Day, db.fx.DateDiff(DateParts.Day, dbo.Purchase.ShipDate, dbo.Purchase.PurchaseDate))
                ).From(dbo.Purchase);

            //when               
            IList<int?> results = exp.Execute();

            //then
            results.Should().HaveCount(expected);
        }

        [Theory]
        [MsSqlVersions.AllVersions]
        public void Does_selecting_datepart_of_day_of_datediff_of_date_created_and_purchase_date_succeed(int version, int expected = 15)
        {
            //given
            ConfigureForMsSqlVersion(version);

            var exp = db.SelectMany(
                    db.fx.DatePart(DateParts.Day, db.fx.DateDiff(DateParts.Day, dbo.Purchase.DateCreated, dbo.Purchase.PurchaseDate))
                ).From(dbo.Purchase);

            //when               
            IList<int> results = exp.Execute();

            //then
            results.Should().HaveCount(expected);
        }

>>>>>>> release/1.0
        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datediff_of_purchase_date_and_date_created_added_to_datepart_of_purchase_date_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated) + db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_added_to_datediff_of_purchase_date_and_ship_date_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) + db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.ShipDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_added_to_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) + db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_purchase_date_added_to_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate) + db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datediff_of_purchase_date_and_date_created_minus_datepart_of_purchase_date_succeed(int version, int expected = -2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated) - db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_minus_datediff_of_purchase_date_and_ship_date_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) - db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.ShipDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_minus_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) - db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_purchase_date_minums_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate) - db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datediff_of_purchase_date_and_date_created_multiplied_by_datepart_of_purchase_date_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated) * db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_multiplied_by_datediff_of_purchase_date_and_ship_date_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) * db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.ShipDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_multiplied_by_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) * db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int? result = exp.Execute();

        //    //then
        //    result.Should().NotBeNull();
        //    result.Value.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_purchase_date_multiplied_by_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate) * db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datediff_of_purchase_date_and_date_created_divided_by_datepart_of_purchase_date_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated) / db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_divided_by_datediff_of_purchase_date_and_ship_date_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) / db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.ShipDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_divided_by_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) / db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_purchase_date_divided_by_datediff_of_purchase_date_and_date_created_succeed(int version)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate) / db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datediff_of_purchase_date_and_date_created_modulus_of_datepart_of_purchase_date_succeed(int version, int expected = 0)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    var exp = db.SelectOne(
        //            db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated) % db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value);

        //    //when               
        //    int result = exp.Execute();

        //    //then
        //    result.Should().Be(expected);
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_modulus_of_datediff_of_purchase_date_and_ship_date_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) % db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.ShipDate)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_ship_date_modulus_of_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.ShipDate) % db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}

        //MILESTONE: Function Arithmetic
        //[Theory]
        //[MsSqlVersions.AllVersions]
        //public void Does_selecting_datepart_of_purchase_date_modulus_of_datediff_of_purchase_date_and_date_created_succeed(int version, int expected = 2017)
        //{
        //    //given
        //    ConfigureForMsSqlVersion(version);

        //    static void _() => db.SelectOne(
        //            db.fx.DatePart(DateParts.Year, dbo.Purchase.PurchaseDate) % db.fx.DateDiff(DateParts.Year, dbo.Purchase.PurchaseDate, dbo.Purchase.DateCreated)
        //        ).From(dbo.Purchase)
        //        .Where(dbo.Purchase.ShipDate != DBNull.Value)
        //        .Execute();

        //    //when               
        //    var result = Assert.ThrowsAny<Exception>(_);

        //    //then
        //    result.Should().BeOfType<SqlException>();
        //    result.As<SqlException>().Message.Should().Be("Divide by zero error encountered.");
        //}
    }
}
