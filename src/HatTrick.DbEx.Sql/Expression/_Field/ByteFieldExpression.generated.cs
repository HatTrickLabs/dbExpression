using System;

namespace HatTrick.DbEx.Sql.Expression
{
    public partial class ByteFieldExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<byte>(ByteFieldExpression a) => new SelectExpression<byte>(new ExpressionContainer(a));
        public static implicit operator ByteExpressionMediator(ByteFieldExpression a) => new ByteExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(ByteFieldExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(ByteFieldExpression a) => new GroupByExpression(new ExpressionContainer(a));
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static ByteExpressionMediator operator +(ByteFieldExpression a, byte b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static ByteExpressionMediator operator -(ByteFieldExpression a, byte b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static ByteExpressionMediator operator *(ByteFieldExpression a, byte b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static ByteExpressionMediator operator /(ByteFieldExpression a, byte b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static ByteExpressionMediator operator %(ByteFieldExpression a, byte b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static ByteExpressionMediator operator +(byte a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static ByteExpressionMediator operator -(byte a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static ByteExpressionMediator operator *(byte a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static ByteExpressionMediator operator /(byte a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static ByteExpressionMediator operator %(byte a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static ByteExpressionMediator operator +(ByteFieldExpression a, byte? b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static ByteExpressionMediator operator -(ByteFieldExpression a, byte? b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static ByteExpressionMediator operator *(ByteFieldExpression a, byte? b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static ByteExpressionMediator operator /(ByteFieldExpression a, byte? b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static ByteExpressionMediator operator %(ByteFieldExpression a, byte? b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static ByteExpressionMediator operator +(byte? a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static ByteExpressionMediator operator -(byte? a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static ByteExpressionMediator operator *(byte? a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static ByteExpressionMediator operator /(byte? a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static ByteExpressionMediator operator %(byte? a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(ByteFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(ByteFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(ByteFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(ByteFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(ByteFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(ByteFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(ByteFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(ByteFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(ByteFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(ByteFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal? a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal? a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal? a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal? a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal? a, ByteFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(ByteFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(ByteFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(ByteFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(ByteFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(ByteFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(ByteFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(ByteFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(ByteFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(ByteFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(ByteFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime? a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime? a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime? a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime? a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime? a, ByteFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(ByteFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(ByteFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(ByteFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(ByteFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(ByteFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(ByteFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(ByteFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(ByteFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(ByteFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(ByteFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, ByteFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(ByteFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(ByteFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(ByteFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(ByteFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(ByteFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(ByteFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(ByteFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(ByteFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(ByteFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(ByteFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double? a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double? a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double? a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double? a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double? a, ByteFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(ByteFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(ByteFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(ByteFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(ByteFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(ByteFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(ByteFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(ByteFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(ByteFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(ByteFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(ByteFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float? a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float? a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float? a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float? a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float? a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static Int16ExpressionMediator operator +(ByteFieldExpression a, short b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static Int16ExpressionMediator operator -(ByteFieldExpression a, short b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int16ExpressionMediator operator *(ByteFieldExpression a, short b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int16ExpressionMediator operator /(ByteFieldExpression a, short b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int16ExpressionMediator operator %(ByteFieldExpression a, short b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int16ExpressionMediator operator +(short a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int16ExpressionMediator operator -(short a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int16ExpressionMediator operator *(short a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int16ExpressionMediator operator /(short a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int16ExpressionMediator operator %(short a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int16ExpressionMediator operator +(ByteFieldExpression a, short? b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int16ExpressionMediator operator -(ByteFieldExpression a, short? b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int16ExpressionMediator operator *(ByteFieldExpression a, short? b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int16ExpressionMediator operator /(ByteFieldExpression a, short? b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int16ExpressionMediator operator %(ByteFieldExpression a, short? b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int16ExpressionMediator operator +(short? a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int16ExpressionMediator operator -(short? a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int16ExpressionMediator operator *(short? a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int16ExpressionMediator operator /(short? a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int16ExpressionMediator operator %(short? a, ByteFieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static Int32ExpressionMediator operator +(ByteFieldExpression a, int b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static Int32ExpressionMediator operator -(ByteFieldExpression a, int b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int32ExpressionMediator operator *(ByteFieldExpression a, int b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int32ExpressionMediator operator /(ByteFieldExpression a, int b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int32ExpressionMediator operator %(ByteFieldExpression a, int b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int32ExpressionMediator operator +(int a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int32ExpressionMediator operator -(int a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int32ExpressionMediator operator *(int a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int32ExpressionMediator operator /(int a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int32ExpressionMediator operator %(int a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int32ExpressionMediator operator +(ByteFieldExpression a, int? b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int32ExpressionMediator operator -(ByteFieldExpression a, int? b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int32ExpressionMediator operator *(ByteFieldExpression a, int? b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int32ExpressionMediator operator /(ByteFieldExpression a, int? b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int32ExpressionMediator operator %(ByteFieldExpression a, int? b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int32ExpressionMediator operator +(int? a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int32ExpressionMediator operator -(int? a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int32ExpressionMediator operator *(int? a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int32ExpressionMediator operator /(int? a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int32ExpressionMediator operator %(int? a, ByteFieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static Int64ExpressionMediator operator +(ByteFieldExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(ByteFieldExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(ByteFieldExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(ByteFieldExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(ByteFieldExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(long a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(long a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(long a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(long a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(long a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(ByteFieldExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(ByteFieldExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(ByteFieldExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(ByteFieldExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(ByteFieldExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(long? a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(long? a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(long? a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(long? a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(long? a, ByteFieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static StringExpressionMediator operator +(ByteFieldExpression a, string b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<string>(b)), ArithmeticExpressionOperator.Add)));

        public static StringExpressionMediator operator +(string a, ByteFieldExpression b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<string>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion

        #region mediator
        #region byte
        public static ByteExpressionMediator operator +(ByteFieldExpression a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static ByteExpressionMediator operator -(ByteFieldExpression a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static ByteExpressionMediator operator *(ByteFieldExpression a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static ByteExpressionMediator operator /(ByteFieldExpression a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static ByteExpressionMediator operator %(ByteFieldExpression a, ByteFieldExpression b) => new ByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableByteExpressionMediator operator +(ByteFieldExpression a, NullableByteFieldExpression b) => new NullableByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableByteExpressionMediator operator -(ByteFieldExpression a, NullableByteFieldExpression b) => new NullableByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableByteExpressionMediator operator *(ByteFieldExpression a, NullableByteFieldExpression b) => new NullableByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableByteExpressionMediator operator /(ByteFieldExpression a, NullableByteFieldExpression b) => new NullableByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableByteExpressionMediator operator %(ByteFieldExpression a, NullableByteFieldExpression b) => new NullableByteExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(ByteFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(ByteFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(ByteFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(ByteFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(ByteFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(ByteFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(ByteFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(ByteFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(ByteFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(ByteFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(ByteFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(ByteFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(ByteFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(ByteFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(ByteFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(ByteFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(ByteFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(ByteFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(ByteFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(ByteFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(ByteFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(ByteFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(ByteFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(ByteFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(ByteFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(ByteFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(ByteFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(ByteFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(ByteFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(ByteFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(ByteFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(ByteFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(ByteFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(ByteFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(ByteFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(ByteFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(ByteFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(ByteFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(ByteFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(ByteFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(ByteFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(ByteFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(ByteFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(ByteFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(ByteFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(ByteFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(ByteFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(ByteFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(ByteFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(ByteFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static Int16ExpressionMediator operator +(ByteFieldExpression a, Int16FieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int16ExpressionMediator operator -(ByteFieldExpression a, Int16FieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int16ExpressionMediator operator *(ByteFieldExpression a, Int16FieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int16ExpressionMediator operator /(ByteFieldExpression a, Int16FieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int16ExpressionMediator operator %(ByteFieldExpression a, Int16FieldExpression b) => new Int16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableInt16ExpressionMediator operator +(ByteFieldExpression a, NullableInt16FieldExpression b) => new NullableInt16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableInt16ExpressionMediator operator -(ByteFieldExpression a, NullableInt16FieldExpression b) => new NullableInt16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableInt16ExpressionMediator operator *(ByteFieldExpression a, NullableInt16FieldExpression b) => new NullableInt16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableInt16ExpressionMediator operator /(ByteFieldExpression a, NullableInt16FieldExpression b) => new NullableInt16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableInt16ExpressionMediator operator %(ByteFieldExpression a, NullableInt16FieldExpression b) => new NullableInt16ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static Int32ExpressionMediator operator +(ByteFieldExpression a, Int32FieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int32ExpressionMediator operator -(ByteFieldExpression a, Int32FieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int32ExpressionMediator operator *(ByteFieldExpression a, Int32FieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int32ExpressionMediator operator /(ByteFieldExpression a, Int32FieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int32ExpressionMediator operator %(ByteFieldExpression a, Int32FieldExpression b) => new Int32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableInt32ExpressionMediator operator +(ByteFieldExpression a, NullableInt32FieldExpression b) => new NullableInt32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableInt32ExpressionMediator operator -(ByteFieldExpression a, NullableInt32FieldExpression b) => new NullableInt32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableInt32ExpressionMediator operator *(ByteFieldExpression a, NullableInt32FieldExpression b) => new NullableInt32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableInt32ExpressionMediator operator /(ByteFieldExpression a, NullableInt32FieldExpression b) => new NullableInt32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableInt32ExpressionMediator operator %(ByteFieldExpression a, NullableInt32FieldExpression b) => new NullableInt32ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static Int64ExpressionMediator operator +(ByteFieldExpression a, Int64FieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(ByteFieldExpression a, Int64FieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(ByteFieldExpression a, Int64FieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(ByteFieldExpression a, Int64FieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(ByteFieldExpression a, Int64FieldExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableInt64ExpressionMediator operator +(ByteFieldExpression a, NullableInt64FieldExpression b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableInt64ExpressionMediator operator -(ByteFieldExpression a, NullableInt64FieldExpression b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableInt64ExpressionMediator operator *(ByteFieldExpression a, NullableInt64FieldExpression b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableInt64ExpressionMediator operator /(ByteFieldExpression a, NullableInt64FieldExpression b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableInt64ExpressionMediator operator %(ByteFieldExpression a, NullableInt64FieldExpression b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static StringExpressionMediator operator +(ByteFieldExpression a, StringFieldExpression b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion
        #endregion

        #region filter operators
        #region byte
        public static FilterExpression<byte> operator ==(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<byte> operator !=(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte> operator <(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<byte> operator <=(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte> operator >(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte> operator >=(ByteFieldExpression a, byte b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<byte> operator ==(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<byte> operator !=(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte> operator <(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<byte> operator <=(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte> operator >(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte> operator >=(byte a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<byte> operator ==(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<byte> operator !=(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte> operator <(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<byte> operator <=(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte> operator >(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte> operator >=(ByteFieldExpression a, byte? b) => new FilterExpression<byte>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<byte> operator ==(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<byte> operator !=(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte> operator <(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<byte> operator <=(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte> operator >(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte> operator >=(byte? a, ByteFieldExpression b) => new FilterExpression<byte>(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        
        #region mediator
        public static FilterExpression<byte> operator ==(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<byte> operator !=(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte> operator <(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<byte> operator <=(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte> operator >(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte> operator >=(ByteFieldExpression a, ByteExpressionMediator b) => new FilterExpression<byte>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<byte?> operator ==(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<byte?> operator !=(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<byte?> operator <(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<byte?> operator <=(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<byte?> operator >(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<byte?> operator >=(ByteFieldExpression a, NullableByteExpressionMediator b) => new FilterExpression<byte?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
