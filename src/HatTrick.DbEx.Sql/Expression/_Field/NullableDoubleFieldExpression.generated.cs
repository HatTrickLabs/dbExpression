using System;

namespace HatTrick.DbEx.Sql.Expression
{
    public partial class NullableDoubleFieldExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<double?>(NullableDoubleFieldExpression a) => new SelectExpression<double?>(new ExpressionContainer(a));
        public static implicit operator NullableDoubleExpressionMediator(NullableDoubleFieldExpression a) => new NullableDoubleExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(NullableDoubleFieldExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(NullableDoubleFieldExpression a) => new GroupByExpression(new ExpressionContainer(a));
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(byte a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(byte a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(byte a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(byte a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(byte a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(byte? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(byte? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(byte? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(byte? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(byte? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static NullableDecimalExpressionMediator operator +(NullableDoubleFieldExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleFieldExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleFieldExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleFieldExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleFieldExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(decimal a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(decimal a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(decimal a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(decimal a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(decimal a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(NullableDoubleFieldExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleFieldExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleFieldExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleFieldExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleFieldExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(decimal? a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(decimal? a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(decimal? a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(decimal? a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(decimal? a, NullableDoubleFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static NullableDateTimeExpressionMediator operator +(NullableDoubleFieldExpression a, DateTime b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(NullableDoubleFieldExpression a, DateTime b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(NullableDoubleFieldExpression a, DateTime b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(NullableDoubleFieldExpression a, DateTime b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(NullableDoubleFieldExpression a, DateTime b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(DateTime a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(DateTime a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(DateTime a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(DateTime a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(DateTime a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(NullableDoubleFieldExpression a, DateTime? b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(NullableDoubleFieldExpression a, DateTime? b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(NullableDoubleFieldExpression a, DateTime? b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(NullableDoubleFieldExpression a, DateTime? b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(NullableDoubleFieldExpression a, DateTime? b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(DateTime? a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(DateTime? a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(DateTime? a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(DateTime? a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(DateTime? a, NullableDoubleFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static NullableDateTimeOffsetExpressionMediator operator +(NullableDoubleFieldExpression a, DateTimeOffset b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(NullableDoubleFieldExpression a, DateTimeOffset b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(NullableDoubleFieldExpression a, DateTimeOffset b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(NullableDoubleFieldExpression a, DateTimeOffset b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(NullableDoubleFieldExpression a, DateTimeOffset b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(DateTimeOffset a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(DateTimeOffset a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(DateTimeOffset a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(DateTimeOffset a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(DateTimeOffset a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(NullableDoubleFieldExpression a, DateTimeOffset? b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(NullableDoubleFieldExpression a, DateTimeOffset? b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(NullableDoubleFieldExpression a, DateTimeOffset? b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(NullableDoubleFieldExpression a, DateTimeOffset? b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(NullableDoubleFieldExpression a, DateTimeOffset? b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, NullableDoubleFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(double a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(double a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(double a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(double a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(double a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(double? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(double? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(double? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(double? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(double? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(float a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(float a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(float a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(float a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(float a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(float? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(float? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(float? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(float? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(float? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(short a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(short a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(short a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(short a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(short a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(short? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(short? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(short? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(short? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(short? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(int a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(int a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(int a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(int a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(int a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(int? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(int? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(int? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(int? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(int? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(long a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(long a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(long a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(long a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(long a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(long? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(long? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(long? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(long? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(long? a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion

        #region mediator
        #region byte
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, ByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, ByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, ByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, ByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, ByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableByteFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static NullableDecimalExpressionMediator operator +(NullableDoubleFieldExpression a, DecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleFieldExpression a, DecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleFieldExpression a, DecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleFieldExpression a, DecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleFieldExpression a, DecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(NullableDoubleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static NullableDateTimeExpressionMediator operator +(NullableDoubleFieldExpression a, DateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(NullableDoubleFieldExpression a, DateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(NullableDoubleFieldExpression a, DateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(NullableDoubleFieldExpression a, DateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(NullableDoubleFieldExpression a, DateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(NullableDoubleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(NullableDoubleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(NullableDoubleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(NullableDoubleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(NullableDoubleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static NullableDateTimeOffsetExpressionMediator operator +(NullableDoubleFieldExpression a, DateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(NullableDoubleFieldExpression a, DateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(NullableDoubleFieldExpression a, DateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(NullableDoubleFieldExpression a, DateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(NullableDoubleFieldExpression a, DateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(NullableDoubleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(NullableDoubleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(NullableDoubleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(NullableDoubleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(NullableDoubleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, DoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, DoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, DoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, DoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, DoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, SingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, SingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, SingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, SingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, SingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableSingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableSingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableSingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableSingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableSingleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, Int16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, Int16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, Int16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, Int16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, Int16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableInt16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableInt16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableInt16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableInt16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableInt16FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, Int32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, Int32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, Int32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, Int32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, Int32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableInt32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableInt32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableInt32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableInt32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableInt32FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, Int64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, Int64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, Int64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, Int64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, Int64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleFieldExpression a, NullableInt64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleFieldExpression a, NullableInt64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleFieldExpression a, NullableInt64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleFieldExpression a, NullableInt64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleFieldExpression a, NullableInt64FieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion
        #endregion

        #region filter operators
        #region DBNull
        public static FilterExpression<double?> operator ==(NullableDoubleFieldExpression a, DBNull b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(b, typeof(DBNull)), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleFieldExpression a, DBNull b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(b, typeof(DBNull)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator ==(DBNull a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(a, typeof(DBNull)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(DBNull a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(a, typeof(DBNull)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        #endregion

        #region double
        public static FilterExpression<double?> operator ==(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(NullableDoubleFieldExpression a, double b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double?> operator ==(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(double a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double?> operator ==(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(NullableDoubleFieldExpression a, double? b) => new FilterExpression<double?>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double?> operator ==(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(double? a, NullableDoubleFieldExpression b) => new FilterExpression<double?>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        
        #region mediator
        public static FilterExpression<double?> operator ==(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(NullableDoubleFieldExpression a, DoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double?> operator ==(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(NullableDoubleFieldExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
