using System;

namespace HatTrick.DbEx.Sql.Expression
{
    public partial class SingleFieldExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<float>(SingleFieldExpression a) => new SelectExpression<float>(new ExpressionContainer(a));
        public static implicit operator SingleExpressionMediator(SingleFieldExpression a) => new SingleExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(SingleFieldExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(SingleFieldExpression a) => new GroupByExpression(new ExpressionContainer(a));
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static SingleExpressionMediator operator +(SingleFieldExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleFieldExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(SingleFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleFieldExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(SingleFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleFieldExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal? a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal? a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal? a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal? a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal? a, SingleFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(SingleFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleFieldExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(SingleFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleFieldExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime? a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime? a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime? a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime? a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime? a, SingleFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(SingleFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleFieldExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(SingleFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleFieldExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, SingleFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(SingleFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleFieldExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(SingleFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleFieldExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double? a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double? a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double? a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double? a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double? a, SingleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SingleFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static SingleExpressionMediator operator +(SingleFieldExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleFieldExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SingleFieldExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleFieldExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SingleFieldExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleFieldExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long? a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static StringExpressionMediator operator +(SingleFieldExpression a, string b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<string>(b)), ArithmeticExpressionOperator.Add)));

        public static StringExpressionMediator operator +(string a, SingleFieldExpression b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<string>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion

        #region mediator
        #region byte
        public static SingleExpressionMediator operator +(SingleFieldExpression a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, ByteFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleFieldExpression a, NullableByteFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleFieldExpression a, NullableByteFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleFieldExpression a, NullableByteFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleFieldExpression a, NullableByteFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleFieldExpression a, NullableByteFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(SingleFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleFieldExpression a, DecimalFieldExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(SingleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(SingleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(SingleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(SingleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(SingleFieldExpression a, NullableDecimalFieldExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(SingleFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleFieldExpression a, DateTimeFieldExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(SingleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(SingleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(SingleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(SingleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(SingleFieldExpression a, NullableDateTimeFieldExpression b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(SingleFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleFieldExpression a, DateTimeOffsetFieldExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(SingleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(SingleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(SingleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(SingleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(SingleFieldExpression a, NullableDateTimeOffsetFieldExpression b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(SingleFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleFieldExpression a, DoubleFieldExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(SingleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(SingleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(SingleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(SingleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(SingleFieldExpression a, NullableDoubleFieldExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SingleFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, SingleFieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleFieldExpression a, NullableSingleFieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static SingleExpressionMediator operator +(SingleFieldExpression a, Int16FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, Int16FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, Int16FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, Int16FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, Int16FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleFieldExpression a, NullableInt16FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleFieldExpression a, NullableInt16FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleFieldExpression a, NullableInt16FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleFieldExpression a, NullableInt16FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleFieldExpression a, NullableInt16FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SingleFieldExpression a, Int32FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, Int32FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, Int32FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, Int32FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, Int32FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleFieldExpression a, NullableInt32FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleFieldExpression a, NullableInt32FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleFieldExpression a, NullableInt32FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleFieldExpression a, NullableInt32FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleFieldExpression a, NullableInt32FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SingleFieldExpression a, Int64FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleFieldExpression a, Int64FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleFieldExpression a, Int64FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleFieldExpression a, Int64FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleFieldExpression a, Int64FieldExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleFieldExpression a, NullableInt64FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleFieldExpression a, NullableInt64FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleFieldExpression a, NullableInt64FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleFieldExpression a, NullableInt64FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleFieldExpression a, NullableInt64FieldExpression b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static StringExpressionMediator operator +(SingleFieldExpression a, StringFieldExpression b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion
        #endregion

        #region filter operators
        #region float
        public static FilterExpression<float> operator ==(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleFieldExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleFieldExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float? a, SingleFieldExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        
        #region mediator
        public static FilterExpression<float> operator ==(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleFieldExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float?> operator ==(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float?> operator !=(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float?> operator <(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float?> operator <=(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float?> operator >(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float?> operator >=(SingleFieldExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
