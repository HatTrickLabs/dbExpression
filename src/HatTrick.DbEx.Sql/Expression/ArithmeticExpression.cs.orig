using HatTrick.DbEx.Sql.Assembler;
using System;

namespace HatTrick.DbEx.Sql.Expression
{
    public class ArithmeticExpression : 
        IAssemblyPart,
        IEquatable<ArithmeticExpression>
    {
        #region interface
        public ExpressionContainer Expression { get; private set; }
        public ExpressionContainer LeftPart => ((ExpressionContainerPair)Expression.Object).LeftPart;
        public ExpressionContainer RightPart => ((ExpressionContainerPair)Expression.Object).RightPart;
        public ArithmeticExpressionOperator ExpressionOperator { get; private set; }
        #endregion

        #region constructors
<<<<<<< HEAD
        public ArithmeticExpression(ExpressionContainer leftArg, ExpressionContainer rightArg, ArithmeticExpressionOperator arithmeticOperator)
        {
            Expression = new ExpressionContainer(new ExpressionContainerPair(leftArg ?? throw new ArgumentNullException($"{nameof(leftArg)} is required."), rightArg ?? throw new ArgumentNullException($"{nameof(rightArg)} is required.")));
            ExpressionOperator = arithmeticOperator;
        }
        #endregion

        #region to string
        public override string ToString() => $"({LeftPart.Object} {ExpressionOperator} {RightPart.Object})";
        #endregion

        #region equals
        public bool Equals(ArithmeticExpression obj)
        {
            if (obj is null) return false;

            if (Expression is null && obj.Expression is object) return false;
            if (Expression is object && obj.Expression is null) return false;
            if (!Expression.Equals(obj.Expression)) return false;

            if (!ExpressionOperator.Equals(obj.ExpressionOperator)) return false;

            return true;
        }

        public override bool Equals(object obj)
            => obj is ArithmeticExpression exp && Equals(exp);

        public override int GetHashCode()
        {
            unchecked
            {
                const int @base = (int)2166136261;
                const int multiplier = 16777619;

                int hash = @base;
                hash = (hash * multiplier) ^ (Expression is object ? Expression.GetHashCode() : 0);
                hash = (hash * multiplier) ^ ExpressionOperator.GetHashCode();
                return hash;
            }
        }
=======
        protected ArithmeticExpression(IDbExpression leftArg, (Type, object) rightArg, ArithmeticExpressionOperator arithmeticOperator)
        {
            Expression = (typeof(DbExpressionPair), new DbExpressionPair((leftArg.GetType(), leftArg), rightArg));
            ExpressionOperator = arithmeticOperator;
        }

        public ArithmeticExpression(IDbExpression leftArg, IDbExpression rightArg, ArithmeticExpressionOperator arithmeticOperator)
        {
            Expression = (typeof(DbExpressionPair), new DbExpressionPair((leftArg.GetType(), leftArg), (rightArg.GetType(), rightArg)));
            ExpressionOperator = arithmeticOperator;
        }

        protected ArithmeticExpression((Type,object) leftArg, (Type,object) rightArg, ArithmeticExpressionOperator arithmeticOperator)
        {
            Expression = (typeof(DbExpressionPair), new DbExpressionPair(leftArg, rightArg));
            ExpressionOperator = arithmeticOperator;
        }

        public ArithmeticExpression((Type, object) leftArg, IDbExpression righArg, ArithmeticExpressionOperator arithmeticOperator)
        {
            Expression = (typeof(DbExpressionPair), new DbExpressionPair(leftArg, (righArg.GetType(), righArg)));
            ExpressionOperator = arithmeticOperator;
        }

        private ArithmeticExpression((Type, object) inner, ArithmeticExpressionOperator arithmeticOperator, string alias)
        {
            Expression = inner;
            ExpressionOperator = arithmeticOperator;
            Alias = alias;
        }
        #endregion

        #region to string
        public override string ToString() => $"({LeftPart.Item2} {ExpressionOperator} {RightPart.Item2})";
        #endregion

        #region as
        public ArithmeticExpression As(string alias) => new ArithmeticExpression(Expression, ExpressionOperator, alias);
        #endregion

        #region implicit expression operator
        public static implicit operator OrderByExpression(ArithmeticExpression average) => new OrderByExpression((average.GetType(), average), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(ArithmeticExpression average) => new GroupByExpression((average.GetType(), average));
        #endregion

        //#region arithmetic expression to value operators arithmetic operators

        //public static ArithmeticExpression operator +(ArithmeticExpression a, string b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator +(ArithmeticExpression a, decimal b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator +(ArithmeticExpression a, double b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator +(ArithmeticExpression a, int b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator +(ArithmeticExpression a, long b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        // public static ArithmeticExpression operator +(ArithmeticExpression a, DateTime b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, decimal b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, double b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, int b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, long b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, DateTime b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator *(ArithmeticExpression a, decimal b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply);

        //public static ArithmeticExpression operator *(ArithmeticExpression a, double b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply);

        //public static ArithmeticExpression operator *(ArithmeticExpression a, int b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply);

        //public static ArithmeticExpression operator *(ArithmeticExpression a, long b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply);

        //public static ArithmeticExpression operator /(ArithmeticExpression a, decimal b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide);

        //public static ArithmeticExpression operator /(ArithmeticExpression a, double b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide);

        //public static ArithmeticExpression operator /(ArithmeticExpression a, int b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide);

        //public static ArithmeticExpression operator /(ArithmeticExpression a, long b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide);

        //public static ArithmeticExpression operator %(ArithmeticExpression a, decimal b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo);

        //public static ArithmeticExpression operator %(ArithmeticExpression a, double b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo);

        //public static ArithmeticExpression operator %(ArithmeticExpression a, int b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo);

        //public static ArithmeticExpression operator %(ArithmeticExpression a, long b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo);
        //#endregion

        //#region arithmetic expression to expression relational operators
        //public static FilterExpression operator ==(ArithmeticExpression a, IDbExpression b) => new FilterExpression(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator !=(ArithmeticExpression a, IDbExpression b) => new FilterExpression(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator <(ArithmeticExpression a, IDbExpression b) => new FilterExpression(a, b, FilterExpressionOperator.LessThan);

        //public static FilterExpression operator <=(ArithmeticExpression a, IDbExpression b)  => new FilterExpression(a, b, FilterExpressionOperator.LessThanOrEqual);

        //public static FilterExpression operator >(ArithmeticExpression a, IDbExpression b) => new FilterExpression(a, b, FilterExpressionOperator.GreaterThan);

        //public static FilterExpression operator >=(ArithmeticExpression a, IDbExpression b) => new FilterExpression(a, b, FilterExpressionOperator.GreaterThanOrEqual);
        //#endregion

        //#region arithmetic to value relational operators
        //public static FilterExpression operator ==(ArithmeticExpression a, string b) => new FilterExpression<string>(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator ==(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator ==(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator ==(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator ==(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.Equal);

        //public static FilterExpression operator !=(ArithmeticExpression a, string b) => new FilterExpression<string>(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator !=(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator !=(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator !=(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator !=(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.NotEqual);

        //public static FilterExpression operator <(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.LessThan);

        //public static FilterExpression operator <(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.LessThan);

        //public static FilterExpression operator <(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.LessThan);

        //public static FilterExpression operator <(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.LessThan);

        //public static FilterExpression operator <=(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.LessThanOrEqual);

        //public static FilterExpression operator <=(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.LessThanOrEqual);

        //public static FilterExpression operator <=(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.LessThanOrEqual);

        //public static FilterExpression operator <=(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.LessThanOrEqual);

        //public static FilterExpression operator >(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.GreaterThan);

        //public static FilterExpression operator >(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.GreaterThan);

        //public static FilterExpression operator >(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.GreaterThan);

        //public static FilterExpression operator >(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.GreaterThan);

        //public static FilterExpression operator >=(ArithmeticExpression a, decimal b) => new FilterExpression<decimal>(a, b, FilterExpressionOperator.GreaterThanOrEqual);

        //public static FilterExpression operator >=(ArithmeticExpression a, double b) => new FilterExpression<double>(a, b, FilterExpressionOperator.GreaterThanOrEqual);

        //public static FilterExpression operator >=(ArithmeticExpression a, int b) => new FilterExpression<int>(a, b, FilterExpressionOperator.GreaterThanOrEqual);

        //public static FilterExpression operator >=(ArithmeticExpression a, long b) => new FilterExpression<long>(a, b, FilterExpressionOperator.GreaterThanOrEqual);
        //#endregion

        //#region arithmetic expression to arithmetic expression operators
        ////public static ArithmeticExpression operator +(ArithmeticExpression a, ArithmeticExpression b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add);

        //public static ArithmeticExpression operator -(ArithmeticExpression a, ArithmeticExpression b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract);

        //public static ArithmeticExpression operator *(ArithmeticExpression a, ArithmeticExpression b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply);

        //public static ArithmeticExpression operator /(ArithmeticExpression a, ArithmeticExpression b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide);

        //public static ArithmeticExpression operator %(ArithmeticExpression a, ArithmeticExpression b) => new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo);
        //#endregion

        #region equals
        public override bool Equals(object obj) => base.Equals(obj);
        #endregion

        #region override get hash code
        public override int GetHashCode() => base.GetHashCode();
>>>>>>> release/1.0
        #endregion
    }
}
