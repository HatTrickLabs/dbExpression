using System;

namespace HatTrick.DbEx.Sql.Expression
{
    public partial class DoubleExpressionMediator
    {
        #region implicit operators
        public static implicit operator SelectExpression<double>(DoubleExpressionMediator a) => new SelectExpression<double>(a.Expression);
        public static implicit operator OrderByExpression(DoubleExpressionMediator a) => new OrderByExpression(a.Expression, OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(DoubleExpressionMediator a) => new GroupByExpression(a.Expression);
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, byte b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, byte b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, byte b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, byte b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, byte b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(byte a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(byte a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(byte a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(byte a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(byte a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, byte? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, byte? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, byte? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, byte? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, byte? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(byte? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(byte? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(byte? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(byte? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(byte? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(DoubleExpressionMediator a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(DoubleExpressionMediator a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(DoubleExpressionMediator a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(DoubleExpressionMediator a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(DoubleExpressionMediator a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(DoubleExpressionMediator a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(DoubleExpressionMediator a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(DoubleExpressionMediator a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(DoubleExpressionMediator a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(DoubleExpressionMediator a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal? a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal? a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal? a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal? a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal? a, DoubleExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(DoubleExpressionMediator a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DoubleExpressionMediator a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DoubleExpressionMediator a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DoubleExpressionMediator a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DoubleExpressionMediator a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DoubleExpressionMediator a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DoubleExpressionMediator a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DoubleExpressionMediator a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DoubleExpressionMediator a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DoubleExpressionMediator a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime? a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime? a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime? a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime? a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime? a, DoubleExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(DoubleExpressionMediator a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DoubleExpressionMediator a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DoubleExpressionMediator a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DoubleExpressionMediator a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DoubleExpressionMediator a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DoubleExpressionMediator a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DoubleExpressionMediator a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DoubleExpressionMediator a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DoubleExpressionMediator a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DoubleExpressionMediator a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, DoubleExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, float b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, float b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, float b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, float b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, float b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(float a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(float a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(float a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(float a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(float a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, float? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, float? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, float? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, float? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, float? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(float? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(float? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(float? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(float? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(float? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, short b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, short b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, short b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, short b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, short b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(short a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(short a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(short a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(short a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(short a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, short? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, short? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, short? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, short? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, short? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(short? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(short? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(short? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(short? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(short? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, int b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, int b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, int b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, int b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, int b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(int a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(int a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(int a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(int a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(int a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, int? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, int? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, int? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, int? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, int? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(int? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(int? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(int? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(int? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(int? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, long b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, long b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, long b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, long b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, long b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(long a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(long a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(long a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(long a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(long a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, long? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, long? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, long? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, long? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, long? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(long? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(long? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(long? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(long? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(long? a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static StringExpressionMediator operator +(DoubleExpressionMediator a, string b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, new ExpressionContainer(new LiteralExpression<string>(b)), ArithmeticExpressionOperator.Add)));

        public static StringExpressionMediator operator +(string a, DoubleExpressionMediator b) => new StringExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<string>(a)), b.Expression, ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion

        #region mediator
        #region byte
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, ByteExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, ByteExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, ByteExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, ByteExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, ByteExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(DoubleExpressionMediator a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(DoubleExpressionMediator a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(DoubleExpressionMediator a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(DoubleExpressionMediator a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(DoubleExpressionMediator a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(DoubleExpressionMediator a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(DoubleExpressionMediator a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(DoubleExpressionMediator a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(DoubleExpressionMediator a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(DoubleExpressionMediator a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(DoubleExpressionMediator a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DoubleExpressionMediator a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DoubleExpressionMediator a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DoubleExpressionMediator a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DoubleExpressionMediator a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(DoubleExpressionMediator a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(DoubleExpressionMediator a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(DoubleExpressionMediator a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(DoubleExpressionMediator a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(DoubleExpressionMediator a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(DoubleExpressionMediator a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DoubleExpressionMediator a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DoubleExpressionMediator a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DoubleExpressionMediator a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DoubleExpressionMediator a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(DoubleExpressionMediator a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(DoubleExpressionMediator a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(DoubleExpressionMediator a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(DoubleExpressionMediator a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(DoubleExpressionMediator a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, SingleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, SingleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, SingleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, SingleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, SingleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, Int16ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, Int16ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, Int16ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, Int16ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, Int16ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, Int32ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, Int32ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, Int32ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, Int32ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, Int32ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static DoubleExpressionMediator operator +(DoubleExpressionMediator a, Int64ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(DoubleExpressionMediator a, Int64ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(DoubleExpressionMediator a, Int64ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(DoubleExpressionMediator a, Int64ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(DoubleExpressionMediator a, Int64ExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(DoubleExpressionMediator a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(DoubleExpressionMediator a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(DoubleExpressionMediator a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(DoubleExpressionMediator a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(DoubleExpressionMediator a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(a.Expression, b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion
        #endregion
    }
}
