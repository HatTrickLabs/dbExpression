
using System;


namespace HatTrick.DbEx.Sql.Expression
{
    public partial class SinglePopulationVarianceFunctionExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<float>(SinglePopulationVarianceFunctionExpression a) => new SelectExpression<float>(new ExpressionContainer(a));
        public static implicit operator SingleExpressionMediator(SinglePopulationVarianceFunctionExpression a) => new SingleExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(SinglePopulationVarianceFunctionExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, decimal b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, decimal b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, decimal b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, decimal b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, decimal b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(decimal a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(decimal a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(decimal a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(decimal a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(decimal a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, decimal? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, decimal? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, decimal? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, decimal? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, decimal? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(decimal? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(decimal? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(decimal? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(decimal? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(decimal? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, double b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, double b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, double b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, double b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, double b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(double a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(double a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(double a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(double a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(double a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, double? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, double? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, double? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, double? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, double? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(double? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(double? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(double? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(double? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(double? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long? a, SinglePopulationVarianceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion

        #region mediator
        #region byte
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, DecimalExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, DecimalExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, DecimalExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, DecimalExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, DecimalExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, DoubleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, DoubleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, DoubleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, DoubleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, DoubleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SinglePopulationVarianceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SinglePopulationVarianceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SinglePopulationVarianceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SinglePopulationVarianceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SinglePopulationVarianceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion
        #endregion

        #region filter operators
        #region TValue
        #region float
        public static FilterExpression<float> operator ==(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SinglePopulationVarianceFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SinglePopulationVarianceFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float? a, SinglePopulationVarianceFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion

        #region mediator
        public static FilterExpression<float> operator ==(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SinglePopulationVarianceFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float?> operator ==(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float?> operator !=(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float?> operator <(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float?> operator <=(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float?> operator >(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float?> operator >=(SinglePopulationVarianceFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
