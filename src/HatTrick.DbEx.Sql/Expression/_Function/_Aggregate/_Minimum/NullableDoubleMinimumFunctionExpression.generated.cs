using System;


namespace HatTrick.DbEx.Sql.Expression
{
    public partial class NullableDoubleMinimumFunctionExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<double?>(NullableDoubleMinimumFunctionExpression a) => new SelectExpression<double?>(new ExpressionContainer(a));
        public static implicit operator NullableDoubleExpressionMediator(NullableDoubleMinimumFunctionExpression a) => new NullableDoubleExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(NullableDoubleMinimumFunctionExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        #endregion

        #region arithmetic operators
        #region TValue
        #region byte
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, byte b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(byte a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(byte a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(byte a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(byte a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(byte a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, byte? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(byte? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(byte? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(byte? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(byte? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(byte? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region decimal
        public static NullableDecimalExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, decimal b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(decimal a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(decimal a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(decimal a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(decimal a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(decimal a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, decimal? b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(decimal? a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(decimal? a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(decimal? a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(decimal? a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(decimal? a, NullableDoubleMinimumFunctionExpression b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region double
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, double b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(double a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(double a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(double a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(double a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(double a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, double? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(double? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(double? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(double? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(double? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(double? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region float
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, float b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(float a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(float a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(float a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(float a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(float a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, float? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(float? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(float? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(float? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(float? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(float? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region short
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, short b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(short a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(short a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(short a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(short a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(short a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, short? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(short? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(short? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(short? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(short? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(short? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region int
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, int b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(int a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(int a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(int a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(int a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(int a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, int? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(int? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(int? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(int? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(int? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(int? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #region long
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, long b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(long a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(long a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(long a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(long a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(long a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, long? b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(long? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(long? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(long? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(long? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(long? a, NullableDoubleMinimumFunctionExpression b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        
        #endregion

        #endregion

        #region mediator
        #region byte
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, ByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, ByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, ByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, ByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, ByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableByteExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static NullableDecimalExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, DecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, DecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, DecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, DecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, DecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, SingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, SingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, SingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, SingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, SingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableSingleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region short
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, Int16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, Int16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, Int16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, Int16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, Int16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, Int32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, Int32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, Int32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, Int32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, Int32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, Int64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, Int64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, Int64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, Int64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, Int64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(NullableDoubleMinimumFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(NullableDoubleMinimumFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(NullableDoubleMinimumFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(NullableDoubleMinimumFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(NullableDoubleMinimumFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #endregion
        #endregion

        #region filter operators
        #region TValue
        #region double
        public static FilterExpression<double> operator ==(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<double> operator !=(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double> operator <(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<double> operator <=(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double> operator >(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double> operator >=(NullableDoubleMinimumFunctionExpression a, double b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double> operator ==(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<double> operator !=(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double> operator <(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<double> operator <=(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double> operator >(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double> operator >=(double a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double> operator ==(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<double> operator !=(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double> operator <(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<double> operator <=(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double> operator >(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double> operator >=(NullableDoubleMinimumFunctionExpression a, double? b) => new FilterExpression<double>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double> operator ==(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<double> operator !=(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<double> operator <(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<double> operator <=(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double> operator >(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double> operator >=(double? a, NullableDoubleMinimumFunctionExpression b) => new FilterExpression<double>(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion

        #region mediator
        public static FilterExpression<double> operator ==(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<double> operator !=(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<double> operator <(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<double> operator <=(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double> operator >(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double> operator >=(NullableDoubleMinimumFunctionExpression a, DoubleExpressionMediator b) => new FilterExpression<double>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<double?> operator ==(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<double?> operator !=(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<double?> operator <(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<double?> operator <=(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<double?> operator >(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<double?> operator >=(NullableDoubleMinimumFunctionExpression a, NullableDoubleExpressionMediator b) => new FilterExpression<double?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
