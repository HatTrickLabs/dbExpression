<<<<<<< HEAD
﻿using System;
=======
﻿using HatTrick.DbEx.Sql.Assembler;
using HatTrick.DbEx.Sql.Expression;
using System;
>>>>>>> release/1.0

namespace HatTrick.DbEx.Sql.Expression
{
    public abstract class DatePartFunctionExpression : ConversionFunctionExpression,
        IDbDateFunctionExpression,
<<<<<<< HEAD
        IEquatable<DatePartFunctionExpression>
    {
        #region interface
        public ExpressionContainer DatePart { get; private set; }
        #endregion

        #region constructors
        protected DatePartFunctionExpression(ExpressionContainer datePart, ExpressionContainer expression) : base(expression)
        {
            DatePart = datePart ?? throw new ArgumentNullException($"{nameof(datePart)} is required.");
=======
        IAssemblyPart,
        IDbExpressionAliasProvider,
        ISupportedForSelectExpression,
        IEquatable<DatePartFunctionExpression>
    {
        #region internals
        protected string Alias { get; private set; }
        #endregion

        #region interface
        public (Type, object) Expression { get; }
        public (Type, object) DatePart { get; private set; }
        string IDbExpressionAliasProvider.Alias => Alias;
        public OrderByExpression Asc => new OrderByExpression((GetType(), this), OrderExpressionDirection.ASC);
        public OrderByExpression Desc => new OrderByExpression((GetType(), this), OrderExpressionDirection.DESC);
        #endregion

        #region constructors
        protected DatePartFunctionExpression()
        {
        }

        protected DatePartFunctionExpression((Type, object) datePart, (Type, object) expression)
        {
            DatePart = datePart;
            Expression = expression;
>>>>>>> release/1.0
        }
        #endregion

        #region as
<<<<<<< HEAD
        public new DatePartFunctionExpression As(string alias)
        {
            base.As(alias);
=======
        public DatePartFunctionExpression As(string alias)
        {
            Alias = alias;
>>>>>>> release/1.0
            return this;
        }
        #endregion

        #region to string
        public override string ToString() => $"DATEPART({DatePart.ToString().ToLower()}, {Expression})";
        #endregion

        #region equals
        public bool Equals(DatePartFunctionExpression obj)
        {
<<<<<<< HEAD
            if (!base.Equals(obj)) return false;

            if (this.DatePart is null && obj.DatePart is object) return false;
            if (this.DatePart is object && obj.DatePart is null) return false;
            if (!this.DatePart.Equals(obj.DatePart)) return false;
=======
            if (ReferenceEquals(this, obj)) return true;
            if (ReferenceEquals(null, obj)) return false;
            if (this.Expression == default && obj.Expression != default) return false;
            if (obj.Expression == default && this.Expression != default) return false;
            if (this.Expression.Item1 != obj.Expression.Item1) return false;
            if (this.Expression.Item2 != obj.Expression.Item2) return false;
            if (this.DatePart != obj.DatePart) return false;
>>>>>>> release/1.0

            return true;
        }

        public override bool Equals(object obj)
         => obj is DatePartFunctionExpression exp ? Equals(exp) : false;

        public override int GetHashCode()
<<<<<<< HEAD
        {
            unchecked
            {
                const int multiplier = 16777619;

                int hash = base.GetHashCode();
                hash = (hash * multiplier) ^ (DatePart is object ? DatePart.GetHashCode() : 0);
                return hash;
            }
        }
        #endregion

        #region implicit operators
        public static implicit operator GroupByExpression(DatePartFunctionExpression datePart) => new GroupByExpression(datePart.Expression);
=======
            => base.GetHashCode();
        #endregion

        #region implicit operators
        public static implicit operator OrderByExpression(DatePartFunctionExpression datePart) => new OrderByExpression((datePart.GetType(), datePart), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(DatePartFunctionExpression datePart) => new GroupByExpression((datePart.GetType(), datePart));
>>>>>>> release/1.0
        #endregion
    }
}
