<<<<<<< HEAD
﻿using System;
=======
﻿using HatTrick.DbEx.Sql.Assembler;
using System;
>>>>>>> release/1.0

namespace HatTrick.DbEx.Sql.Expression
{
    public abstract class IsNullFunctionExpression : DataTypeFunctionExpression,
<<<<<<< HEAD
        IEquatable<IsNullFunctionExpression>
    {
        #region interface
        public ExpressionContainer Value { get; }
        #endregion

        #region constructors
        protected IsNullFunctionExpression(ExpressionContainer expression, ExpressionContainer value) : base(expression)
        {
            Value = value ?? throw new ArgumentNullException($"{nameof(value)} is required.");
=======
        IDbFunctionExpression,
        IAssemblyPart,
        ISupportedForExpression<SelectExpression>,
        IEquatable<IsNullFunctionExpression>
    {
        #region interface
        public (Type, object) Value { get; }
        #endregion

        #region constructors
        protected IsNullFunctionExpression()
        {
        }

        protected IsNullFunctionExpression((Type, object) expression, (Type, object) value)
            : base(expression)
        {
            Value = value;
>>>>>>> release/1.0
        }
        #endregion

        #region to string
<<<<<<< HEAD
        public override string ToString() => $"ISNULL({Expression.Object}, {Value.Object})";
=======
        public override string ToString() => $"ISNULL({Expression.Item2}, {Value.Item2})";
>>>>>>> release/1.0
        #endregion

        #region equals
        public bool Equals(IsNullFunctionExpression obj)
        {
            if (!base.Equals(obj)) return false;

<<<<<<< HEAD
            if (this.Value is null && obj.Value is object) return false;
            if (this.Value is object && obj.Value is null) return false;
            if (!this.Value.Equals(obj.Value)) return false;
=======
            if (obj.Value != this.Value) return false;
>>>>>>> release/1.0

            return true;
        }

        public override bool Equals(object obj)
         => obj is IsNullFunctionExpression exp ? Equals(exp) : false;

        public override int GetHashCode()
<<<<<<< HEAD
        {
            unchecked
            {
                const int multiplier = 16777619;

                int hash = base.GetHashCode();
                hash = (hash * multiplier) ^ (Value is object ? Value.GetHashCode() : 0);
                return hash;
            }
        }
=======
            => base.GetHashCode();
>>>>>>> release/1.0
        #endregion
    }
}
