
using System;


namespace HatTrick.DbEx.Sql.Expression
{
    public partial class SingleIsNullFunctionExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<float>(SingleIsNullFunctionExpression a) => new SelectExpression<float>(new ExpressionContainer(a));
        public static implicit operator SingleExpressionMediator(SingleIsNullFunctionExpression a) => new SingleExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(SingleIsNullFunctionExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(SingleIsNullFunctionExpression a) => new GroupByExpression(new ExpressionContainer(a));
        #endregion

        #region arithmetic operators
        #region TValue
        #region bool



        #endregion

        #region byte
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, byte b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, byte? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(byte? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(byte? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(byte? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(byte? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(byte? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(SingleIsNullFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleIsNullFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleIsNullFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleIsNullFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleIsNullFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(SingleIsNullFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleIsNullFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleIsNullFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleIsNullFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleIsNullFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal? a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal? a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal? a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal? a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal? a, SingleIsNullFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime? a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime? a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime? a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime? a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime? a, SingleIsNullFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, SingleIsNullFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(SingleIsNullFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleIsNullFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleIsNullFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleIsNullFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleIsNullFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(SingleIsNullFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleIsNullFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleIsNullFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleIsNullFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleIsNullFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double? a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double? a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double? a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double? a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double? a, SingleIsNullFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region Guid



        #endregion

        #region short
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, short b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, short? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(short? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(short? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(short? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(short? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(short? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, int b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, int? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(int? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(int? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(int? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(int? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(int? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, long b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, long? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(long? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(long? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(long? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(long? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(long? a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, string b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<string>(b)), ArithmeticExpressionOperator.Add)));

        public static SingleExpressionMediator operator +(string a, SingleIsNullFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<string>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));


        #endregion

        #endregion

        #region mediator
        #region bool

        #endregion

        #region byte
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, ByteExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableByteExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(SingleIsNullFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(SingleIsNullFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(SingleIsNullFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(SingleIsNullFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(SingleIsNullFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(SingleIsNullFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(SingleIsNullFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(SingleIsNullFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(SingleIsNullFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(SingleIsNullFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(SingleIsNullFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(SingleIsNullFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(SingleIsNullFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(SingleIsNullFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(SingleIsNullFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region Guid

        #endregion

        #region short
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, Int16ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, Int32ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(SingleIsNullFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(SingleIsNullFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(SingleIsNullFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(SingleIsNullFunctionExpression a, Int64ExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(SingleIsNullFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(SingleIsNullFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(SingleIsNullFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(SingleIsNullFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(SingleIsNullFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static SingleExpressionMediator operator +(SingleIsNullFunctionExpression a, StringExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion
        #endregion

        #region filter operators
        #region TValue
        #region float
        public static FilterExpression<float> operator ==(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleIsNullFunctionExpression a, float b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float a, SingleIsNullFunctionExpression b) => new FilterExpression<float>(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleIsNullFunctionExpression a, float? b) => new FilterExpression<float>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float> operator ==(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(float? a, SingleIsNullFunctionExpression b) => new FilterExpression<Single>(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion

        #region mediator
        public static FilterExpression<float> operator ==(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float> operator !=(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float> operator <(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float> operator <=(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float> operator >(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float> operator >=(SingleIsNullFunctionExpression a, SingleExpressionMediator b) => new FilterExpression<float>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<float?> operator ==(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<float?> operator !=(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<float?> operator <(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<float?> operator <=(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<float?> operator >(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<float?> operator >=(SingleIsNullFunctionExpression a, NullableSingleExpressionMediator b) => new FilterExpression<float?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
