
using System;


namespace HatTrick.DbEx.Sql.Expression
{
    public partial class Int64CoalesceFunctionExpression
    {
        #region implicit operators
        public static implicit operator SelectExpression<long>(Int64CoalesceFunctionExpression a) => new SelectExpression<long>(new ExpressionContainer(a));
        public static implicit operator Int64ExpressionMediator(Int64CoalesceFunctionExpression a) => new Int64ExpressionMediator(new ExpressionContainer(a));
        public static implicit operator OrderByExpression(Int64CoalesceFunctionExpression a) => new OrderByExpression(new ExpressionContainer(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(Int64CoalesceFunctionExpression a) => new GroupByExpression(new ExpressionContainer(a));
        #endregion

        #region arithmetic operators
        #region TValue
        #region bool



        #endregion

        #region byte
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, byte b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, byte b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, byte b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, byte b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, byte b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(byte a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(byte a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(byte a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(byte a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(byte a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, byte? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, byte? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, byte? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, byte? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, byte? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<byte?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(byte? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(byte? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(byte? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(byte? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(byte? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<byte?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(Int64CoalesceFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(Int64CoalesceFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(Int64CoalesceFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(Int64CoalesceFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(Int64CoalesceFunctionExpression a, decimal b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(Int64CoalesceFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(Int64CoalesceFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(Int64CoalesceFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(Int64CoalesceFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(Int64CoalesceFunctionExpression a, decimal? b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<decimal?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DecimalExpressionMediator operator +(decimal? a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(decimal? a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(decimal? a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(decimal? a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(decimal? a, Int64CoalesceFunctionExpression b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<decimal?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTime b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTime? b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTime?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeExpressionMediator operator +(DateTime? a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(DateTime? a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(DateTime? a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(DateTime? a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(DateTime? a, Int64CoalesceFunctionExpression b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTime?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTimeOffset b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTimeOffset? b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DateTimeOffsetExpressionMediator operator +(DateTimeOffset? a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(DateTimeOffset? a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(DateTimeOffset? a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(DateTimeOffset? a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(DateTimeOffset? a, Int64CoalesceFunctionExpression b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<DateTimeOffset?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(Int64CoalesceFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(Int64CoalesceFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(Int64CoalesceFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(Int64CoalesceFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(Int64CoalesceFunctionExpression a, double b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(Int64CoalesceFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(Int64CoalesceFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(Int64CoalesceFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(Int64CoalesceFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(Int64CoalesceFunctionExpression a, double? b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<double?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static DoubleExpressionMediator operator +(double? a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(double? a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(double? a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(double? a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(double? a, Int64CoalesceFunctionExpression b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<double?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(Int64CoalesceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(Int64CoalesceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(Int64CoalesceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(Int64CoalesceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(Int64CoalesceFunctionExpression a, float b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(Int64CoalesceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(Int64CoalesceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(Int64CoalesceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(Int64CoalesceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(Int64CoalesceFunctionExpression a, float? b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<float?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static SingleExpressionMediator operator +(float? a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(float? a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(float? a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(float? a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(float? a, Int64CoalesceFunctionExpression b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<float?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region Guid



        #endregion

        #region short
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, short b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, short b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, short b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, short b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, short b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(short a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(short a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(short a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(short a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(short a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, short? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, short? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, short? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, short? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, short? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<short?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(short? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(short? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(short? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(short? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(short? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<short?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, int b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, int b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, int b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, int b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, int b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(int a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(int a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(int a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(int a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(int a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, int? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, int? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, int? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, int? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, int? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<int?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(int? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(int? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(int? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(int? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(int? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<int?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, long b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(long a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(long a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(long a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(long a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(long a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, long? b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), ArithmeticExpressionOperator.Modulo)));

        public static Int64ExpressionMediator operator +(long? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(long? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(long? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(long? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(long? a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, string b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<string>(b)), ArithmeticExpressionOperator.Add)));

        public static Int64ExpressionMediator operator +(string a, Int64CoalesceFunctionExpression b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(new LiteralExpression<string>(a)), new ExpressionContainer(b), ArithmeticExpressionOperator.Add)));


        #endregion

        #endregion

        #region mediator
        #region bool

        #endregion

        #region byte
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, ByteExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, ByteExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, ByteExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, ByteExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, ByteExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableInt64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableByteExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableInt64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableByteExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableInt64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableByteExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableInt64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableByteExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableInt64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableByteExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region decimal
        public static DecimalExpressionMediator operator +(Int64CoalesceFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DecimalExpressionMediator operator -(Int64CoalesceFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DecimalExpressionMediator operator *(Int64CoalesceFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DecimalExpressionMediator operator /(Int64CoalesceFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DecimalExpressionMediator operator %(Int64CoalesceFunctionExpression a, DecimalExpressionMediator b) => new DecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDecimalExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDecimalExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDecimalExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDecimalExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDecimalExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableDecimalExpressionMediator b) => new NullableDecimalExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTime
        public static DateTimeExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTimeExpressionMediator b) => new DateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableDateTimeExpressionMediator b) => new NullableDateTimeExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region DateTimeOffset
        public static DateTimeOffsetExpressionMediator operator +(Int64CoalesceFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DateTimeOffsetExpressionMediator operator -(Int64CoalesceFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DateTimeOffsetExpressionMediator operator *(Int64CoalesceFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DateTimeOffsetExpressionMediator operator /(Int64CoalesceFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DateTimeOffsetExpressionMediator operator %(Int64CoalesceFunctionExpression a, DateTimeOffsetExpressionMediator b) => new DateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDateTimeOffsetExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDateTimeOffsetExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDateTimeOffsetExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDateTimeOffsetExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDateTimeOffsetExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableDateTimeOffsetExpressionMediator b) => new NullableDateTimeOffsetExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region double
        public static DoubleExpressionMediator operator +(Int64CoalesceFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static DoubleExpressionMediator operator -(Int64CoalesceFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static DoubleExpressionMediator operator *(Int64CoalesceFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static DoubleExpressionMediator operator /(Int64CoalesceFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static DoubleExpressionMediator operator %(Int64CoalesceFunctionExpression a, DoubleExpressionMediator b) => new DoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableDoubleExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableDoubleExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableDoubleExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableDoubleExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableDoubleExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableDoubleExpressionMediator b) => new NullableDoubleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region float
        public static SingleExpressionMediator operator +(Int64CoalesceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static SingleExpressionMediator operator -(Int64CoalesceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static SingleExpressionMediator operator *(Int64CoalesceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static SingleExpressionMediator operator /(Int64CoalesceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static SingleExpressionMediator operator %(Int64CoalesceFunctionExpression a, SingleExpressionMediator b) => new SingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableSingleExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableSingleExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableSingleExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableSingleExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableSingleExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableSingleExpressionMediator b) => new NullableSingleExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region Guid

        #endregion

        #region short
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, Int16ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, Int16ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, Int16ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, Int16ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, Int16ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableInt64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableInt64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableInt64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableInt64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableInt64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableInt16ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region int
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, Int32ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, Int32ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, Int32ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, Int32ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, Int32ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableInt64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableInt64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableInt64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableInt64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableInt64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableInt32ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region long
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static Int64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static Int64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static Int64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static Int64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));

        public static NullableInt64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));
        public static NullableInt64ExpressionMediator operator -(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Subtract)));
        public static NullableInt64ExpressionMediator operator *(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Multiply)));
        public static NullableInt64ExpressionMediator operator /(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Divide)));
        public static NullableInt64ExpressionMediator operator %(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new NullableInt64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Modulo)));
        #endregion

        #region string
        public static Int64ExpressionMediator operator +(Int64CoalesceFunctionExpression a, StringExpressionMediator b) => new Int64ExpressionMediator(new ExpressionContainer(new ArithmeticExpression(new ExpressionContainer(a), b.Expression, ArithmeticExpressionOperator.Add)));

        #endregion

        #endregion
        #endregion

        #region filter operators
        #region TValue
        #region long
        public static FilterExpression<long> operator ==(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<long> operator !=(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<long> operator <(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<long> operator <=(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long> operator >(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long> operator >=(Int64CoalesceFunctionExpression a, long b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<long> operator ==(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<long> operator !=(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<long> operator <(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<long> operator <=(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long> operator >(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long> operator >=(long a, Int64CoalesceFunctionExpression b) => new FilterExpression<long>(new ExpressionContainer(new LiteralExpression<long>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<long> operator ==(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.Equal);
        public static FilterExpression<long> operator !=(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.NotEqual);
        public static FilterExpression<long> operator <(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.LessThan);
        public static FilterExpression<long> operator <=(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long> operator >(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long> operator >=(Int64CoalesceFunctionExpression a, long? b) => new FilterExpression<long>(new ExpressionContainer(a), new ExpressionContainer(new LiteralExpression<long?>(b)), FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<long> operator ==(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.Equal);
        public static FilterExpression<long> operator !=(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.NotEqual);
        public static FilterExpression<long> operator <(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThan);
        public static FilterExpression<long> operator <=(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long> operator >(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long> operator >=(long? a, Int64CoalesceFunctionExpression b) => new FilterExpression<Int64>(new ExpressionContainer(new LiteralExpression<long?>(a)), new ExpressionContainer(b), FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion

        #region mediator
        public static FilterExpression<long> operator ==(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<long> operator !=(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<long> operator <(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<long> operator <=(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long> operator >(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long> operator >=(Int64CoalesceFunctionExpression a, Int64ExpressionMediator b) => new FilterExpression<long>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);

        public static FilterExpression<long?> operator ==(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.Equal);
        public static FilterExpression<long?> operator !=(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.NotEqual);
        public static FilterExpression<long?> operator <(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThan);
        public static FilterExpression<long?> operator <=(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.LessThanOrEqual);
        public static FilterExpression<long?> operator >(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThan);
        public static FilterExpression<long?> operator >=(Int64CoalesceFunctionExpression a, NullableInt64ExpressionMediator b) => new FilterExpression<long?>(new ExpressionContainer(a), b.Expression, FilterExpressionOperator.GreaterThanOrEqual);
        #endregion
        #endregion
    }
}
