# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  - master

trigger:
  - master
  - release/*

pool:
  vmImage: 'windows-2022'

name: $[ variables['branchName'] ]

variables:
  solution: 'DbEx.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  netCoreVersion: '6.0'
  system.debug: true
  stageLocationName: db-ex
  disable.coverage.autogenerate: 'true'
  # Azure Pipelines reports Build.SourceBranchName incorrectly if it has a forward slash in the name (release/foo -> foo).  Following expression creates a variable that adheres to the full and complete branch name.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

stages:
  - stage: Initialize
    displayName: 'Initialize Agent'
    jobs:
    - job: Install
      displayName: 'Install Agent Dependencies'
      steps:
      - checkout: none
      - task: NuGetToolInstaller@0
        displayName: Install NuGet
        inputs:
          versionSpec: 5.8.0
      - task: DockerInstaller@0
        displayName: Install Docker CLI
        inputs:
          dockerVersion: '17.09.0-ce'

  - stage: Build
    dependsOn: Initialize
    displayName: 'Build and Package'
    jobs:
    - job:
      displayName: 'Build Solution and Publish Assets'
      steps:
      - task: PowerShell@2
        displayName: 'Build and Package Solution'
        inputs:
          filePath: '$(Build.SourcesDirectory)/build.ps1'
          arguments: '-Configuration $(buildConfiguration) -BranchName $(branchName) -CommitSHA $(Build.SourceVersion) -BuildIdentifier $(Build.BuildNumber) -PropertiesPath $(Build.SourcesDirectory)/Directory.Build.props -UseBranchNameInPackageSuffixWhenNotSpecified'
          workingDirectory: $(Build.SourcesDirectory)
          pwsh: true
      - publish: $(Build.SourcesDirectory)
        displayName: 'Publish to Staging Location'
        artifact: $(stageLocationName)

  - stage: Test_Code
    dependsOn: Build
    displayName: 'Test MSSQL Core'
    jobs:
    - job:
      displayName: 'Test MSSQL'
      steps:
      - checkout: none
      - download: current
        artifact: $(stageLocationName)
      - task: DotNetCoreCLI@2
        displayName: 'Execute Tests'
        inputs:
          command: test
          projects: $(Pipeline.Workspace)/$(stageLocationName)/test/HatTrick.DbEx.MsSql.Test.Code/*.csproj
          arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=$(Pipeline.Workspace)/$(stageLocationName)/results/mssql-core.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[*Test]*"'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results'
        inputs:
          testResultsFormat: VSTest
          testResultsFiles: $(Pipeline.Workspace)/$(stageLocationName)/results/mssql-core.trx
          testRunTitle: 'MSSQL (Core)'
          mergeTestResults: true
          failTaskOnFailedTests: true
      - task: reportgenerator@5
        displayName: 'Generate Code Coverage Report'
        inputs:
          reports: $(Pipeline.Workspace)/$(stageLocationName)/test/HatTrick.DbEx.MsSql.Test.Code/**/coverage*.xml
          targetdir: $(Pipeline.Workspace)/$(stageLocationName)/results/coverage
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'          
#      - task: PublishCodeCoverageResults@1
#        displayName: 'Publish Code Coverage Results'
#        inputs:
#          codeCoverageTool: cobertura
#          summaryFileLocation: $(Pipeline.Workspace)/$(stageLocationName)/results/coverage/*obertura.xml #case sensitivity: C|c
#          # To make the task not regenerate the report, a pipeline environment variable was added: "disable.coverage.autogenerate: 'true'"
#          # see: https://github.com/danielpalme/ReportGenerator/wiki/Integration#attention
#          reportDirectory: $(Pipeline.Workspace)/$(stageLocationName)/results/coverage
      - publish: $(Pipeline.Workspace)/$(stageLocationName)/results/**
        displayName: 'Publish Results to Staging Location'
        artifact: mssql-core-results

  - stage: Test_Execution
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: Build
    displayName: 'Test MSSQL Platforms'
    jobs:
    - template: build/mssql/mssql-integration-testing-template.yml
      parameters:
        artifactName: $(stageLocationName)
        rootPath: $(Pipeline.Workspace)/$(stageLocationName)
        buildFilesTemplatePath: $(Pipeline.Workspace)/$(stageLocationName)/build/mssql
        buildConfiguration: $(buildConfiguration)
        targetFrameworkMoniker: net$(netCoreVersion)
        mssqlVersions: ['2017','2019']