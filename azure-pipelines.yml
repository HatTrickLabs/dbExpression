# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  - master

trigger:
  - master
  - release/*

pool:
  vmImage: 'windows-latest'

name: $[ variables['branchName'] ]

variables:
  solution: 'DbEx.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  system.debug: true
  stageLocationName: db-ex
  disable.coverage.autogenerate: 'true'
  # Azure Pipelines reports Build.SourceBranchName incorrectly if it has a forward slash in the name (release/foo -> foo).  Following expression creates a variable that adheres to the full and complete branch name.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]
    
parameters:
  - name: unitTestMatrix
    type: object
    default:
      # tfm, docker tag, pipeline name
      - [ 'net48', '4.8.1', 'net48' ]
      - [ 'net7.0', '7.0', 'net7' ]
  - name: integrationTestMatrix
    type: object
    default:
      # tfm, docker tag, pipeline name
      - [ 'net7.0', '7.0', 'net7' ]
  - name: mssqlVersions
    type: object
    default:
      # version, docker tag, pipeline name
      - [ '2017', '2017-latest', 'MSSQL2017' ]
      - [ '2019', '2019-latest', 'MSSQL2019' ]
      - [ '2022', '2022-latest', 'MSSQL2022' ]

stages:

  - stage: Build_Package_Unit_Test
    displayName: 'Build, Package, Unit Test'
    jobs:
    - job: Build
      displayName: 'Build and Package'
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 7 SDK'
        inputs:
         packageType: 'sdk'
         version: '7.0.x'
      - task: PowerShell@2
        displayName: 'Build and Package Solution'
        inputs:
          filePath: '$(Build.SourcesDirectory)/build.ps1'
          arguments: '-Configuration $(buildConfiguration) -BranchName $(branchName) -CommitSHA $(Build.SourceVersion) -BuildIdentifier $(Build.BuildNumber) -PropertiesPath $(Build.SourcesDirectory)/Directory.Build.props -UseBranchNameInPackageSuffixWhenNotSpecified'
          workingDirectory: $(Build.SourcesDirectory)
          pwsh: true
    - job:
      dependsOn: Build
      displayName: 'Execute Unit Tests'
      steps:
      - ${{ each netVersion in parameters.unitTestMatrix }}:
        - task: DotNetCoreCLI@2
          displayName: 'Execute Unit Tests - ${{ netVersion[0] }}'
          inputs:
            command: test
            projects: $(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Unit/HatTrick.DbEx.MsSql.Test.Unit.csproj
            arguments: '--configuration $(buildConfiguration) --framework ${{ netVersion[0] }} --logger "trx;LogFileName=mssql.unit.tests.${{ netVersion[0] }}.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[HatTrick.DbEx.*Sql*]*" /p:Exclude="[*Test]*"'
            publishTestResults: true
            testRunTitle: 'MSSQL Unit Tests - ${{ netVersion[0] }}'
        - publish: $(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Unit/coverage.${{ netVersion[0] }}.cobertura.xml
          displayName: 'Stage Code Coverage Results - ${{ netVersion[0] }}'
          artifact: mssql-unit-tests-${{ netVersion[0] }}-results
      - publish: $(Build.SourcesDirectory)
        displayName: 'Publish Build Artifacts'
        artifact: $(stageLocationName)
          
  - stage: Test_MsSql_Integration
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: Build_Package_Unit_Test
    displayName: 'Test MSSQL Platforms'
    jobs:
    - ${{ each netVersion in parameters.integrationTestMatrix }}:
      - ${{ each mssqlVersion in parameters.mssqlVersions }}:
        - job: Test_${{ mssqlVersion[2] }}_${{ netVersion[2] }}
          displayName: '${{ mssqlVersion[2] }} - ${{ netVersion[2] }}'
          steps:
          - template: build/mssql/mssql-integration-testing-template.yml
            parameters:
              artifactName: $(stageLocationName)
              rootPath: $(Pipeline.Workspace)/$(stageLocationName)
              buildTemplatesPath: $(Pipeline.Workspace)/$(stageLocationName)/build/mssql
              buildConfiguration: $(buildConfiguration)
              targetFrameworkMoniker: ${{ netVersion[0] }}
              netDockerTag: ${{ netVersion[1] }}
              mssqlDockerTag: ${{ mssqlVersion[1] }}
              mssqlVersion: ${{ mssqlVersion[0]  }}
    
  - stage: Publish_Reports
    dependsOn:
      - Build_Package_Unit_Test
      - Test_MsSql_Integration
    displayName: 'Publish Reports'
    jobs:
    - job:
      displayName: 'Publish Code Coverage'
      steps:
      - checkout: none
      - download: current
      - ${{ each netVersion in parameters.unitTestMatrix }}:
        - task: PowerShell@2
          displayName: ''Fix Unit Test Coverage Report - ${{ netVersion[0] }}'
          inputs:
            filePath: $(Pipeline.Workspace)/$(stageLocationName)/build/fix-code-coverage-file.ps1
            arguments: '-CodeCoverageFilePath "$(Pipeline.Workspace)\mssql-unit-tests-${{ netVersion[0] }}-results\coverage.${{ netVersion[0] }}.cobertura.xml" -PathToSourceFiles "$(Pipeline.Workspace)\$(stageLocationName)\src\"'
            workingDirectory: $(Pipeline.Workspace)/$(stageLocationName)\build
            pwsh: true
      - ${{ each netVersion in parameters.integrationTestMatrix }}:
        - ${{ each mssqlVersion in parameters.mssqlVersions }}:
          - task: PowerShell@2
            displayName: 'Fix Integration Test Coverage Report - ${{ mssqlVersion[2] }} - ${{ netVersion[0] }}'
            inputs:
              filePath: $(Pipeline.Workspace)/$(stageLocationName)/build/fix-code-coverage-file.ps1
              arguments: '-CodeCoverageFilePath "$(Pipeline.Workspace)\mssql-${{ mssqlVersion[0] }}-integration-tests-${{ netVersion[0] }}-results\coverage.${{ netVersion[0] }}.cobertura.xml" -PathToSourceFiles "$(Pipeline.Workspace)\$(stageLocationName)\src\"'
              workingDirectory: $(Pipeline.Workspace)/$(stageLocationName)\build
              pwsh: true
      - task: reportgenerator@5
        displayName: 'Merge Code Coverage Reports'
        inputs:
          reports: $(Pipeline.Workspace)/mssql*/*coverage*.xml
          targetdir: $(Pipeline.Workspace)/mssql-merged-results
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage Reports'
        inputs:
          codeCoverageTool: Cobertura
          pathToSources: $(Pipeline.Workspace)/$(stageLocationName)/src
          summaryFileLocation: $(Pipeline.Workspace)/mssql-merged-results/cobertura.xml
          reportDirectory: '$(Pipeline.Workspace)/mssql-merged-results'