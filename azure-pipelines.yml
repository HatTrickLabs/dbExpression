# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  - master

trigger:
  - master
  - release/*

pool:
  vmImage: 'windows-latest'

name: $[ variables['branchName'] ]

variables:
  solution: 'DbEx.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  netCoreVersion: '6.0'
  system.debug: true
  stageLocationName: db-ex
  disable.coverage.autogenerate: 'true'
  # Azure Pipelines reports Build.SourceBranchName incorrectly if it has a forward slash in the name (release/foo -> foo).  Following expression creates a variable that adheres to the full and complete branch name.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

stages:

  - stage: Build_and_Test
    displayName: 'Build, Test and Package'
    jobs:
    - job:
      displayName: 'Build, Test, and Publish'
      steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 6.0 SDK'
        inputs:
          packageType: sdk
          version: '6.0.400'
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: UseDotNet@2
        displayName: 'Install .NET 7.0 SDK'
        inputs:
          packageType: sdk
          version: $(net7PreviewVersion)
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: PowerShell@2
        displayName: 'Build and Package Solution'
        inputs:
          filePath: '$(Build.SourcesDirectory)/build.ps1'
          arguments: '-Configuration $(buildConfiguration) -BranchName $(branchName) -CommitSHA $(Build.SourceVersion) -BuildIdentifier $(Build.BuildNumber) -PropertiesPath $(Build.SourcesDirectory)/Directory.Build.props -UseBranchNameInPackageSuffixWhenNotSpecified'
          workingDirectory: $(Build.SourcesDirectory)
          pwsh: true
      - task: DotNetCoreCLI@2
        displayName: 'Execute Unit Tests'
        inputs:
          command: test
          projects: $(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Unit/HatTrick.DbEx.MsSql.Test.Unit.csproj
          arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=mssql-core.tests.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Include="[HatTrick.DbEx.*Sql*]*" /p:Exclude="[*Test]*"'
      - task: PublishTestResults@2
        displayName: 'Publish Test Results to Temp'
        inputs:
          testResultsFormat: xUnit
          testResultsFiles: $(Build.SourcesDirectory)/TestResults/mssql-core.tests.trx
          testRunTitle: 'MSSQL (Core)'
          mergeTestResults: true
          failTaskOnFailedTests: true
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Code Coverage Files to Staging Location'
        inputs:
          targetPath: $(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Unit
          artifactName: mssql-core-results
      - publish: $(Build.SourcesDirectory)
        displayName: 'Publish to Staging Location'
        artifact: $(stageLocationName)      
 
  - stage: Test_MsSql_Integration
    pool:
      vmImage: 'ubuntu-latest'
    dependsOn: Build_and_Test
    displayName: 'Test MSSQL Platforms'
    jobs:
    - template: build/mssql/mssql-integration-testing-template.yml
      parameters:
        artifact: $(stageLocationName)
        rootPath: $(Pipeline.Workspace)/$(stageLocationName)
        buildTemplatesPath: $(Pipeline.Workspace)/$(stageLocationName)/build/mssql
        buildConfiguration: $(buildConfiguration)
        targetFrameworkMoniker: net$(netCoreVersion)
        mssqlVersions: ['2017','2019','2022']    
    
  - stage: Publish_Reports
    dependsOn:
      - Build_and_Test
      - Test_MsSql_Integration
    displayName: 'Publish Reports'
    jobs:
    - job:
      displayName: 'Publish Code Coverage'
      steps:
      - checkout: none
      - download: current
      - task: PowerShell@2
        displayName: 'Correct Source Paths in Coverage Files'
        inputs:
          filePath: $(Pipeline.Workspace)/$(stageLocationName)/build/fix-code-coverage-files.ps1
          arguments: '-CodeCoverageFilePaths "$(Pipeline.Workspace)\mssql-core-results\coverage.net6.0.cobertura.xml;$(Pipeline.Workspace)\mssql-2017-results\coverage.net6.0.cobertura.xml;$(Pipeline.Workspace)\mssql-2019-results\coverage.net6.0.cobertura.xml;$(Pipeline.Workspace)\mssql-2022-results\coverage.net6.0.cobertura.xml" -PathToSourceFiles "$(Pipeline.Workspace)\$(stageLocationName)\src\"'
          workingDirectory: $(Pipeline.Workspace)/$(stageLocationName)\build
          pwsh: true
      - task: reportgenerator@5
        displayName: 'Merge Code Coverage Reports'
        inputs:
          reports: $(Pipeline.Workspace)/mssql*/*coverage*.xml
          targetdir: $(Pipeline.Workspace)/mssql-merged-results
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish Code Coverage Reports'
        inputs:
          codeCoverageTool: Cobertura
          pathToSources: $(Pipeline.Workspace)/$(stageLocationName)/src
          summaryFileLocation: $(Pipeline.Workspace)/mssql-merged-results/cobertura.xml
          reportDirectory: '$(Pipeline.Workspace)/mssql-merged-results'