# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  - master

trigger:
  - master
  - release/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: 'DbEx.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  netCoreVersion: '3.1'
  system.debug: true
  stageLocationName: db-ex
  disable.coverage.autogenerate: 'true'

jobs:
  - job: Initialize
    displayName: 'Initialize Agent'
    steps:
    
    - checkout: none

    - task: NuGetToolInstaller@0
      displayName: Install NuGet
    
    - task: DockerInstaller@0
      displayName: Install Docker CLI
      inputs:
        dockerVersion: '17.09.0-ce'

  - job: Build
    dependsOn: Initialize
    displayName: 'Build and Package Solution'
    steps:

    - task: PowerShell@2
      displayName: 'Build and Package Solution'
      inputs:
        filePath: '$(Build.SourcesDirectory)/build.ps1'
        arguments: '-Configuration $(buildConfiguration) -BranchName $(Build.SourceBranchName) -CommitSHA $(Build.SourceVersion) -BuildIdentifier $(Build.BuildNumber)'
        workingDirectory: $(Build.SourcesDirectory)
        pwsh: true

    - publish: $(Build.SourcesDirectory)
      displayName: 'Publish to Staging Location'
      artifact: $(stageLocationName)

    - task: DotNetCoreCLI@2
      displayName: 'Execute Tests'
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Code/*.csproj'
        arguments: '--configuration $(buildConfiguration) --logger "trx;LogFileName=$(Build.SourcesDirectory)/results/mssql-core.trx" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:Exclude="[*Test]*"'

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: $(Build.SourcesDirectory)/results/mssql-core.trx
        testRunTitle: 'MSSQL (Core)'
        mergeTestResults: true
        failTaskOnFailedTests: true

    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: 'Generate Code Coverage Report'
      inputs:
        reports: $(Build.SourcesDirectory)/test/HatTrick.DbEx.MsSql.Test.Code/**/coverage.cobertura.xml
        targetdir: $(Build.SourcesDirectory)/results/coverage
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'

    - publish: $(Build.SourcesDirectory)/results/mssql-core.trx
      displayName: 'Publish Results to Staging Location'
      artifact: mssql-core-results

  - job: Test_MSSQL_2017
    dependsOn: Build
    displayName: 'Test MSSQL 2017'
    steps:

    - checkout: none
    - download: current
      artifact: $(stageLocationName)

    - template: ${{variables['System.DefaultWorkingDirectory']}}/build/mssql/azure-pipelines-test-template.yml
      parameters:
        version: 2017
        workingFolder: $(Pipeline.Workspace)/$(stageLocationName)
        testOutputFilePath: /results
        testOutputFileName: mssql-2017.trx
        codeCoverageOutputFilePath: /results
        codeCoverageOutputFileName: mssql-2017.cobertura.xml

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: $(Pipeline.Workspace)/$(stageLocationName)/results/mssql-2017.trx
        testRunTitle: 'MSSQL 2017'
        mergeTestResults: true
        failTaskOnFailedTests: true

    - publish: $(Pipeline.Workspace)/$(stageLocationName)/results/mssql-2017.trx 
      displayName: 'Publish Results to Staging Location'
      artifact: mssql-2017-results

  - job: Test_MSSQL_2019
    dependsOn: Build
    displayName: 'Test MSSQL 2019'
    steps:

    - checkout: none
    - download: current
      artifact: $(stageLocationName)

    - template: ${{variables['System.DefaultWorkingDirectory']}}/build/mssql/azure-pipelines-test-template.yml
      parameters:
        version: 2019
        workingFolder: $(Pipeline.Workspace)/$(stageLocationName)
        testOutputFilePath: /results
        testOutputFileName: mssql-2019.trx
        codeCoverageOutputFilePath: /results
        codeCoverageOutputFileName: mssql-2019.cobertura.xml

    - task: PublishTestResults@2
      displayName: Publish Test Results
      inputs:
        testResultsFormat: VSTest
        testResultsFiles: $(Pipeline.Workspace)/$(stageLocationName)/results/mssql-2019.trx
        testRunTitle: 'MSSQL 2019'
        mergeTestResults: true
        failTaskOnFailedTests: true

    - publish: $(Pipeline.Workspace)/$(stageLocationName)/results/mssql-2019.trx 
      displayName: 'Publish Results to Staging Location'
      artifact: mssql-2019-results