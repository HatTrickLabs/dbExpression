<#+
public void WriteTableDBEntities(SqlModel model, string namespaceRoot)
{
#>
using System;
using System.Collections.Generic;
using HTL.DbEx.Utility;
using HTL.DbEx.Sql.Expression;

<#+  
foreach (string schema in TemplateSvc.GetDistinctSchemas(model.Entities))
{
#>
namespace <#= namespaceRoot #>.<#= model.Name #>.<#= (TemplateSvc.TargetDb == "mssql") ? schema : "db" #>.DataService
{
	using Data;

	public static partial class <#= (TemplateSvc.TargetDb == "mssql") ? schema : "db" #>
	{
<#+
	foreach(SqlEntity table in model.Entities.FindAll(e => e.Schema == schema))
	{
		if (table.IsIgnored || table.SqlEntityType != EntityType.Table) { continue; }
#>
		#region <#= TemplateSvc.InsertSpaceOnCapitalization(table.Name).ToLower() #>
		public partial class <#= table.Name #>Entity : DBExpressionEntity
		{
			#region internals
<#+ foreach(SqlField field in table.Fields)
	{
		if (field.IsIgnored) { continue; }
#>
			private DBExpressionField<<#= field.AssemblyTypeShorthandText #>> _<#= TemplateSvc.ToCamelCase(field.Name) #>;
<#+
	}
#>
			#endregion

			#region interface properties
<#+ foreach(SqlField field in table.Fields)
	{
		if (field.IsIgnored) { continue; }
#>
			public DBExpressionField<<#= field.AssemblyTypeShorthandText #>> <#= field.Name #> { get { return _<#= TemplateSvc.ToCamelCase(field.Name) #>; } }
<#+
	}
#>
			#endregion

			#region constructors
			public <#= table.Name #>Entity(string schema, string entityName) : base(schema, entityName)
			{
<#+ foreach(SqlField field in table.Fields)
{
	if (field.IsIgnored) { continue; }
#>
				_<#= TemplateSvc.ToCamelCase(field.Name) #> = new DBExpressionField<<#= field.AssemblyTypeShorthandText #>>(this, "<#= field.Name #>", <#= field.MaxLength #>);
<#+
}
#>
			}
			#endregion

			#region methods
			public new <#= table.Name #>Entity Correlate(string alias)
            {
                return new <#= table.Name #>Entity(base.Schema, base.Name) { IsCorrelated = true, AliasName = alias };
            }

			public new <#= table.Name #>Entity As(string alias)
            {
                return new <#= table.Name #>Entity(base.Schema, base.Name) { IsAliased = true, AliasName = alias };
            }

			public <#= table.Name #> Clone(<#= table.Name #> <#= TemplateSvc.ToCamelCase(table.Name) #>)
			{
				return CloneUtility.DeepCopy<<#= table.Name #>>(<#= TemplateSvc.ToCamelCase(table.Name) #>);
			}

			public SqlExpressionBuilder<<#= table.Name #>> Query()
			{
				return <#= (TemplateSvc.TargetDb == "mssql") ? table.Schema : "db" #>.GetExpressionBuilder<<#= table.Name #>>(this)
					.WithSelectExpressionProvider(this.GetInclusiveSelectExpression)
					.WithFillCallback(this.FillObject)
					.WithInsertExpressionProvider(this.GetInclusiveInsertExpression);
			}

			public DBSelectExpressionSet GetInclusiveSelectExpression()
			{
				DBSelectExpressionSet select = null;
<#+ foreach(SqlField column in table.Fields)
	{
		if (column.IsIgnored) { continue; }
#>
           		select &= _<#= TemplateSvc.ToCamelCase(column.Name) #>;
<#+
	}
#>
				return select;
			}

			public DBInsertExpressionSet GetInclusiveInsertExpression(<#= table.Name #> <#= TemplateSvc.ToCamelCase(table.Name) #>)
			{
				List<string> msg;
				if (!this.IsPersistSafe(<#= TemplateSvc.ToCamelCase(table.Name) #>, out msg))
				{
					throw new InvalidOperationException(string.Format("Object is not persist safe: {0}", string.Join("; ", msg)));
				}

				DBInsertExpressionSet expr = null;
<#+ foreach(SqlField column in table.Fields)
	{
		if (column.IsIgnored || column.IsIdentity) { continue; }
#>
				expr &= _<#= TemplateSvc.ToCamelCase(column.Name) #>.Insert(<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #>);
<#+
	}
#>
				return expr;
			}

			public DBAssignmentExpressionSet GetAssignmentExpression(<#= table.Name #> from, <#= table.Name #> to)
			{
				DBAssignmentExpressionSet expr = null;
<#+ foreach(SqlField column in table.Fields)
	{
		if (column.IsIgnored || column.Name == "DateCreated" || column.Name == "DateUpdated" || column.IsIdentity || column.IsPrimaryKey) { continue; }
#>
				if (from.<#= column.Name #> != to.<#= column.Name #>) { expr &= _<#= TemplateSvc.ToCamelCase(column.Name) #>.Set(to.<#= column.Name #>); }
<#+
	}
#>
<#+ if (table.Fields.Find(f => f.Name == "DateUpdated") != null)
	{
#>
				expr &= _dateUpdated.Set(DateTime.UtcNow);
<#+
	}
#>
				return expr;
			}
		
			public void FillObject(<#= table.Name #> <#= TemplateSvc.ToCamelCase(table.Name) #>, object[] values)
			{
				//if the column allows null, do the dbnull check, else just cast in..???
<#+ for (int i = 0; i < table.Fields.Count; i++)
	{
		if (table.Fields[i].IsIgnored) { continue; }
#>
<#+ if (!table.Fields[i].IsRequired)
	{
			if (!table.Fields[i].AssemblyTypeShorthandText.StartsWith("DateTime"))
			{
#>
				<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= table.Fields[i].Name #> = (values[<#= i.ToString() #>] != DBNull.Value) ? (<#= table.Fields[i].AssemblyTypeShorthandText.TrimEnd(new char[] { '?' }) #>)values[<#= i.ToString() #>] : default(<#= table.Fields[i].AssemblyTypeShorthandText #>);
<#+
			}
			else
			{
#>
				<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= table.Fields[i].Name #> = (values[<#= i.ToString() #>] != DBNull.Value) ? DateTime.SpecifyKind((<#= table.Fields[i].AssemblyTypeShorthandText.TrimEnd(new char[] { '?' }) #>)values[<#= i.ToString() #>], DateTimeKind.Utc) : default(<#= table.Fields[i].AssemblyTypeShorthandText #>);
<#+
			}
	} 
	else
	{
			if (!table.Fields[i].AssemblyTypeShorthandText.StartsWith("DateTime"))
			{
#>
				<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= table.Fields[i].Name #> = (<#= table.Fields[i].AssemblyTypeShorthandText #>)values[<#= i.ToString() #>];
<#+
			}
			else
			{
#>
				<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= table.Fields[i].Name #> = DateTime.SpecifyKind((<#= table.Fields[i].AssemblyTypeShorthandText #>)values[<#= i.ToString() #>], DateTimeKind.Utc);
<#+
			}
	}
#>
<#+
	}
#>
			}

			protected bool IsPersistSafe(<#= table.Name #> <#= TemplateSvc.ToCamelCase(table.Name) #>, out List<string> validationMessages)
			{
				validationMessages = new List<string>();
<#+
	foreach (SqlField column in table.Fields)
	{
#>
<#+ if (column.IsIdentity || column.IsIgnored) { continue; } #>
<#+ if (column.IsRequired && (column.AssemblyTypeShorthandText == "string" || column.AssemblyTypeShorthandText == "byte[]" || column.AssemblyTypeShorthandText == "object")) { #>
				if (<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #> == null) { validationMessages.Add("<#= TemplateSvc.InsertSpaceOnCapitalization(column.Name) #> cannot be empty."); }
<#+ } #>
<#+ if (column.AssemblyTypeShorthandText == "string" && column.MaxLength != -1) { //-1 is Max #>
				if (<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #> != null && <#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #>.Length > <#= column.MaxLength.ToString() #>) { validationMessages.Add("<#= TemplateSvc.InsertSpaceOnCapitalization(column.Name) #> cannot be longer than <#= column.MaxLength.ToString() #> characters."); }
<#+ } #>
<#+ if (column.AssemblyTypeShorthandText == "byte[]" && column.MaxLength != -1/* && !column.IsRequired*/) { //-1 is Max #>
				if (<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #> == null && <#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #>.Length > <#= column.MaxLength.ToString() #>) { validationMessages.Add("<#= TemplateSvc.InsertSpaceOnCapitalization(column.Name) #> cannot be larger than <#= column.MaxLength.ToString() #> bytes."); }
<#+ } #>
<#+ if (column.AssemblyTypeShorthandText.StartsWith("DateTime")) { #>
				if (<#= TemplateSvc.ToCamelCase(table.Name) #>.<#= column.Name #> == default(DateTime)) { validationMessages.Add("<#= TemplateSvc.InsertSpaceOnCapitalization(column.Name) #> must contain a value."); }
<#+ } #>
<#+
		}
#>
				return validationMessages.Count == 0;
			}
			#endregion
		}
		#endregion
<#+
	}
#>
	}
}
<#+
}
#>
<#+
}
#>