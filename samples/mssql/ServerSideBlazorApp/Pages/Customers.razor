@page "/customers"
@inject GlobalProgressBar ProgressBar
@inject CustomerService service

<h3>PeopleList</h3>

<div>
    <GridLoading RecordCount="@(CurrentPage?.TotalCount)"></GridLoading>
    @if (CurrentPage != null && CurrentPage.Page.Any())
    {
        <MatCard>
            <MatCardContent>
                <MatBody1 Style="padding:4px">
                    <MatTextField @bind-Value="@SearchPhrase" Label="Search by Name"></MatTextField>
                    <MatButton OnClick="@(e => OnPage(0))" Class="ml-2">
                        <MatIcon Icon="filter_list"></MatIcon>Apply
                    </MatButton>
                </MatBody1>
                <MatBody1>
                    <MatTable Items="@CurrentPage.Page" PageSize="@PageSize" ShowPaging="false" Striped="true" Style="display:inline-table" Class="mat-elevation-z5 align-items-center">
                        <MatTableHeader>
                            <th>Name</th>
                            <th>Lifetime Value</th>
                        </MatTableHeader>
                        <MatTableRow @onclick="@{SelectedId = @context.Id}">
                            <td><a href="/customers/@context.Id">@context.Name</a></td>
                            <td>@context.LifetimeValue</td>
                        </MatTableRow>
                    </MatTable>
                    <MatPaginator Length="@(CurrentPage?.TotalCount ?? 0)" PageSize="@PageSize" PageIndexChanged="@OnPage" Page="@OnPage"></MatPaginator>
                </MatBody1>
            </MatCardContent>
        </MatCard>
    }
</div>


@code {
    private int PageIndex { get; set; } = 0;
    private int PageSize { get; set; } = 5;
    private string SearchPhrase { get; set; }
    private PageResponseModel<CustomerSummaryModel> CurrentPage { get; set; }

    protected override async Task OnInitializedAsync() => await FetchCurrentPage();

    private async Task FetchCurrentPage()
    {
        await ProgressBar.Show();
        var model = new PageRequestModel { Limit = PageSize, Offset = PageIndex * PageSize, SearchPhrase = SearchPhrase };

        try
        {
            CurrentPage = await service.GetSummaryPageAsync(model);
        }
        catch (Exception e)
        {

        }
        finally
        {
            await ProgressBar.Hide();
        }

        StateHasChanged();
    }

    private async Task OnPage(MatPaginatorPageEvent e)
    {
        PageSize = e.PageSize;
        PageIndex = e.PageIndex;
        await FetchCurrentPage();
        StateHasChanged();
    }

    private async Task OnPage(int index)
    {
        PageIndex = index;
        await FetchCurrentPage();
        StateHasChanged();
    }
}
