//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using DbExpression.MsSql;
using DbExpression.MsSql.Builder;
using DbExpression.MsSql.Builder.v2019;
using DbExpression.Sql;
#if !NET7_0_OR_GREATER
using DbExpression.Sql.Attribute;
#endif
using DbExpression.Sql.Builder;
using DbExpression.Sql.Connection;
using DbExpression.Sql.Executor;
using DbExpression.Sql.Expression;
using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Dynamic;
using System.Linq;
#nullable enable
#pragma warning disable IDE1006 // Naming Styles
#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
#pragma warning disable CA1034 // Nested types should not be visible
namespace Profiling.MsSql.DataService
{
	using Profiling.MsSql.dboDataService;
	using Profiling.MsSql.secDataService;
	using _dboDataService = Profiling.MsSql.dboDataService;
	using _secDataService = Profiling.MsSql.secDataService;

    #region db
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters

    public static class db
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters

    {
        #region internals
        private static ProfilingDatabase? _profilingdatabase;
        #endregion

        #region interface
        public static MsSqlFunctionExpressionBuilder fx => GetProfilingDatabase().fx;
        public static ProfilingDatabase.ProfilingDatabaseStoredProcedures sp => GetProfilingDatabase().sp;
        #endregion

        #region methods
        internal static void UseDatabase(ProfilingDatabase profilingdatabase)
            => _profilingdatabase = profilingdatabase ?? throw new ArgumentNullException(nameof(profilingdatabase));
        
        internal static void DiscardDatabase()
            => _profilingdatabase = null;

        private static ProfilingDatabase GetProfilingDatabase()
            =>  _profilingdatabase ?? DbExpressionConfigurationException.ThrowServiceResolutionWithReturn<ProfilingDatabase>();        
        
        #region select one
        /// <summary>
        /// Start constructing a sql SELECT query expression for a single entity.
        /// <para>
        /// To retrieve a <see cref="Profiling.MsSql.dboData.AccessAuditLog" />, use a type param of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />
        /// </para>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntity{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public static SelectEntity<ProfilingDatabase, TEntity> SelectOne<TEntity>()
            where TEntity : class, IDbEntity, new()
            => GetProfilingDatabase().SelectOne<TEntity>();

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />
        ///, for example "dbo.Person.GenderType"
        /// </param>
        /// <returns><see cref="Sql.SelectValue{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public static SelectValue<ProfilingDatabase, TEnum> SelectOne<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => GetProfilingDatabase().SelectOne<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/>? value.  
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />?
        ///, for example "dbo.Address.AddressType"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public static SelectValue<ProfilingDatabase, TEnum?> SelectOne<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => GetProfilingDatabase().SelectOne<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, object}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, object?> SelectOne(ObjectElement element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/>? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, object}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, object?> SelectOne(NullableObjectElement element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{T}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public static SelectObject<ProfilingDatabase, T> SelectOne<T>(ObjectElement<T> element)
            where T : class?
            => GetProfilingDatabase().SelectOne<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AliasedElement{T}" />      
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the value to select.</typeparam>
        public static SelectValue<ProfilingDatabase, T> SelectOne<T>(AliasedElement<T> element)
            => GetProfilingDatabase().SelectOne<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Boolean}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, bool> SelectOne(AnyElement<bool> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Boolean}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, bool?> SelectOne(AnyElement<bool?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Byte}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, byte> SelectOne(AnyElement<byte> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Byte}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, byte?> SelectOne(AnyElement<byte?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />[] value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Byte[]}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, byte[]> SelectOne(ByteArrayElement element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />[]? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Byte[]}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, byte[]?> SelectOne(NullableByteArrayElement element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />
        ///, for example "dbo.AccessAuditLog.DateCreated", "db.fx.DateAdd(DateParts.Year, 1, dbo.AccessAuditLog.DateCreated) or "db.fx.IsNull(dbo.AccessAuditLog.DateCreated, DateTime.Now)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, DateTime}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, DateTime> SelectOne(AnyElement<DateTime> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />?
        ///, for example "dbo.Person.BirthDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.BirthDate)
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, DateTime}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, DateTime?> SelectOne(AnyElement<DateTime?> field)
            => GetProfilingDatabase().SelectOne(field);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />
        ///, for example "dbo.Person.RegistrationDate", "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.RegistrationDate)" or "db.fx.IsNull(dbo.Person.RegistrationDate, DateTimeOffset.Now)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, DateTimeOffset}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, DateTimeOffset> SelectOne(AnyElement<DateTimeOffset> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />?
        ///, for example "dbo.Person.LastLoginDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.LastLoginDate)" 
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, DateTimeOffset}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, DateTimeOffset?> SelectOne(AnyElement<DateTimeOffset?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />
        ///, for example "dbo.Product.ShippingWeight" or "db.fx.IsNull(dbo.Product.ShippingWeight, decimal.MinValue)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Decimal}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, decimal> SelectOne(AnyElement<decimal> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />?
        ///, for example "dbo.Product.Height" or "db.fx.Min(dbo.Product.Height)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Decimal}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, decimal?> SelectOne(AnyElement<decimal?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />
        ///, for example "dbo.Product.ListPrice" or "db.fx.IsNull(dbo.Product.ListPrice, double.MinValue)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Double}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, double> SelectOne(AnyElement<double> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />?
        ///, for example "dbo.PersonTotalPurchasesView.TotalAmount" or "db.fx.Min(dbo.PersonTotalPurchasesView.TotalAmount)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Double}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, double?> SelectOne(AnyElement<double?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Guid}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, Guid> SelectOne(AnyElement<Guid> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />?
        ///, for example "dbo.Purchase.TrackingIdentifier"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Guid}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, Guid?> SelectOne(AnyElement<Guid?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int16}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, short> SelectOne(AnyElement<short> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int16}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, short?> SelectOne(AnyElement<short?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.AccessAuditLog.Id" or "db.fx.Avg(dbo.AccessAuditLog.Id)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int32}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, int> SelectOne(AnyElement<int> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.Person.CreditLimit" or "db.fx.Avg(dbo.Person.CreditLimit)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int32}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, int?> SelectOne(AnyElement<int?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int64}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, long> SelectOne(AnyElement<long> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Int64}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, long?> SelectOne(AnyElement<long?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Single}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, float> SelectOne(AnyElement<float> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />?
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, Single}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, float?> SelectOne(AnyElement<float?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, String}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, string> SelectOne(StringElement element) 
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, string?> SelectOne(NullableStringElement element) 
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TimeSpan}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, TimeSpan> SelectOne(AnyElement<TimeSpan> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />?
        ///, for example "dbo.Product.ValidStartTimeOfDayForPurchase"
        ///</param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TimeSpan}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValue<ProfilingDatabase, TimeSpan?> SelectOne(AnyElement<TimeSpan?> element)
            => GetProfilingDatabase().SelectOne(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamic{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamic<ProfilingDatabase> SelectOne(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => GetProfilingDatabase().SelectOne(element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamic{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamic<ProfilingDatabase> SelectOne(IEnumerable<AnyElement> elements)
            => GetProfilingDatabase().SelectOne(elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamic<ProfilingDatabase> SelectOne(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => GetProfilingDatabase().SelectOne((elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region select many
        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of entities.
        /// <para>
        /// To retrieve a list of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />(s), use a type param of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />
        /// </para>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public static SelectEntities<ProfilingDatabase, TEntity> SelectMany<TEntity>()
           where TEntity : class, IDbEntity, new()
           => GetProfilingDatabase().SelectMany<TEntity>();

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />
        ///, for example "dbo.Person.GenderType"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        public static SelectValues<ProfilingDatabase, TEnum> SelectMany<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => GetProfilingDatabase().SelectMany<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/>? values.
        /// </summary>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />?
        ///, for example "dbo.Address.AddressType"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, TEnum?> SelectMany<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => GetProfilingDatabase().SelectMany<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, object}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, object>? SelectMany(ObjectElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/>? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, object}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, object?> SelectMany(NullableObjectElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{T}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public static SelectObjects<ProfilingDatabase, T> SelectMany<T>(ObjectElement<T> element)
            where T : class?
            => GetProfilingDatabase().SelectMany<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AliasedElement{T}" />      
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the value to select.</typeparam>
        public static SelectValues<ProfilingDatabase, T> SelectMany<T>(AliasedElement<T> element)
            => GetProfilingDatabase().SelectMany<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Boolean}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, bool> SelectMany(AnyElement<bool> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Boolean}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, bool?> SelectMany(AnyElement<bool?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Byte}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, byte> SelectMany(AnyElement<byte> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Byte}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, byte?> SelectMany(AnyElement<byte?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />[] values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Byte[]}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, byte[]> SelectMany(ByteArrayElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />[]? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Byte[]}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, byte[]?> SelectMany(NullableByteArrayElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />
        ///, for example "dbo.AccessAuditLog.DateCreated", "db.fx.DateAdd(DateParts.Year, 1, dbo.AccessAuditLog.DateCreated) or "db.fx.IsNull(dbo.AccessAuditLog.DateCreated, DateTime.Now)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, DateTime}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, DateTime> SelectMany(AnyElement<DateTime> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />?
        ///, for example "dbo.Person.BirthDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.BirthDate)
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, DateTime}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, DateTime?> SelectMany(AnyElement<DateTime?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />
        ///, for example "dbo.Person.RegistrationDate", "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.RegistrationDate)" or "db.fx.IsNull(dbo.Person.RegistrationDate, DateTimeOffset.Now)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, DateTimeOffset}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, DateTimeOffset> SelectMany(AnyElement<DateTimeOffset> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />?
        ///, for example "dbo.Person.LastLoginDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.LastLoginDate)" 
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, DateTimeOffset}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, DateTimeOffset?> SelectMany(AnyElement<DateTimeOffset?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />
        ///, for example "dbo.Product.ShippingWeight" or "db.fx.IsNull(dbo.Product.ShippingWeight, decimal.MinValue)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Decimal}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, decimal> SelectMany(AnyElement<decimal> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />?
        ///, for example "dbo.Product.Height"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Decimal}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, decimal?> SelectMany(AnyElement<decimal?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />
        ///, for example "dbo.Product.ListPrice" or "db.fx.IsNull(dbo.Product.ListPrice, double.MinValue)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Double}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, double> SelectMany(AnyElement<double> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />?
        ///, for example "dbo.PersonTotalPurchasesView.TotalAmount"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Double}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, double?> SelectMany(AnyElement<double?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Guid}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, Guid> SelectMany(AnyElement<Guid> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />?
        ///, for example "dbo.Purchase.TrackingIdentifier"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Guid}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, Guid?> SelectMany(AnyElement<Guid?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int16}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, short> SelectMany(AnyElement<short> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int16}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, short?> SelectMany(AnyElement<short?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />
        ///, for example "dbo.AccessAuditLog.Id"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int32}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, int> SelectMany(AnyElement<int> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.Person.CreditLimit"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int32}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, int?> SelectMany(AnyElement<int?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int64}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, long> SelectMany(AnyElement<long> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Int64}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, long?> SelectMany(AnyElement<long?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Single}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, float> SelectMany(AnyElement<float> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />?
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, Single}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, float?> SelectMany(AnyElement<float?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, string> SelectMany(StringElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, string?> SelectMany(NullableStringElement element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TimeSpan}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, TimeSpan> SelectMany(AnyElement<TimeSpan> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />?
        ///, for example "dbo.Product.ValidStartTimeOfDayForPurchase"
        ///</param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TimeSpan}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectValues<ProfilingDatabase, TimeSpan?> SelectMany(AnyElement<TimeSpan?> element)
            => GetProfilingDatabase().SelectMany(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamics<ProfilingDatabase> SelectMany(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => GetProfilingDatabase().SelectMany(element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamics<ProfilingDatabase> SelectMany(IEnumerable<AnyElement> elements)
            => GetProfilingDatabase().SelectMany(elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public static SelectDynamics<ProfilingDatabase> SelectMany(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => GetProfilingDatabase().SelectMany((elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region update
        /// <summary>
        /// Start constructing a sql UPDATE query expression to update record(s).
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/update-statement">read the docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignment">A <see cref="EntityFieldAssignment" /> assigning a database field/column a new value.  
        /// For example "dbo.Address.Line1.Set("new value")"
        /// or "dbo.Person.CreditLimit.Set(dbo.Person.CreditLimit + 10)"
        ///</param>
        /// <param name="assignments">An additional list of <see cref="EntityFieldAssignment" />(s) assigning database fields/columns new values.  </param>
        /// <returns><see cref="UpdateEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public static UpdateEntities<ProfilingDatabase> Update(EntityFieldAssignment assignment, params EntityFieldAssignment[] assignments)
            => GetProfilingDatabase().Update(assignment, assignments);

        /// <summary>
        /// Start constructing a sql UPDATE query expression to update records.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/update-statement">read the docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignments">A list of <see cref="EntityFieldAssignment" />(s) that assign a database field/column a new value.  
        /// For example "dbo.Address.Line1.Set("new value")"
        /// or "dbo.Person.CreditLimit.Set(dbo.Person.CreditLimit + 10)"
        ///</param>
        /// <returns><see cref="UpdateEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public static UpdateEntities<ProfilingDatabase> Update(IEnumerable<EntityFieldAssignment> assignments)
            => GetProfilingDatabase().Update(assignments);   
        #endregion

        #region delete
        /// <summary>
        /// Start constructing a sql DELETE query expression to remove records.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/delete-statement">read the docs on DELETE</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="DeleteEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql DELETE statement.</returns>
        public static DeleteEntities<ProfilingDatabase> Delete()
            => GetProfilingDatabase().Delete();
        #endregion

        #region insert
        /// <summary>
        /// Start constructing a sql INSERT query expression to insert a record.  Property values from the <paramref name="entity"/> instance are used to create the record values for the INSERT statement. 
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/insert-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entity">The entity supplying the property values.
        /// </param>
        /// <returns><see cref="InsertEntity{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entity to insert.</typeparam>
        public static InsertEntity<ProfilingDatabase, TEntity> Insert<TEntity>(TEntity entity)
            where TEntity : class, IDbEntity
            => GetProfilingDatabase().Insert<TEntity>(entity);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/delete-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public static InsertEntities<ProfilingDatabase, TEntity> InsertMany<TEntity>(TEntity entity, params TEntity[] entities)
            where TEntity : class, IDbEntity
            => GetProfilingDatabase().InsertMany<TEntity>(entity, entities);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/insert-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public static InsertEntities<ProfilingDatabase, TEntity> InsertMany<TEntity>(IEnumerable<TEntity> entities)
            where TEntity : class, IDbEntity
            => GetProfilingDatabase().InsertMany<TEntity>(entities);
        #endregion

        #region get connection
        /// <summary>
        /// Creates a connection to the database.
        /// <para>
        /// The connection has not been opened, use <see cref="System.Data.IDbConnection.Open"/> or <see cref="Connection.ISqlConnection.EnsureOpen"/> to ensure an open connection to the database prior to operations like <see cref="System.Data.IDbConnection.BeginTransaction"/>.
        /// </para>
        /// </summary>
        /// <returns><see cref="ISqlConnection"/>, a connection to the database.</returns>
        public static ISqlConnection GetConnection()
            => GetProfilingDatabase().GetConnection();
        #endregion

        #endregion
    }
    #endregion

    #region ProfilingDatabase
#if !NET7_0_OR_GREATER
    [PlatformVersion("2019")]
#endif
    public sealed partial class ProfilingDatabase : ISqlDatabaseStaticRuntime,
        Database,
        SelectOneInitiation<ProfilingDatabase>, 
        SelectManyInitiation<ProfilingDatabase>,
        UpdateEntitiesInitiation<ProfilingDatabase>,
        DeleteEntitiesInitiation<ProfilingDatabase>,
        InsertEntitiesInitiation<ProfilingDatabase>
    {
        #region internals
        private static readonly HashSet<SchemaExpression> _schemas = new HashSet<SchemaExpression>();
        private static readonly Dictionary<EntityTypeKey, Table> _entityTypeToTableMap = new Dictionary<EntityTypeKey, Table>();
        private static readonly SqlDatabaseMetadataProvider _metadata = new SqlDatabaseMetadataProvider(new ProfilingDatabaseSqlDatabaseMetadata("ProfilingDatabase"));
        private readonly IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> _queryExpressionBuilderFactory;
        private readonly IDbConnectionFactory _connectionFactory;
        private readonly MsSqlFunctionExpressionBuilder _fx;
        private ProfilingDatabaseStoredProcedures? _sp;
        #endregion

        #region interface
        public static string PlatformVersion => "2019";
        ISqlDatabaseMetadataProvider ISqlDatabaseRuntime.MetadataProvider => _metadata;
        Type IDatabaseEntityTypeProvider.EntityType => typeof(ProfilingDatabase);
        string IExpressionNameProvider.Name => "ProfilingDatabase";
        int ISqlMetadataIdentifierProvider.Identifier => 0;
        IEnumerable<Schema> Database.Schemas => _schemas;
        public MsSqlFunctionExpressionBuilder fx => _fx;
        public ProfilingDatabaseStoredProcedures sp => _sp ?? (_sp = new ProfilingDatabaseStoredProcedures(_queryExpressionBuilderFactory, _schemas));
        #endregion

        #region constructors
        static ProfilingDatabase()
        {
            var dboSchema = new _dboDataService.dboSchemaExpression(1, "dbo", typeof(dboSchemaExpression));
            _schemas.Add(dboSchema);
            _dboDataService.dbo.UseSchema(dboSchema);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.AccessAuditLog).TypeHandle.Value), dboSchema.AccessAuditLog);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.Address).TypeHandle.Value), dboSchema.Address);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.Person).TypeHandle.Value), dboSchema.Person);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.PersonAddress).TypeHandle.Value), dboSchema.PersonAddress);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.Product).TypeHandle.Value), dboSchema.Product);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.Purchase).TypeHandle.Value), dboSchema.Purchase);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.PurchaseLine).TypeHandle.Value), dboSchema.PurchaseLine);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(dboData.PersonTotalPurchasesView).TypeHandle.Value), dboSchema.PersonTotalPurchasesView);

            var secSchema = new _secDataService.secSchemaExpression(123, "sec", typeof(secSchemaExpression));
            _schemas.Add(secSchema);
            _secDataService.sec.UseSchema(secSchema);
            _entityTypeToTableMap.Add(new EntityTypeKey(typeof(secData.Person).TypeHandle.Value), secSchema.Person);

        }

        public ProfilingDatabase(
            IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> queryExpressionBuilderFactory,
            IDbConnectionFactory connectionFactory,
            MsSqlFunctionExpressionBuilder fx
        )
        {
            _queryExpressionBuilderFactory = queryExpressionBuilderFactory ?? throw new ArgumentNullException(nameof(queryExpressionBuilderFactory));
            _connectionFactory = connectionFactory ?? throw new ArgumentNullException(nameof(connectionFactory));
            _fx = fx ?? throw new ArgumentNullException(nameof(fx));
            db.UseDatabase(this);
        }
        #endregion

        #region methods
        void ISqlDatabaseStaticRuntime.InitializeStaticRuntime()
            => db.UseDatabase(this);

        #region select one
        /// <summary>
        /// Start constructing a sql SELECT query expression for a single entity.
        /// <para>
        /// To retrieve a <see cref="Profiling.MsSql.dboData.AccessAuditLog" />, use a type param of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />
        /// </para>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntity{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public SelectEntity<ProfilingDatabase, TEntity> SelectOne<TEntity>()
            where TEntity : class, IDbEntity, new()
            => _queryExpressionBuilderFactory.CreateSelectEntityBuilder<TEntity>(GetTable<TEntity>());

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />
        ///, for example "dbo.Person.GenderType"
        /// </param>
        /// <returns><see cref="Sql.SelectValue{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public SelectValue<ProfilingDatabase, TEnum> SelectOne<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/>? value.  
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />?
        ///, for example "dbo.Address.AddressType"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public SelectValue<ProfilingDatabase, TEnum?> SelectOne<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, object}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, object?> SelectOne(ObjectElement element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/>? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, object}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, object?> SelectOne(NullableObjectElement element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{T}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObject<ProfilingDatabase, T> SelectOne<T>(ObjectElement<T> element)
            where T : class?
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AliasedElement{T}" />    
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, T> SelectOne<T>(AliasedElement<T> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, bool> SelectOne(AnyElement<bool> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, bool?> SelectOne(AnyElement<bool?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, byte> SelectOne(AnyElement<byte> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, byte?> SelectOne(AnyElement<byte?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />[] value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, byte[]> SelectOne(ByteArrayElement element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />[]? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, byte[]?> SelectOne(NullableByteArrayElement element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />
        ///, for example "dbo.AccessAuditLog.DateCreated", "db.fx.DateAdd(DateParts.Year, 1, dbo.AccessAuditLog.DateCreated) or "db.fx.IsNull(dbo.AccessAuditLog.DateCreated, DateTime.Now)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, DateTime> SelectOne(AnyElement<DateTime> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />?
        ///, for example "dbo.Person.BirthDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.BirthDate)
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, DateTime?> SelectOne(AnyElement<DateTime?> field)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(field);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />
        ///, for example "dbo.Person.RegistrationDate", "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.RegistrationDate)" or "db.fx.IsNull(dbo.Person.RegistrationDate, DateTimeOffset.Now)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, DateTimeOffset> SelectOne(AnyElement<DateTimeOffset> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />?
        ///, for example "dbo.Person.LastLoginDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.LastLoginDate)" 
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, DateTimeOffset?> SelectOne(AnyElement<DateTimeOffset?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />
        ///, for example "dbo.Product.ShippingWeight" or "db.fx.IsNull(dbo.Product.ShippingWeight, decimal.MinValue)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, decimal> SelectOne(AnyElement<decimal> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />?
        ///, for example "dbo.Product.Height" or "db.fx.Min(dbo.Product.Height)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, decimal?> SelectOne(AnyElement<decimal?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />
        ///, for example "dbo.Product.ListPrice" or "db.fx.IsNull(dbo.Product.ListPrice, double.MinValue)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, double> SelectOne(AnyElement<double> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />?
        ///, for example "dbo.PersonTotalPurchasesView.TotalAmount" or "db.fx.Min(dbo.PersonTotalPurchasesView.TotalAmount)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, double?> SelectOne(AnyElement<double?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, Guid> SelectOne(AnyElement<Guid> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />?
        ///, for example "dbo.Purchase.TrackingIdentifier"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, Guid?> SelectOne(AnyElement<Guid?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, short> SelectOne(AnyElement<short> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, short?> SelectOne(AnyElement<short?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.AccessAuditLog.Id" or "db.fx.Avg(dbo.AccessAuditLog.Id)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, int> SelectOne(AnyElement<int> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.Person.CreditLimit" or "db.fx.Avg(dbo.Person.CreditLimit)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, int?> SelectOne(AnyElement<int?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, long> SelectOne(AnyElement<long> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, long?> SelectOne(AnyElement<long?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, float> SelectOne(AnyElement<float> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />?
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, float?> SelectOne(AnyElement<float?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, String}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, string> SelectOne(StringElement element) 
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, string?> SelectOne(NullableStringElement element) 
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" /> value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, TimeSpan> SelectOne(AnyElement<TimeSpan> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" />? value.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />?
        ///, for example "dbo.Product.ValidStartTimeOfDayForPurchase"
        /// </param>
        /// <returns><see cref="SelectValue{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<ProfilingDatabase, TimeSpan?> SelectOne(AnyElement<TimeSpan?> element)
            => _queryExpressionBuilderFactory.CreateSelectValueBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamic{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<ProfilingDatabase> SelectOne(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicBuilder(element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamic{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<ProfilingDatabase> SelectOne(IEnumerable<AnyElement> elements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicBuilder(elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamic{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<ProfilingDatabase> SelectOne(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicBuilder((elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region select many
        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of entities.
        /// <para>
        /// To retrieve a list of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />(s), use a type param of <see cref="Profiling.MsSql.dboData.AccessAuditLog" />
        /// </para>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public SelectEntities<ProfilingDatabase, TEntity> SelectMany<TEntity>()
           where TEntity : class, IDbEntity, new()
           => _queryExpressionBuilderFactory.CreateSelectEntitiesBuilder<TEntity>(GetTable<TEntity>());

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />
        ///, for example "dbo.Person.GenderType"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        public SelectValues<ProfilingDatabase, TEnum> SelectMany<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/>? values.
        /// </summary>
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// <param name="element">An expression of type <see cref="AnyElement{TEnum}" />?
        ///, for example "dbo.Address.AddressType"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TEnum}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, TEnum?> SelectMany<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder<TEnum>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, object}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, object>? SelectMany(ObjectElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/>? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, object}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, object?> SelectMany(NullableObjectElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{T}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObjects<ProfilingDatabase, T> SelectMany<T>(ObjectElement<T> element)
            where T : class?
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AliasedElement{T}" />    
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, T}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, T> SelectMany<T>(AliasedElement<T> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder<T>(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, bool> SelectMany(AnyElement<bool> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Boolean}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, bool?> SelectMany(AnyElement<bool?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, byte> SelectMany(AnyElement<byte> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, byte?> SelectMany(AnyElement<byte?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />[] values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, byte[]> SelectMany(ByteArrayElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />[]? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Byte[]}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, byte[]?> SelectMany(NullableByteArrayElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />
        ///, for example "dbo.AccessAuditLog.DateCreated", "db.fx.DateAdd(DateParts.Year, 1, dbo.AccessAuditLog.DateCreated) or "db.fx.IsNull(dbo.AccessAuditLog.DateCreated, DateTime.Now)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, DateTime> SelectMany(AnyElement<DateTime> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTime}" />?
        ///, for example "dbo.Person.BirthDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.BirthDate)
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, DateTime?> SelectMany(AnyElement<DateTime?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />
        ///, for example "dbo.Person.RegistrationDate", "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.RegistrationDate)" or "db.fx.IsNull(dbo.Person.RegistrationDate, DateTimeOffset.Now)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, DateTimeOffset> SelectMany(AnyElement<DateTimeOffset> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{DateTimeOffset}" />?
        ///, for example "dbo.Person.LastLoginDate" or "db.fx.DateAdd(DateParts.Year, 1, dbo.Person.LastLoginDate)" 
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, DateTimeOffset?> SelectMany(AnyElement<DateTimeOffset?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />
        ///, for example "dbo.Product.ShippingWeight" or "db.fx.IsNull(dbo.Product.ShippingWeight, decimal.MinValue)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, decimal> SelectMany(AnyElement<decimal> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Decimal}" />?
        ///, for example "dbo.Product.Height"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, decimal?> SelectMany(AnyElement<decimal?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />
        ///, for example "dbo.Product.ListPrice" or "db.fx.IsNull(dbo.Product.ListPrice, double.MinValue)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, double> SelectMany(AnyElement<double> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Double}" />?
        ///, for example "dbo.PersonTotalPurchasesView.TotalAmount"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, double?> SelectMany(AnyElement<double?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, Guid> SelectMany(AnyElement<Guid> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Guid}" />?
        ///, for example "dbo.Purchase.TrackingIdentifier"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, Guid?> SelectMany(AnyElement<Guid?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, short> SelectMany(AnyElement<short> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int16}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, short?> SelectMany(AnyElement<short?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />
        ///, for example "dbo.AccessAuditLog.Id"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, int> SelectMany(AnyElement<int> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int32}" />?
        ///, for example "dbo.Person.CreditLimit"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, int?> SelectMany(AnyElement<int?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, long> SelectMany(AnyElement<long> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Int64}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, long?> SelectMany(AnyElement<long?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, float> SelectMany(AnyElement<float> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{Single}" />?
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, float?> SelectMany(AnyElement<float?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, string> SelectMany(StringElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{String}" />?
        ///, for example "dbo.Address.Line1" or "db.fx.Concat("Value: ", dbo.Address.Line1)"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, String}"/>?, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, string?> SelectMany(NullableStringElement element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" /> values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, TimeSpan> SelectMany(AnyElement<TimeSpan> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" />? values.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{TimeSpan}" />?
        ///, for example "dbo.Product.ValidStartTimeOfDayForPurchase"
        /// </param>
        /// <returns><see cref="SelectValues{ProfilingDatabase, TValue}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<ProfilingDatabase, TimeSpan?> SelectMany(AnyElement<TimeSpan?> element)
            => _queryExpressionBuilderFactory.CreateSelectValuesBuilder(element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<ProfilingDatabase> SelectMany(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicsBuilder(element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<ProfilingDatabase> SelectMany(IEnumerable<AnyElement> elements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicsBuilder(elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/select-statement">read the docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamics{ ProfilingDatabase }"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<ProfilingDatabase> SelectMany(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => _queryExpressionBuilderFactory.CreateSelectDynamicsBuilder((elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region update
        /// <summary>
        /// Start constructing a sql UPDATE query expression to update record(s).
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/update-statement">read the docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignment">A <see cref="EntityFieldAssignment" /> assigning a database field/column a new value.  
        /// For example "dbo.Address.Line1.Set("new value")"
        /// or "dbo.Person.CreditLimit.Set(dbo.Person.CreditLimit + 10)"
        /// </param>
        /// <param name="assignments">An additional list of <see cref="EntityFieldAssignment" />(s) assigning database fields/columns new values.  </param>
        /// <returns><see cref="UpdateEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public UpdateEntities<ProfilingDatabase> Update(EntityFieldAssignment assignment, params EntityFieldAssignment[] assignments)
            => _queryExpressionBuilderFactory.CreateUpdateQueryBuilder(assignment, assignments);

        /// <summary>
        /// Start constructing a sql UPDATE query expression to update records.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/update-statement">read the docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignments">A list of <see cref="EntityFieldAssignment" />(s) that assign a database field/column a new value.  
        /// For example "dbo.Address.Line1.Set("new value")"
        /// or "dbo.Person.CreditLimit.Set(dbo.Person.CreditLimit + 10)"
        /// </param>
        /// <returns><see cref="UpdateEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public UpdateEntities<ProfilingDatabase> Update(IEnumerable<EntityFieldAssignment> assignments)
            => _queryExpressionBuilderFactory.CreateUpdateQueryBuilder(assignments);   
        #endregion

        #region delete
        /// <summary>
        /// Start constructing a sql DELETE query expression to remove records.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/delete-statement">read the docs on DELETE</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="DeleteEntities{ ProfilingDatabase }"/>, a fluent builder for constructing a sql DELETE statement.</returns>
        public DeleteEntities<ProfilingDatabase> Delete()
            => _queryExpressionBuilderFactory.CreateDeleteQueryBuilder();
        #endregion

        #region insert
        /// <summary>
        /// Start constructing a sql INSERT query expression to insert a record.  Property values from the <paramref name="entity"/> instance are used to create the record values for the INSERT statement. 
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/insert-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entity">The entity supplying the property values.
        /// </param>
        /// <returns><see cref="InsertEntity{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entity to insert.</typeparam>
        public InsertEntity<ProfilingDatabase, TEntity> Insert<TEntity>(TEntity entity)
            where TEntity : class, IDbEntity
            => _queryExpressionBuilderFactory.CreateInsertQueryBuilder<TEntity>(entity);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/insert-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public InsertEntities<ProfilingDatabase, TEntity> InsertMany<TEntity>(TEntity entity, params TEntity[] entities)
            where TEntity : class, IDbEntity
            => _queryExpressionBuilderFactory.CreateInsertQueryBuilder<TEntity>(entity, entities);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://dbexpression.com/docs/core-concepts/basics/insert-statement">read the docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{ProfilingDatabase, TEntity}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public InsertEntities<ProfilingDatabase, TEntity> InsertMany<TEntity>(IEnumerable<TEntity> entities)
            where TEntity : class, IDbEntity
            => _queryExpressionBuilderFactory.CreateInsertQueryBuilder<TEntity>(entities);
        #endregion

        /// <summary>
        /// Creates a connection to the database.
        /// <para>
        /// The connection has not been opened, use <see cref="System.Data.IDbConnection.Open"/> or <see cref="ISqlConnection.EnsureOpen"/> to ensure an open connection to the database prior to operations like <see cref="System.Data.IDbConnection.BeginTransaction"/>.
        /// </para>
        /// </summary>
        /// <returns><see cref="ISqlConnection"/>, a connection to the database.</returns>
        public ISqlConnection GetConnection()
            => new SqlConnector(_connectionFactory);
        
        public void ValidateRuntimeCompatibility(string runtimeVersion)
        {
            string[] compatibleRuntimeVersions = new string[] { "0.10.0", "0.9.8", "0.9.9" };

            if (!compatibleRuntimeVersions.Contains(runtimeVersion))
                DbExpressionConfigurationException.ThrowUnsupportedRuntimeVersion(
                    runtimeVersion,
                    templateVersion: "0.10.0",
                    compatibleRuntimeVersions
            );
        }

        private Table<TEntity> GetTable<TEntity>()
            where TEntity : class, IDbEntity
        {
            if (!_entityTypeToTableMap.TryGetValue(new EntityTypeKey(typeof(TEntity).TypeHandle.Value), out var table))
                throw new DbExpressionException($"Entity type {typeof(TEntity)} is not known.");
            return table as Table<TEntity> ?? throw new DbExpressionException($"Map contains an invalid reference for type {typeof(TEntity)}.");
        }
        #endregion

        #region sp
        public sealed partial class ProfilingDatabaseStoredProcedures
        {
            #region internals
            private readonly dboStoredProcedures _dboStoredProcedures;
            private readonly secStoredProcedures _secStoredProcedures;
            #endregion

            #region interface
            /// <summary>
            /// Accessors to construct and execute stored procedure query expressions in the dbo schema.
            /// </summary>
            public dboStoredProcedures dbo => _dboStoredProcedures;

            /// <summary>
            /// Accessors to construct and execute stored procedure query expressions in the sec schema.
            /// </summary>
            public secStoredProcedures sec => _secStoredProcedures;

            #endregion

            #region constructors
            public ProfilingDatabaseStoredProcedures(IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> factory, IEnumerable<SchemaExpression> schemas)
            {
                if (factory is null)
                    throw new ArgumentNullException(nameof(factory));
                _dboStoredProcedures = new dboStoredProcedures(factory, schemas.Single(s => s is dboSchemaExpression));
                _secStoredProcedures = new secStoredProcedures(factory, schemas.Single(s => s is secSchemaExpression));
            }
            #endregion
        }

        #region classes
        /// <summary>
        /// Accessors to construct and execute stored procedure query expressions in the dbo schema.
        /// </summary>
        public sealed partial class dboStoredProcedures
        {
            #region internals
            private readonly IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> _factory;
            private readonly SchemaExpression _dbo;
            #endregion

            #region constructors
            public dboStoredProcedures(IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> factory, SchemaExpression schema)
            {
                _factory = factory ?? throw new ArgumentNullException(nameof(factory));
                _dbo = schema ?? throw new ArgumentNullException(nameof(schema));
            }
            #endregion

            #region methods
            /// <summary>
            /// Method to start constructing a stored procedure query expression for the GetMaxCreditLimitLessThan stored procedure.
            /// </summary>
            /// <param name="CreditLimit">The value to use for creating the stored procedure parameter @CreditLimit.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@CreditLimit</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, GetMaxCreditLimitLessThanStoredProcedure> GetMaxCreditLimitLessThan(int? CreditLimit)
                => _factory.CreateStoredProcedureQueryBuilder(new GetMaxCreditLimitLessThanStoredProcedure(_dbo, CreditLimit));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the GetPersonById stored procedure.
            /// </summary>
            /// <param name="Id">The value to use for creating the stored procedure parameter @Id.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@Id</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, GetPersonByIdStoredProcedure> GetPersonById(int? Id)
                => _factory.CreateStoredProcedureQueryBuilder(new GetPersonByIdStoredProcedure(_dbo, Id));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the GetPersonsWithCreditLimitLessThan stored procedure.
            /// </summary>
            /// <param name="CreditLimit">The value to use for creating the stored procedure parameter @CreditLimit.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@CreditLimit</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, GetPersonsWithCreditLimitLessThanStoredProcedure> GetPersonsWithCreditLimitLessThan(int? CreditLimit)
                => _factory.CreateStoredProcedureQueryBuilder(new GetPersonsWithCreditLimitLessThanStoredProcedure(_dbo, CreditLimit));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_Dynamic_With_Input stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_Dynamic_With_InputStoredProcedure> SelectPerson_As_Dynamic_With_Input(int? P1)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_Dynamic_With_InputStoredProcedure(_dbo, P1));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_Dynamic_With_Input_And_InputOutput stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_Dynamic_With_Input_And_InputOutputStoredProcedure> SelectPerson_As_Dynamic_With_Input_And_InputOutput(int? P1,int? CreditLimit, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_Dynamic_With_Input_And_InputOutputStoredProcedure(_dbo, P1, CreditLimit, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_Dynamic_With_Input_And_Output stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="outputParameters">The delegate to manage the output parameters returned from execution of the stored procedure.</param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_Dynamic_With_Input_And_OutputStoredProcedure> SelectPerson_As_Dynamic_With_Input_And_Output(int? P1, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_Dynamic_With_Input_And_OutputStoredProcedure(_dbo, P1, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_DynamicList_With_Input stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_DynamicList_With_InputStoredProcedure> SelectPerson_As_DynamicList_With_Input(int? P1)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_DynamicList_With_InputStoredProcedure(_dbo, P1));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_DynamicList_With_Input_And_InputOutput stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_DynamicList_With_Input_And_InputOutputStoredProcedure> SelectPerson_As_DynamicList_With_Input_And_InputOutput(int? P1,int? CreditLimit, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_DynamicList_With_Input_And_InputOutputStoredProcedure(_dbo, P1, CreditLimit, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPerson_As_DynamicList_With_Input_And_Output stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="outputParameters">The delegate to manage the output parameters returned from execution of the stored procedure.</param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPerson_As_DynamicList_With_Input_And_OutputStoredProcedure> SelectPerson_As_DynamicList_With_Input_And_Output(int? P1, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPerson_As_DynamicList_With_Input_And_OutputStoredProcedure(_dbo, P1, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValue_With_Input stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValue_With_InputStoredProcedure> SelectPersonId_As_ScalarValue_With_Input(int? P1)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValue_With_InputStoredProcedure(_dbo, P1));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValue_With_Input_And_Default_Value stored procedure.
            /// </summary>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValue_With_Input_And_Default_ValueStoredProcedure> SelectPersonId_As_ScalarValue_With_Input_And_Default_Value()
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValue_With_Input_And_Default_ValueStoredProcedure(_dbo));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValue_With_Input_And_InputOutput stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValue_With_Input_And_InputOutputStoredProcedure> SelectPersonId_As_ScalarValue_With_Input_And_InputOutput(int? P1,int? CreditLimit, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValue_With_Input_And_InputOutputStoredProcedure(_dbo, P1, CreditLimit, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValue_With_Input_And_Output stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="outputParameters">The delegate to manage the output parameters returned from execution of the stored procedure.</param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValue_With_Input_And_OutputStoredProcedure> SelectPersonId_As_ScalarValue_With_Input_And_Output(int? P1, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValue_With_Input_And_OutputStoredProcedure(_dbo, P1, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValueList_With_Input stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValueList_With_InputStoredProcedure> SelectPersonId_As_ScalarValueList_With_Input(int? P1)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValueList_With_InputStoredProcedure(_dbo, P1));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValueList_With_Input_And_InputOutput stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValueList_With_Input_And_InputOutputStoredProcedure> SelectPersonId_As_ScalarValueList_With_Input_And_InputOutput(int? P1,int? CreditLimit, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValueList_With_Input_And_InputOutputStoredProcedure(_dbo, P1, CreditLimit, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SelectPersonId_As_ScalarValueList_With_Input_And_Output stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="outputParameters">The delegate to manage the output parameters returned from execution of the stored procedure.</param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SelectPersonId_As_ScalarValueList_With_Input_And_OutputStoredProcedure> SelectPersonId_As_ScalarValueList_With_Input_And_Output(int? P1, Action<ISqlOutputParameterList> outputParameters)
                => _factory.CreateStoredProcedureQueryBuilder(new SelectPersonId_As_ScalarValueList_With_Input_And_OutputStoredProcedure(_dbo, P1, outputParameters));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the SetCreditLimitForPerson stored procedure.
            /// </summary>
            /// <param name="Id">The value to use for creating the stored procedure parameter @Id.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@Id</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="CreditLimit">The value to use for creating the stored procedure parameter @CreditLimit.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@CreditLimit</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, SetCreditLimitForPersonStoredProcedure> SetCreditLimitForPerson(int? Id,int? CreditLimit)
                => _factory.CreateStoredProcedureQueryBuilder(new SetCreditLimitForPersonStoredProcedure(_dbo, Id, CreditLimit));

            /// <summary>
            /// Method to start constructing a stored procedure query expression for the UpdatePersonCreditLimit_With_Inputs stored procedure.
            /// </summary>
            /// <param name="P1">The value to use for creating the stored procedure parameter @P1.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@P1</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <param name="CreditLimit">The value to use for creating the stored procedure parameter @CreditLimit.
            /// <para>Database Properties:
            /// <list type="table">
            /// <item>
            /// <term>name</term><description>@CreditLimit</description>
            /// </item>
            /// <item>
            /// <term>sql type</term><description>int</description>
            /// </item>
            /// <item>
            /// <term>allow null</term><description>yes</description>
            /// </item>
            /// </list>
            /// </para>
            /// </param>
            /// <returns><see cref="StoredProcedureContinuation"/>, a fluent builder for constructing a stored procedure query expression.</returns>
            public StoredProcedureContinuation<ProfilingDatabase, UpdatePersonCreditLimit_With_InputsStoredProcedure> UpdatePersonCreditLimit_With_Inputs(int? P1,int? CreditLimit)
                => _factory.CreateStoredProcedureQueryBuilder(new UpdatePersonCreditLimit_With_InputsStoredProcedure(_dbo, P1, CreditLimit));

            #endregion
        }

        /// <summary>
        /// Accessors to construct and execute stored procedure query expressions in the sec schema.
        /// </summary>
        public sealed partial class secStoredProcedures
        {
            #region internals
            private readonly IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> _factory;
            private readonly SchemaExpression _sec;
            #endregion

            #region constructors
            public secStoredProcedures(IMsSqlQueryExpressionBuilderFactory<ProfilingDatabase> factory, SchemaExpression schema)
            {
                _factory = factory ?? throw new ArgumentNullException(nameof(factory));
                _sec = schema ?? throw new ArgumentNullException(nameof(schema));
            }
            #endregion

            #region methods
            #endregion
        }

        #endregion
        #endregion

        #region classes
        private readonly struct EntityTypeKey : IEquatable<EntityTypeKey>
        {
            public readonly IntPtr Ptr;
            public EntityTypeKey(IntPtr key) => Ptr = key;
            public bool Equals(EntityTypeKey other) => Ptr == other.Ptr;
            public override int GetHashCode() => Ptr.GetHashCode();
            public override bool Equals(object? obj) => obj is EntityTypeKey other && Equals(other);
        }
        #endregion
    }
    #endregion

}

namespace Profiling.MsSql.dboDataService
{
	using Profiling.MsSql.dboData;
	using System.Data;

    #region dbo schema expression
    public sealed partial class dboSchemaExpression : SchemaExpression
    {
        #region interface
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly AccessAuditLogEntity AccessAuditLog;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly AddressEntity Address;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonEntity Person;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonAddressEntity PersonAddress;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ProductEntity Product;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PurchaseEntity Purchase;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PurchaseLineEntity PurchaseLine;

#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonTotalPurchasesViewEntity PersonTotalPurchasesView;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public dboSchemaExpression(int dbex_identifier, string dbex_name, Type dbex_schemaType) : base(dbex_identifier, dbex_name, dbex_schemaType)
        {
            AddEntity(AccessAuditLog = new AccessAuditLogEntity(2, "AccessAuditLog", this));
            AddEntity(Address = new AddressEntity(7, "Address", this));
            AddEntity(Person = new PersonEntity(17, "Person", this));
            AddEntity(PersonAddress = new PersonAddressEntity(29, "PersonAddress", this));
            AddEntity(Product = new ProductEntity(34, "Product", this));
            AddEntity(Purchase = new PurchaseEntity(52, "Purchase", this));
            AddEntity(PurchaseLine = new PurchaseLineEntity(66, "PurchaseLine", this));
            AddEntity(PersonTotalPurchasesView = new PersonTotalPurchasesViewEntity(74, "PersonTotalPurchasesView", this));
        }
        #endregion
    }
    #endregion

    #region access audit log entity expression
    public sealed partial class AccessAuditLogEntity : EntityExpression<AccessAuditLog>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.IdField"/> representing the "dbo.AccessAuditLog.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.PersonIdField"/> representing the "dbo.AccessAuditLog.PersonId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.PersonIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PersonId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonIdField PersonId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.AccessResultField"/> representing the "dbo.AccessAuditLog.AccessResult" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.AccessResultField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>AccessResult</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly AccessResultField AccessResult;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.DateCreatedField"/> representing the "dbo.AccessAuditLog.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public AccessAuditLogEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private AccessAuditLogEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(3, "Id", this));
            AddField(PersonId = new PersonIdField(4, "PersonId", this));
            AddField(AccessResult = new AccessResultField(5, "AccessResult", this));
            AddField(DateCreated = new DateCreatedField(6, "DateCreated", this));
        }
        #endregion

        #region methods
        public AccessAuditLogEntity As(string dbex_alias)
            => new AccessAuditLogEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<int>(PersonId)
                    ,new SelectExpression<int>(AccessResult)
                    ,new SelectExpression<DateTime>(DateCreated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(PersonId));
            set &= aliased != nameof(PersonId) ? new SelectExpression<int>(PersonId, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(AccessResult));
            set &= aliased != nameof(AccessResult) ? new SelectExpression<int>(AccessResult, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[3];
            return set;
        }
		
        protected override InsertExpressionSet<AccessAuditLog> GetInclusiveInsertExpression(AccessAuditLog dbex_name)
        {
            return new InsertExpressionSet<AccessAuditLog>(dbex_name 
                ,new InsertExpression<int>(dbex_name.PersonId, PersonId)
                ,new InsertExpression<int>(dbex_name.AccessResult, AccessResult)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(AccessAuditLog target, AccessAuditLog source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(AccessAuditLogEntity.PersonIdField)) && target.PersonId != source.PersonId) { expr &= PersonId.Set(source.PersonId); }
            if (!exclusions.Contains(typeof(AccessAuditLogEntity.AccessResultField)) && target.AccessResult != source.AccessResult) { expr &= AccessResult.Set(source.AccessResult); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, AccessAuditLog dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.PersonId = reader.ReadField()!.GetValue<int>();
            dbex_name.AccessResult = reader.ReadField()!.GetValue<int>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<AccessAuditLog>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region person id field expression
        public sealed partial class PersonIdField : Int32FieldExpression<AccessAuditLog>
        {
            #region constructors
            public PersonIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region access result field expression
        public sealed partial class AccessResultField : Int32FieldExpression<AccessAuditLog>
        {
            #region constructors
            public AccessResultField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<AccessAuditLog>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region address entity expression
    public sealed partial class AddressEntity : EntityExpression<Address>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.IdField"/> representing the "dbo.Address.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.AddressTypeField"/> representing the "dbo.Address.AddressType" column in the database, 
        /// with a .NET type of <see cref="Profiling.MsSql.AddressType"/>?.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.AddressTypeField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Profiling.MsSql.AddressType?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>AddressType</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly AddressTypeField AddressType;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.Line1Field"/> representing the "dbo.Address.Line1" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.Line1Field"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Line1</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(50)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly Line1Field Line1;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.Line2Field"/> representing the "dbo.Address.Line2" column in the database, 
        /// with a .NET type of <see cref="string"/>?.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.Line2Field"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Line2</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(50)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly Line2Field Line2;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.CityField"/> representing the "dbo.Address.City" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.CityField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>City</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(60)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly CityField City;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.StateField"/> representing the "dbo.Address.State" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.StateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>State</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>char(2)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly StateField State;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.ZipField"/> representing the "dbo.Address.Zip" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.ZipField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Zip</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(10)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ZipField Zip;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.DateCreatedField"/> representing the "dbo.Address.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity.DateUpdatedField"/> representing the "dbo.Address.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.AddressEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public AddressEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private AddressEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(8, "Id", this));
            AddField(AddressType = new AddressTypeField(9, "AddressType", this));
            AddField(Line1 = new Line1Field(10, "Line1", this));
            AddField(Line2 = new Line2Field(11, "Line2", this));
            AddField(City = new CityField(12, "City", this));
            AddField(State = new StateField(13, "State", this));
            AddField(Zip = new ZipField(14, "Zip", this));
            AddField(DateCreated = new DateCreatedField(15, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(16, "DateUpdated", this));
        }
        #endregion

        #region methods
        public AddressEntity As(string dbex_alias)
            => new AddressEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<Profiling.MsSql.AddressType?>(AddressType)
                    ,new SelectExpression<string>(Line1)
                    ,new SelectExpression<string?>(Line2)
                    ,new SelectExpression<string>(City)
                    ,new SelectExpression<string>(State)
                    ,new SelectExpression<string>(Zip)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(AddressType));
            set &= aliased != nameof(AddressType) ? new SelectExpression<Profiling.MsSql.AddressType?>(AddressType, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(Line1));
            set &= aliased != nameof(Line1) ? new SelectExpression<string>(Line1, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(Line2));
            set &= aliased != nameof(Line2) ? new SelectExpression<string?>(Line2, aliased) : GetInclusiveSelectExpressions()[3];
            aliased = dbex_alias(nameof(City));
            set &= aliased != nameof(City) ? new SelectExpression<string>(City, aliased) : GetInclusiveSelectExpressions()[4];
            aliased = dbex_alias(nameof(State));
            set &= aliased != nameof(State) ? new SelectExpression<string>(State, aliased) : GetInclusiveSelectExpressions()[5];
            aliased = dbex_alias(nameof(Zip));
            set &= aliased != nameof(Zip) ? new SelectExpression<string>(Zip, aliased) : GetInclusiveSelectExpressions()[6];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[7];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[8];
            return set;
        }
		
        protected override InsertExpressionSet<Address> GetInclusiveInsertExpression(Address dbex_name)
        {
            return new InsertExpressionSet<Address>(dbex_name 
                ,new InsertExpression<Profiling.MsSql.AddressType?>(dbex_name.AddressType, AddressType)
                ,new InsertExpression<string>(dbex_name.Line1, Line1)
                ,new InsertExpression<string?>(dbex_name.Line2, Line2)
                ,new InsertExpression<string>(dbex_name.City, City)
                ,new InsertExpression<string>(dbex_name.State, State)
                ,new InsertExpression<string>(dbex_name.Zip, Zip)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(Address target, Address source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(AddressEntity.AddressTypeField)) && target.AddressType != source.AddressType) { expr &= AddressType.Set(source.AddressType); }
            if (!exclusions.Contains(typeof(AddressEntity.Line1Field)) && target.Line1 != source.Line1) { expr &= Line1.Set(source.Line1); }
            if (!exclusions.Contains(typeof(AddressEntity.Line2Field)) && target.Line2 != source.Line2) { expr &= Line2.Set(source.Line2); }
            if (!exclusions.Contains(typeof(AddressEntity.CityField)) && target.City != source.City) { expr &= City.Set(source.City); }
            if (!exclusions.Contains(typeof(AddressEntity.StateField)) && target.State != source.State) { expr &= State.Set(source.State); }
            if (!exclusions.Contains(typeof(AddressEntity.ZipField)) && target.Zip != source.Zip) { expr &= Zip.Set(source.Zip); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, Address dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.AddressType = reader.ReadField()!.GetValue<Profiling.MsSql.AddressType?>();
            dbex_name.Line1 = reader.ReadField()!.GetValue<string>();
            dbex_name.Line2 = reader.ReadField()!.GetValue<string?>();
            dbex_name.City = reader.ReadField()!.GetValue<string>();
            dbex_name.State = reader.ReadField()!.GetValue<string>();
            dbex_name.Zip = reader.ReadField()!.GetValue<string>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<Address>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region address type field expression
        public sealed partial class AddressTypeField : NullableEnumFieldExpression<Address,Profiling.MsSql.AddressType>
        {
            #region constructors
            public AddressTypeField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Profiling.MsSql.AddressType?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.AddressType?>(value, this));
            public AssignmentExpression Set(Profiling.MsSql.AddressType value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.AddressType>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.AddressType> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(Profiling.MsSql.AddressType? value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.AddressType?>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.AddressType?> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region line1 field expression
        public sealed partial class Line1Field : StringFieldExpression<Address>
        {
            #region constructors
            public Line1Field(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region line2 field expression
        public sealed partial class Line2Field : NullableStringFieldExpression<Address>
        {
            #region constructors
            public Line2Field(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<string?>(value, this));
            public AssignmentExpression Set(string? value) => new AssignmentExpression(this, new LiteralExpression<string?>(value, this));
            public AssignmentExpression Set(AnyStringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region city field expression
        public sealed partial class CityField : StringFieldExpression<Address>
        {
            #region constructors
            public CityField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region state field expression
        public sealed partial class StateField : StringFieldExpression<Address>
        {
            #region constructors
            public StateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region zip field expression
        public sealed partial class ZipField : StringFieldExpression<Address>
        {
            #region constructors
            public ZipField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<Address>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<Address>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region person entity expression
    public sealed partial class PersonEntity : EntityExpression<Person>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.IdField"/> representing the "dbo.Person.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.FirstNameField"/> representing the "dbo.Person.FirstName" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.FirstNameField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>FirstName</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(20)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly FirstNameField FirstName;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.LastNameField"/> representing the "dbo.Person.LastName" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.LastNameField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>LastName</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(20)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly LastNameField LastName;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.BirthDateField"/> representing the "dbo.Person.BirthDate" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.BirthDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>BirthDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>date</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly BirthDateField BirthDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.GenderTypeField"/> representing the "dbo.Person.GenderType" column in the database, 
        /// with a .NET type of <see cref="Profiling.MsSql.GenderType"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.GenderTypeField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Profiling.MsSql.GenderType}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>GenderType</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly GenderTypeField GenderType;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.CreditLimitField"/> representing the "dbo.Person.CreditLimit" column in the database, 
        /// with a .NET type of <see cref="int"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.CreditLimitField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>CreditLimit</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly CreditLimitField CreditLimit;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.YearOfLastCreditLimitReviewField"/> representing the "dbo.Person.YearOfLastCreditLimitReview" column in the database, 
        /// with a .NET type of <see cref="int"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.YearOfLastCreditLimitReviewField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>YearOfLastCreditLimitReview</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly YearOfLastCreditLimitReviewField YearOfLastCreditLimitReview;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.RegistrationDateField"/> representing the "dbo.Person.RegistrationDate" column in the database, 
        /// with a .NET type of <see cref="DateTimeOffset"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.RegistrationDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTimeOffset}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>RegistrationDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetimeoffset</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(sysdatetimeoffset())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly RegistrationDateField RegistrationDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.LastLoginDateField"/> representing the "dbo.Person.LastLoginDate" column in the database, 
        /// with a .NET type of <see cref="DateTimeOffset"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.LastLoginDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTimeOffset?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>LastLoginDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetimeoffset</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly LastLoginDateField LastLoginDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.DateCreatedField"/> representing the "dbo.Person.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity.DateUpdatedField"/> representing the "dbo.Person.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PersonEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PersonEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(18, "Id", this));
            AddField(FirstName = new FirstNameField(19, "FirstName", this));
            AddField(LastName = new LastNameField(20, "LastName", this));
            AddField(BirthDate = new BirthDateField(21, "BirthDate", this));
            AddField(GenderType = new GenderTypeField(22, "GenderType", this));
            AddField(CreditLimit = new CreditLimitField(23, "CreditLimit", this));
            AddField(YearOfLastCreditLimitReview = new YearOfLastCreditLimitReviewField(24, "YearOfLastCreditLimitReview", this));
            AddField(RegistrationDate = new RegistrationDateField(25, "RegistrationDate", this));
            AddField(LastLoginDate = new LastLoginDateField(26, "LastLoginDate", this));
            AddField(DateCreated = new DateCreatedField(27, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(28, "DateUpdated", this));
        }
        #endregion

        #region methods
        public PersonEntity As(string dbex_alias)
            => new PersonEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<string>(FirstName)
                    ,new SelectExpression<string>(LastName)
                    ,new SelectExpression<DateTime?>(BirthDate)
                    ,new SelectExpression<Profiling.MsSql.GenderType>(GenderType)
                    ,new SelectExpression<int?>(CreditLimit)
                    ,new SelectExpression<int?>(YearOfLastCreditLimitReview)
                    ,new SelectExpression<DateTimeOffset>(RegistrationDate)
                    ,new SelectExpression<DateTimeOffset?>(LastLoginDate)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(FirstName));
            set &= aliased != nameof(FirstName) ? new SelectExpression<string>(FirstName, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(LastName));
            set &= aliased != nameof(LastName) ? new SelectExpression<string>(LastName, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(BirthDate));
            set &= aliased != nameof(BirthDate) ? new SelectExpression<DateTime?>(BirthDate, aliased) : GetInclusiveSelectExpressions()[3];
            aliased = dbex_alias(nameof(GenderType));
            set &= aliased != nameof(GenderType) ? new SelectExpression<Profiling.MsSql.GenderType>(GenderType, aliased) : GetInclusiveSelectExpressions()[4];
            aliased = dbex_alias(nameof(CreditLimit));
            set &= aliased != nameof(CreditLimit) ? new SelectExpression<int?>(CreditLimit, aliased) : GetInclusiveSelectExpressions()[5];
            aliased = dbex_alias(nameof(YearOfLastCreditLimitReview));
            set &= aliased != nameof(YearOfLastCreditLimitReview) ? new SelectExpression<int?>(YearOfLastCreditLimitReview, aliased) : GetInclusiveSelectExpressions()[6];
            aliased = dbex_alias(nameof(RegistrationDate));
            set &= aliased != nameof(RegistrationDate) ? new SelectExpression<DateTimeOffset>(RegistrationDate, aliased) : GetInclusiveSelectExpressions()[7];
            aliased = dbex_alias(nameof(LastLoginDate));
            set &= aliased != nameof(LastLoginDate) ? new SelectExpression<DateTimeOffset?>(LastLoginDate, aliased) : GetInclusiveSelectExpressions()[8];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[9];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[10];
            return set;
        }
		
        protected override InsertExpressionSet<Person> GetInclusiveInsertExpression(Person dbex_name)
        {
            return new InsertExpressionSet<Person>(dbex_name 
                ,new InsertExpression<string>(dbex_name.FirstName, FirstName)
                ,new InsertExpression<string>(dbex_name.LastName, LastName)
                ,new InsertExpression<DateTime?>(dbex_name.BirthDate, BirthDate)
                ,new InsertExpression<Profiling.MsSql.GenderType>(dbex_name.GenderType, GenderType)
                ,new InsertExpression<int?>(dbex_name.CreditLimit, CreditLimit)
                ,new InsertExpression<int?>(dbex_name.YearOfLastCreditLimitReview, YearOfLastCreditLimitReview)
                ,new InsertExpression<DateTimeOffset>(dbex_name.RegistrationDate, RegistrationDate)
                ,new InsertExpression<DateTimeOffset?>(dbex_name.LastLoginDate, LastLoginDate)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(Person target, Person source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(PersonEntity.FirstNameField)) && target.FirstName != source.FirstName) { expr &= FirstName.Set(source.FirstName); }
            if (!exclusions.Contains(typeof(PersonEntity.LastNameField)) && target.LastName != source.LastName) { expr &= LastName.Set(source.LastName); }
            if (!exclusions.Contains(typeof(PersonEntity.BirthDateField)) && target.BirthDate != source.BirthDate) { expr &= BirthDate.Set(source.BirthDate); }
            if (!exclusions.Contains(typeof(PersonEntity.GenderTypeField)) && target.GenderType != source.GenderType) { expr &= GenderType.Set(source.GenderType); }
            if (!exclusions.Contains(typeof(PersonEntity.CreditLimitField)) && target.CreditLimit != source.CreditLimit) { expr &= CreditLimit.Set(source.CreditLimit); }
            if (!exclusions.Contains(typeof(PersonEntity.YearOfLastCreditLimitReviewField)) && target.YearOfLastCreditLimitReview != source.YearOfLastCreditLimitReview) { expr &= YearOfLastCreditLimitReview.Set(source.YearOfLastCreditLimitReview); }
            if (!exclusions.Contains(typeof(PersonEntity.RegistrationDateField)) && target.RegistrationDate != source.RegistrationDate) { expr &= RegistrationDate.Set(source.RegistrationDate); }
            if (!exclusions.Contains(typeof(PersonEntity.LastLoginDateField)) && target.LastLoginDate != source.LastLoginDate) { expr &= LastLoginDate.Set(source.LastLoginDate); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, Person dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.FirstName = reader.ReadField()!.GetValue<string>();
            dbex_name.LastName = reader.ReadField()!.GetValue<string>();
            dbex_name.BirthDate = reader.ReadField()!.GetValue<DateTime?>();
            dbex_name.GenderType = reader.ReadField()!.GetValue<Profiling.MsSql.GenderType>();
            dbex_name.CreditLimit = reader.ReadField()!.GetValue<int?>();
            dbex_name.YearOfLastCreditLimitReview = reader.ReadField()!.GetValue<int?>();
            dbex_name.RegistrationDate = reader.ReadField()!.GetValue<DateTimeOffset>();
            dbex_name.LastLoginDate = reader.ReadField()!.GetValue<DateTimeOffset?>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<Person>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region first name field expression
        public sealed partial class FirstNameField : StringFieldExpression<Person>
        {
            #region constructors
            public FirstNameField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region last name field expression
        public sealed partial class LastNameField : StringFieldExpression<Person>
        {
            #region constructors
            public LastNameField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region birth date field expression
        public sealed partial class BirthDateField : NullableDateTimeFieldExpression<Person>
        {
            #region constructors
            public BirthDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(DateTime? value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region gender type field expression
        public sealed partial class GenderTypeField : EnumFieldExpression<Person,Profiling.MsSql.GenderType>
        {
            #region constructors
            public GenderTypeField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Profiling.MsSql.GenderType>(value));
            public AssignmentExpression Set(Profiling.MsSql.GenderType value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.GenderType>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.GenderType> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region credit limit field expression
        public sealed partial class CreditLimitField : NullableInt32FieldExpression<Person>
        {
            #region constructors
            public CreditLimitField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(int? value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(AnyElement<int?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region year of last credit limit review field expression
        public sealed partial class YearOfLastCreditLimitReviewField : NullableInt32FieldExpression<Person>
        {
            #region constructors
            public YearOfLastCreditLimitReviewField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(int? value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(AnyElement<int?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region registration date field expression
        public sealed partial class RegistrationDateField : DateTimeOffsetFieldExpression<Person>
        {
            #region constructors
            public RegistrationDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTimeOffset>(value));
            public AssignmentExpression Set(DateTimeOffset value) => new AssignmentExpression(this, new LiteralExpression<DateTimeOffset>(value, this));
            public AssignmentExpression Set(AnyElement<DateTimeOffset> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region last login date field expression
        public sealed partial class LastLoginDateField : NullableDateTimeOffsetFieldExpression<Person>
        {
            #region constructors
            public LastLoginDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTimeOffset?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<DateTimeOffset?>(value, this));
            public AssignmentExpression Set(DateTimeOffset? value) => new AssignmentExpression(this, new LiteralExpression<DateTimeOffset?>(value, this));
            public AssignmentExpression Set(AnyElement<DateTimeOffset?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(DateTimeOffset value) => new AssignmentExpression(this, new LiteralExpression<DateTimeOffset>(value, this));
            public AssignmentExpression Set(AnyElement<DateTimeOffset> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<Person>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<Person>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region person address entity expression
    public sealed partial class PersonAddressEntity : EntityExpression<PersonAddress>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.IdField"/> representing the "dbo.Person_Address.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.PersonIdField"/> representing the "dbo.Person_Address.PersonId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.PersonIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PersonId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonIdField PersonId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.AddressIdField"/> representing the "dbo.Person_Address.AddressId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.AddressIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>AddressId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly AddressIdField AddressId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.DateCreatedField"/> representing the "dbo.Person_Address.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PersonAddressEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PersonAddressEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(30, "Id", this));
            AddField(PersonId = new PersonIdField(31, "PersonId", this));
            AddField(AddressId = new AddressIdField(32, "AddressId", this));
            AddField(DateCreated = new DateCreatedField(33, "DateCreated", this));
        }
        #endregion

        #region methods
        public PersonAddressEntity As(string dbex_alias)
            => new PersonAddressEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<int>(PersonId)
                    ,new SelectExpression<int>(AddressId)
                    ,new SelectExpression<DateTime>(DateCreated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(PersonId));
            set &= aliased != nameof(PersonId) ? new SelectExpression<int>(PersonId, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(AddressId));
            set &= aliased != nameof(AddressId) ? new SelectExpression<int>(AddressId, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[3];
            return set;
        }
		
        protected override InsertExpressionSet<PersonAddress> GetInclusiveInsertExpression(PersonAddress dbex_name)
        {
            return new InsertExpressionSet<PersonAddress>(dbex_name 
                ,new InsertExpression<int>(dbex_name.PersonId, PersonId)
                ,new InsertExpression<int>(dbex_name.AddressId, AddressId)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(PersonAddress target, PersonAddress source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(PersonAddressEntity.PersonIdField)) && target.PersonId != source.PersonId) { expr &= PersonId.Set(source.PersonId); }
            if (!exclusions.Contains(typeof(PersonAddressEntity.AddressIdField)) && target.AddressId != source.AddressId) { expr &= AddressId.Set(source.AddressId); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, PersonAddress dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.PersonId = reader.ReadField()!.GetValue<int>();
            dbex_name.AddressId = reader.ReadField()!.GetValue<int>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<PersonAddress>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region person id field expression
        public sealed partial class PersonIdField : Int32FieldExpression<PersonAddress>
        {
            #region constructors
            public PersonIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region address id field expression
        public sealed partial class AddressIdField : Int32FieldExpression<PersonAddress>
        {
            #region constructors
            public AddressIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<PersonAddress>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region product entity expression
    public sealed partial class ProductEntity : EntityExpression<Product>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.IdField"/> representing the "dbo.Product.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ProductCategoryTypeField"/> representing the "dbo.Product.ProductCategoryType" column in the database, 
        /// with a .NET type of <see cref="Profiling.MsSql.ProductCategoryType"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ProductCategoryTypeField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Profiling.MsSql.ProductCategoryType?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ProductCategoryType</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ProductCategoryTypeField ProductCategoryType;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.NameField"/> representing the "dbo.Product.Name" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.NameField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Name</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(80)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly NameField Name;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.DescriptionField"/> representing the "dbo.Product.Description" column in the database, 
        /// with a .NET type of <see cref="string"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.DescriptionField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Description</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>nvarchar(2000)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DescriptionField Description;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ListPriceField"/> representing the "dbo.Product.ListPrice" column in the database, 
        /// with a .NET type of <see cref="double"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ListPriceField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{double}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ListPrice</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>money</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ListPriceField ListPrice;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.PriceField"/> representing the "dbo.Product.Price" column in the database, 
        /// with a .NET type of <see cref="double"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.PriceField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{double}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Price</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>money</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PriceField Price;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.QuantityField"/> representing the "dbo.Product.Quantity" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.QuantityField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Quantity</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly QuantityField Quantity;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ImageField"/> representing the "dbo.Product.Image" column in the database, 
        /// with a .NET type of <see cref="byte"/>[].  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ImageField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{byte[]?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Image</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varbinary(MAX)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ImageField Image;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.HeightField"/> representing the "dbo.Product.Height" column in the database, 
        /// with a .NET type of <see cref="decimal"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.HeightField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Height</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(4,1)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly HeightField Height;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.WidthField"/> representing the "dbo.Product.Width" column in the database, 
        /// with a .NET type of <see cref="decimal"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.WidthField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Width</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(4,1)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly WidthField Width;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.DepthField"/> representing the "dbo.Product.Depth" column in the database, 
        /// with a .NET type of <see cref="decimal"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.DepthField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Depth</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(4,1)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DepthField Depth;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.WeightField"/> representing the "dbo.Product.Weight" column in the database, 
        /// with a .NET type of <see cref="decimal"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.WeightField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Weight</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(4,1)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly WeightField Weight;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ShippingWeightField"/> representing the "dbo.Product.ShippingWeight" column in the database, 
        /// with a .NET type of <see cref="decimal"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ShippingWeightField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ShippingWeight</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(4,1)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ShippingWeightField ShippingWeight;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ValidStartTimeOfDayForPurchaseField"/> representing the "dbo.Product.ValidStartTimeOfDayForPurchase" column in the database, 
        /// with a .NET type of <see cref="TimeSpan"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ValidStartTimeOfDayForPurchaseField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{TimeSpan?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ValidStartTimeOfDayForPurchase</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>time</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ValidStartTimeOfDayForPurchaseField ValidStartTimeOfDayForPurchase;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.ValidEndTimeOfDayForPurchaseField"/> representing the "dbo.Product.ValidEndTimeOfDayForPurchase" column in the database, 
        /// with a .NET type of <see cref="TimeSpan"/>?.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.ValidEndTimeOfDayForPurchaseField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{TimeSpan?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ValidEndTimeOfDayForPurchase</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>time</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ValidEndTimeOfDayForPurchaseField ValidEndTimeOfDayForPurchase;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.DateCreatedField"/> representing the "dbo.Product.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity.DateUpdatedField"/> representing the "dbo.Product.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.ProductEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public ProductEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private ProductEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(35, "Id", this));
            AddField(ProductCategoryType = new ProductCategoryTypeField(36, "ProductCategoryType", this));
            AddField(Name = new NameField(37, "Name", this));
            AddField(Description = new DescriptionField(38, "Description", this));
            AddField(ListPrice = new ListPriceField(39, "ListPrice", this));
            AddField(Price = new PriceField(40, "Price", this));
            AddField(Quantity = new QuantityField(41, "Quantity", this));
            AddField(Image = new ImageField(42, "Image", this));
            AddField(Height = new HeightField(43, "Height", this));
            AddField(Width = new WidthField(44, "Width", this));
            AddField(Depth = new DepthField(45, "Depth", this));
            AddField(Weight = new WeightField(46, "Weight", this));
            AddField(ShippingWeight = new ShippingWeightField(47, "ShippingWeight", this));
            AddField(ValidStartTimeOfDayForPurchase = new ValidStartTimeOfDayForPurchaseField(48, "ValidStartTimeOfDayForPurchase", this));
            AddField(ValidEndTimeOfDayForPurchase = new ValidEndTimeOfDayForPurchaseField(49, "ValidEndTimeOfDayForPurchase", this));
            AddField(DateCreated = new DateCreatedField(50, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(51, "DateUpdated", this));
        }
        #endregion

        #region methods
        public ProductEntity As(string dbex_alias)
            => new ProductEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<Profiling.MsSql.ProductCategoryType?>(ProductCategoryType)
                    ,new SelectExpression<string>(Name)
                    ,new SelectExpression<string?>(Description)
                    ,new SelectExpression<double>(ListPrice)
                    ,new SelectExpression<double>(Price)
                    ,new SelectExpression<int>(Quantity)
                    ,new SelectExpression<byte[]?>(Image)
                    ,new SelectExpression<decimal?>(Height)
                    ,new SelectExpression<decimal?>(Width)
                    ,new SelectExpression<decimal?>(Depth)
                    ,new SelectExpression<decimal?>(Weight)
                    ,new SelectExpression<decimal>(ShippingWeight)
                    ,new SelectExpression<TimeSpan?>(ValidStartTimeOfDayForPurchase)
                    ,new SelectExpression<TimeSpan?>(ValidEndTimeOfDayForPurchase)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(ProductCategoryType));
            set &= aliased != nameof(ProductCategoryType) ? new SelectExpression<Profiling.MsSql.ProductCategoryType?>(ProductCategoryType, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(Name));
            set &= aliased != nameof(Name) ? new SelectExpression<string>(Name, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(Description));
            set &= aliased != nameof(Description) ? new SelectExpression<string?>(Description, aliased) : GetInclusiveSelectExpressions()[3];
            aliased = dbex_alias(nameof(ListPrice));
            set &= aliased != nameof(ListPrice) ? new SelectExpression<double>(ListPrice, aliased) : GetInclusiveSelectExpressions()[4];
            aliased = dbex_alias(nameof(Price));
            set &= aliased != nameof(Price) ? new SelectExpression<double>(Price, aliased) : GetInclusiveSelectExpressions()[5];
            aliased = dbex_alias(nameof(Quantity));
            set &= aliased != nameof(Quantity) ? new SelectExpression<int>(Quantity, aliased) : GetInclusiveSelectExpressions()[6];
            aliased = dbex_alias(nameof(Image));
            set &= aliased != nameof(Image) ? new SelectExpression<byte[]?>(Image, aliased) : GetInclusiveSelectExpressions()[7];
            aliased = dbex_alias(nameof(Height));
            set &= aliased != nameof(Height) ? new SelectExpression<decimal?>(Height, aliased) : GetInclusiveSelectExpressions()[8];
            aliased = dbex_alias(nameof(Width));
            set &= aliased != nameof(Width) ? new SelectExpression<decimal?>(Width, aliased) : GetInclusiveSelectExpressions()[9];
            aliased = dbex_alias(nameof(Depth));
            set &= aliased != nameof(Depth) ? new SelectExpression<decimal?>(Depth, aliased) : GetInclusiveSelectExpressions()[10];
            aliased = dbex_alias(nameof(Weight));
            set &= aliased != nameof(Weight) ? new SelectExpression<decimal?>(Weight, aliased) : GetInclusiveSelectExpressions()[11];
            aliased = dbex_alias(nameof(ShippingWeight));
            set &= aliased != nameof(ShippingWeight) ? new SelectExpression<decimal>(ShippingWeight, aliased) : GetInclusiveSelectExpressions()[12];
            aliased = dbex_alias(nameof(ValidStartTimeOfDayForPurchase));
            set &= aliased != nameof(ValidStartTimeOfDayForPurchase) ? new SelectExpression<TimeSpan?>(ValidStartTimeOfDayForPurchase, aliased) : GetInclusiveSelectExpressions()[13];
            aliased = dbex_alias(nameof(ValidEndTimeOfDayForPurchase));
            set &= aliased != nameof(ValidEndTimeOfDayForPurchase) ? new SelectExpression<TimeSpan?>(ValidEndTimeOfDayForPurchase, aliased) : GetInclusiveSelectExpressions()[14];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[15];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[16];
            return set;
        }
		
        protected override InsertExpressionSet<Product> GetInclusiveInsertExpression(Product dbex_name)
        {
            return new InsertExpressionSet<Product>(dbex_name 
                ,new InsertExpression<Profiling.MsSql.ProductCategoryType?>(dbex_name.ProductCategoryType, ProductCategoryType)
                ,new InsertExpression<string>(dbex_name.Name, Name)
                ,new InsertExpression<string?>(dbex_name.Description, Description)
                ,new InsertExpression<double>(dbex_name.ListPrice, ListPrice)
                ,new InsertExpression<double>(dbex_name.Price, Price)
                ,new InsertExpression<int>(dbex_name.Quantity, Quantity)
                ,new InsertExpression<byte[]?>(dbex_name.Image, Image)
                ,new InsertExpression<decimal?>(dbex_name.Height, Height)
                ,new InsertExpression<decimal?>(dbex_name.Width, Width)
                ,new InsertExpression<decimal?>(dbex_name.Depth, Depth)
                ,new InsertExpression<decimal?>(dbex_name.Weight, Weight)
                ,new InsertExpression<decimal>(dbex_name.ShippingWeight, ShippingWeight)
                ,new InsertExpression<TimeSpan?>(dbex_name.ValidStartTimeOfDayForPurchase, ValidStartTimeOfDayForPurchase)
                ,new InsertExpression<TimeSpan?>(dbex_name.ValidEndTimeOfDayForPurchase, ValidEndTimeOfDayForPurchase)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(Product target, Product source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(ProductEntity.ProductCategoryTypeField)) && target.ProductCategoryType != source.ProductCategoryType) { expr &= ProductCategoryType.Set(source.ProductCategoryType); }
            if (!exclusions.Contains(typeof(ProductEntity.NameField)) && target.Name != source.Name) { expr &= Name.Set(source.Name); }
            if (!exclusions.Contains(typeof(ProductEntity.DescriptionField)) && target.Description != source.Description) { expr &= Description.Set(source.Description); }
            if (!exclusions.Contains(typeof(ProductEntity.ListPriceField)) && target.ListPrice != source.ListPrice) { expr &= ListPrice.Set(source.ListPrice); }
            if (!exclusions.Contains(typeof(ProductEntity.PriceField)) && target.Price != source.Price) { expr &= Price.Set(source.Price); }
            if (!exclusions.Contains(typeof(ProductEntity.QuantityField)) && target.Quantity != source.Quantity) { expr &= Quantity.Set(source.Quantity); }
            if (!exclusions.Contains(typeof(ProductEntity.ImageField)) && target.Image != source.Image) { expr &= Image.Set(source.Image); }
            if (!exclusions.Contains(typeof(ProductEntity.HeightField)) && target.Height != source.Height) { expr &= Height.Set(source.Height); }
            if (!exclusions.Contains(typeof(ProductEntity.WidthField)) && target.Width != source.Width) { expr &= Width.Set(source.Width); }
            if (!exclusions.Contains(typeof(ProductEntity.DepthField)) && target.Depth != source.Depth) { expr &= Depth.Set(source.Depth); }
            if (!exclusions.Contains(typeof(ProductEntity.WeightField)) && target.Weight != source.Weight) { expr &= Weight.Set(source.Weight); }
            if (!exclusions.Contains(typeof(ProductEntity.ShippingWeightField)) && target.ShippingWeight != source.ShippingWeight) { expr &= ShippingWeight.Set(source.ShippingWeight); }
            if (!exclusions.Contains(typeof(ProductEntity.ValidStartTimeOfDayForPurchaseField)) && target.ValidStartTimeOfDayForPurchase != source.ValidStartTimeOfDayForPurchase) { expr &= ValidStartTimeOfDayForPurchase.Set(source.ValidStartTimeOfDayForPurchase); }
            if (!exclusions.Contains(typeof(ProductEntity.ValidEndTimeOfDayForPurchaseField)) && target.ValidEndTimeOfDayForPurchase != source.ValidEndTimeOfDayForPurchase) { expr &= ValidEndTimeOfDayForPurchase.Set(source.ValidEndTimeOfDayForPurchase); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, Product dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.ProductCategoryType = reader.ReadField()!.GetValue<Profiling.MsSql.ProductCategoryType?>();
            dbex_name.Name = reader.ReadField()!.GetValue<string>();
            dbex_name.Description = reader.ReadField()!.GetValue<string?>();
            dbex_name.ListPrice = reader.ReadField()!.GetValue<double>();
            dbex_name.Price = reader.ReadField()!.GetValue<double>();
            dbex_name.Quantity = reader.ReadField()!.GetValue<int>();
            dbex_name.Image = reader.ReadField()!.GetValue<byte[]?>();
            dbex_name.Height = reader.ReadField()!.GetValue<decimal?>();
            dbex_name.Width = reader.ReadField()!.GetValue<decimal?>();
            dbex_name.Depth = reader.ReadField()!.GetValue<decimal?>();
            dbex_name.Weight = reader.ReadField()!.GetValue<decimal?>();
            dbex_name.ShippingWeight = reader.ReadField()!.GetValue<decimal>();
            dbex_name.ValidStartTimeOfDayForPurchase = reader.ReadField()!.GetValue<TimeSpan?>();
            dbex_name.ValidEndTimeOfDayForPurchase = reader.ReadField()!.GetValue<TimeSpan?>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<Product>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region product category type field expression
        public sealed partial class ProductCategoryTypeField : NullableEnumFieldExpression<Product,Profiling.MsSql.ProductCategoryType>
        {
            #region constructors
            public ProductCategoryTypeField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Profiling.MsSql.ProductCategoryType?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.ProductCategoryType?>(value, this));
            public AssignmentExpression Set(Profiling.MsSql.ProductCategoryType value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.ProductCategoryType>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.ProductCategoryType> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(Profiling.MsSql.ProductCategoryType? value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.ProductCategoryType?>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.ProductCategoryType?> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region name field expression
        public sealed partial class NameField : StringFieldExpression<Product>
        {
            #region constructors
            public NameField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region description field expression
        public sealed partial class DescriptionField : NullableStringFieldExpression<Product>
        {
            #region constructors
            public DescriptionField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<string?>(value, this));
            public AssignmentExpression Set(string? value) => new AssignmentExpression(this, new LiteralExpression<string?>(value, this));
            public AssignmentExpression Set(AnyStringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region list price field expression
        public sealed partial class ListPriceField : DoubleFieldExpression<Product>
        {
            #region constructors
            public ListPriceField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<double>(value));
            public AssignmentExpression Set(double value) => new AssignmentExpression(this, new LiteralExpression<double>(value, this));
            public AssignmentExpression Set(AnyElement<double> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region price field expression
        public sealed partial class PriceField : DoubleFieldExpression<Product>
        {
            #region constructors
            public PriceField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<double>(value));
            public AssignmentExpression Set(double value) => new AssignmentExpression(this, new LiteralExpression<double>(value, this));
            public AssignmentExpression Set(AnyElement<double> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region quantity field expression
        public sealed partial class QuantityField : Int32FieldExpression<Product>
        {
            #region constructors
            public QuantityField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region image field expression
        public sealed partial class ImageField : NullableByteArrayFieldExpression<Product>
        {
            #region constructors
            public ImageField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<byte[]?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<byte[]?>(value, this));
            public AssignmentExpression Set(byte[]? value) => new AssignmentExpression(this, new LiteralExpression<byte[]?>(value, this));
            public AssignmentExpression Set(AnyElement<byte[]?> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region height field expression
        public sealed partial class HeightField : NullableDecimalFieldExpression<Product>
        {
            #region constructors
            public HeightField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(decimal? value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(AnyElement<decimal?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region width field expression
        public sealed partial class WidthField : NullableDecimalFieldExpression<Product>
        {
            #region constructors
            public WidthField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(decimal? value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(AnyElement<decimal?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region depth field expression
        public sealed partial class DepthField : NullableDecimalFieldExpression<Product>
        {
            #region constructors
            public DepthField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(decimal? value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(AnyElement<decimal?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region weight field expression
        public sealed partial class WeightField : NullableDecimalFieldExpression<Product>
        {
            #region constructors
            public WeightField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(decimal? value) => new AssignmentExpression(this, new LiteralExpression<decimal?>(value, this));
            public AssignmentExpression Set(AnyElement<decimal?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region shipping weight field expression
        public sealed partial class ShippingWeightField : DecimalFieldExpression<Product>
        {
            #region constructors
            public ShippingWeightField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal>(value));
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region valid start time of day for purchase field expression
        public sealed partial class ValidStartTimeOfDayForPurchaseField : NullableTimeSpanFieldExpression<Product>
        {
            #region constructors
            public ValidStartTimeOfDayForPurchaseField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<TimeSpan?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan?>(value, this));
            public AssignmentExpression Set(TimeSpan? value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan?>(value, this));
            public AssignmentExpression Set(AnyElement<TimeSpan?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(TimeSpan value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan>(value, this));
            public AssignmentExpression Set(AnyElement<TimeSpan> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region valid end time of day for purchase field expression
        public sealed partial class ValidEndTimeOfDayForPurchaseField : NullableTimeSpanFieldExpression<Product>
        {
            #region constructors
            public ValidEndTimeOfDayForPurchaseField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<TimeSpan?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan?>(value, this));
            public AssignmentExpression Set(TimeSpan? value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan?>(value, this));
            public AssignmentExpression Set(AnyElement<TimeSpan?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(TimeSpan value) => new AssignmentExpression(this, new LiteralExpression<TimeSpan>(value, this));
            public AssignmentExpression Set(AnyElement<TimeSpan> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<Product>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<Product>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region purchase entity expression
    public sealed partial class PurchaseEntity : EntityExpression<Purchase>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.IdField"/> representing the "dbo.Purchase.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PersonIdField"/> representing the "dbo.Purchase.PersonId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PersonIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PersonId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonIdField PersonId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.OrderNumberField"/> representing the "dbo.Purchase.OrderNumber" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.OrderNumberField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>OrderNumber</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(20)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly OrderNumberField OrderNumber;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TotalPurchaseQuantityField"/> representing the "dbo.Purchase.TotalPurchaseQuantity" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TotalPurchaseQuantityField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>TotalPurchaseQuantity</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly TotalPurchaseQuantityField TotalPurchaseQuantity;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TotalPurchaseAmountField"/> representing the "dbo.Purchase.TotalPurchaseAmount" column in the database, 
        /// with a .NET type of <see cref="double"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TotalPurchaseAmountField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{double}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>TotalPurchaseAmount</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>money</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly TotalPurchaseAmountField TotalPurchaseAmount;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PurchaseDateField"/> representing the "dbo.Purchase.PurchaseDate" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PurchaseDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PurchaseDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PurchaseDateField PurchaseDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.ShipDateField"/> representing the "dbo.Purchase.ShipDate" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>?.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.ShipDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ShipDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ShipDateField ShipDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.ExpectedDeliveryDateField"/> representing the "dbo.Purchase.ExpectedDeliveryDate" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>?.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.ExpectedDeliveryDateField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ExpectedDeliveryDate</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ExpectedDeliveryDateField ExpectedDeliveryDate;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TrackingIdentifierField"/> representing the "dbo.Purchase.TrackingIdentifier" column in the database, 
        /// with a .NET type of <see cref="Guid"/>?.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.TrackingIdentifierField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Guid?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>TrackingIdentifier</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>uniqueidentifier</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly TrackingIdentifierField TrackingIdentifier;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PaymentMethodTypeField"/> representing the "dbo.Purchase.PaymentMethodType" column in the database, 
        /// with a .NET type of <see cref="Profiling.MsSql.PaymentMethodType"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PaymentMethodTypeField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Profiling.MsSql.PaymentMethodType}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PaymentMethodType</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(20)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PaymentMethodTypeField PaymentMethodType;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PaymentSourceTypeField"/> representing the "dbo.Purchase.PaymentSourceType" column in the database, 
        /// with a .NET type of <see cref="Profiling.MsSql.PaymentSourceType"/>?.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.PaymentSourceTypeField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{Profiling.MsSql.PaymentSourceType?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PaymentSourceType</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>varchar(20)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PaymentSourceTypeField PaymentSourceType;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.DateCreatedField"/> representing the "dbo.Purchase.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.DateUpdatedField"/> representing the "dbo.Purchase.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PurchaseEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PurchaseEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(53, "Id", this));
            AddField(PersonId = new PersonIdField(54, "PersonId", this));
            AddField(OrderNumber = new OrderNumberField(55, "OrderNumber", this));
            AddField(TotalPurchaseQuantity = new TotalPurchaseQuantityField(56, "TotalPurchaseQuantity", this));
            AddField(TotalPurchaseAmount = new TotalPurchaseAmountField(57, "TotalPurchaseAmount", this));
            AddField(PurchaseDate = new PurchaseDateField(58, "PurchaseDate", this));
            AddField(ShipDate = new ShipDateField(59, "ShipDate", this));
            AddField(ExpectedDeliveryDate = new ExpectedDeliveryDateField(60, "ExpectedDeliveryDate", this));
            AddField(TrackingIdentifier = new TrackingIdentifierField(61, "TrackingIdentifier", this));
            AddField(PaymentMethodType = new PaymentMethodTypeField(62, "PaymentMethodType", this));
            AddField(PaymentSourceType = new PaymentSourceTypeField(63, "PaymentSourceType", this));
            AddField(DateCreated = new DateCreatedField(64, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(65, "DateUpdated", this));
        }
        #endregion

        #region methods
        public PurchaseEntity As(string dbex_alias)
            => new PurchaseEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<int>(PersonId)
                    ,new SelectExpression<string>(OrderNumber)
                    ,new SelectExpression<string>(TotalPurchaseQuantity)
                    ,new SelectExpression<double>(TotalPurchaseAmount)
                    ,new SelectExpression<DateTime>(PurchaseDate)
                    ,new SelectExpression<DateTime?>(ShipDate)
                    ,new SelectExpression<DateTime?>(ExpectedDeliveryDate)
                    ,new SelectExpression<Guid?>(TrackingIdentifier)
                    ,new SelectExpression<Profiling.MsSql.PaymentMethodType>(PaymentMethodType)
                    ,new SelectExpression<Profiling.MsSql.PaymentSourceType?>(PaymentSourceType)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(PersonId));
            set &= aliased != nameof(PersonId) ? new SelectExpression<int>(PersonId, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(OrderNumber));
            set &= aliased != nameof(OrderNumber) ? new SelectExpression<string>(OrderNumber, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(TotalPurchaseQuantity));
            set &= aliased != nameof(TotalPurchaseQuantity) ? new SelectExpression<string>(TotalPurchaseQuantity, aliased) : GetInclusiveSelectExpressions()[3];
            aliased = dbex_alias(nameof(TotalPurchaseAmount));
            set &= aliased != nameof(TotalPurchaseAmount) ? new SelectExpression<double>(TotalPurchaseAmount, aliased) : GetInclusiveSelectExpressions()[4];
            aliased = dbex_alias(nameof(PurchaseDate));
            set &= aliased != nameof(PurchaseDate) ? new SelectExpression<DateTime>(PurchaseDate, aliased) : GetInclusiveSelectExpressions()[5];
            aliased = dbex_alias(nameof(ShipDate));
            set &= aliased != nameof(ShipDate) ? new SelectExpression<DateTime?>(ShipDate, aliased) : GetInclusiveSelectExpressions()[6];
            aliased = dbex_alias(nameof(ExpectedDeliveryDate));
            set &= aliased != nameof(ExpectedDeliveryDate) ? new SelectExpression<DateTime?>(ExpectedDeliveryDate, aliased) : GetInclusiveSelectExpressions()[7];
            aliased = dbex_alias(nameof(TrackingIdentifier));
            set &= aliased != nameof(TrackingIdentifier) ? new SelectExpression<Guid?>(TrackingIdentifier, aliased) : GetInclusiveSelectExpressions()[8];
            aliased = dbex_alias(nameof(PaymentMethodType));
            set &= aliased != nameof(PaymentMethodType) ? new SelectExpression<Profiling.MsSql.PaymentMethodType>(PaymentMethodType, aliased) : GetInclusiveSelectExpressions()[9];
            aliased = dbex_alias(nameof(PaymentSourceType));
            set &= aliased != nameof(PaymentSourceType) ? new SelectExpression<Profiling.MsSql.PaymentSourceType?>(PaymentSourceType, aliased) : GetInclusiveSelectExpressions()[10];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[11];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[12];
            return set;
        }
		
        protected override InsertExpressionSet<Purchase> GetInclusiveInsertExpression(Purchase dbex_name)
        {
            return new InsertExpressionSet<Purchase>(dbex_name 
                ,new InsertExpression<int>(dbex_name.PersonId, PersonId)
                ,new InsertExpression<string>(dbex_name.OrderNumber, OrderNumber)
                ,new InsertExpression<string>(dbex_name.TotalPurchaseQuantity, TotalPurchaseQuantity)
                ,new InsertExpression<double>(dbex_name.TotalPurchaseAmount, TotalPurchaseAmount)
                ,new InsertExpression<DateTime>(dbex_name.PurchaseDate, PurchaseDate)
                ,new InsertExpression<DateTime?>(dbex_name.ShipDate, ShipDate)
                ,new InsertExpression<DateTime?>(dbex_name.ExpectedDeliveryDate, ExpectedDeliveryDate)
                ,new InsertExpression<Guid?>(dbex_name.TrackingIdentifier, TrackingIdentifier)
                ,new InsertExpression<Profiling.MsSql.PaymentMethodType>(dbex_name.PaymentMethodType, PaymentMethodType)
                ,new InsertExpression<Profiling.MsSql.PaymentSourceType?>(dbex_name.PaymentSourceType, PaymentSourceType)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(Purchase target, Purchase source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(PurchaseEntity.PersonIdField)) && target.PersonId != source.PersonId) { expr &= PersonId.Set(source.PersonId); }
            if (!exclusions.Contains(typeof(PurchaseEntity.OrderNumberField)) && target.OrderNumber != source.OrderNumber) { expr &= OrderNumber.Set(source.OrderNumber); }
            if (!exclusions.Contains(typeof(PurchaseEntity.TotalPurchaseQuantityField)) && target.TotalPurchaseQuantity != source.TotalPurchaseQuantity) { expr &= TotalPurchaseQuantity.Set(source.TotalPurchaseQuantity); }
            if (!exclusions.Contains(typeof(PurchaseEntity.TotalPurchaseAmountField)) && target.TotalPurchaseAmount != source.TotalPurchaseAmount) { expr &= TotalPurchaseAmount.Set(source.TotalPurchaseAmount); }
            if (!exclusions.Contains(typeof(PurchaseEntity.PurchaseDateField)) && target.PurchaseDate != source.PurchaseDate) { expr &= PurchaseDate.Set(source.PurchaseDate); }
            if (!exclusions.Contains(typeof(PurchaseEntity.ShipDateField)) && target.ShipDate != source.ShipDate) { expr &= ShipDate.Set(source.ShipDate); }
            if (!exclusions.Contains(typeof(PurchaseEntity.ExpectedDeliveryDateField)) && target.ExpectedDeliveryDate != source.ExpectedDeliveryDate) { expr &= ExpectedDeliveryDate.Set(source.ExpectedDeliveryDate); }
            if (!exclusions.Contains(typeof(PurchaseEntity.TrackingIdentifierField)) && target.TrackingIdentifier != source.TrackingIdentifier) { expr &= TrackingIdentifier.Set(source.TrackingIdentifier); }
            if (!exclusions.Contains(typeof(PurchaseEntity.PaymentMethodTypeField)) && target.PaymentMethodType != source.PaymentMethodType) { expr &= PaymentMethodType.Set(source.PaymentMethodType); }
            if (!exclusions.Contains(typeof(PurchaseEntity.PaymentSourceTypeField)) && target.PaymentSourceType != source.PaymentSourceType) { expr &= PaymentSourceType.Set(source.PaymentSourceType); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, Purchase dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.PersonId = reader.ReadField()!.GetValue<int>();
            dbex_name.OrderNumber = reader.ReadField()!.GetValue<string>();
            dbex_name.TotalPurchaseQuantity = reader.ReadField()!.GetValue<string>();
            dbex_name.TotalPurchaseAmount = reader.ReadField()!.GetValue<double>();
            dbex_name.PurchaseDate = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.ShipDate = reader.ReadField()!.GetValue<DateTime?>();
            dbex_name.ExpectedDeliveryDate = reader.ReadField()!.GetValue<DateTime?>();
            dbex_name.TrackingIdentifier = reader.ReadField()!.GetValue<Guid?>();
            dbex_name.PaymentMethodType = reader.ReadField()!.GetValue<Profiling.MsSql.PaymentMethodType>();
            dbex_name.PaymentSourceType = reader.ReadField()!.GetValue<Profiling.MsSql.PaymentSourceType?>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<Purchase>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region person id field expression
        public sealed partial class PersonIdField : Int32FieldExpression<Purchase>
        {
            #region constructors
            public PersonIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region order number field expression
        public sealed partial class OrderNumberField : StringFieldExpression<Purchase>
        {
            #region constructors
            public OrderNumberField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region total purchase quantity field expression
        public sealed partial class TotalPurchaseQuantityField : StringFieldExpression<Purchase>
        {
            #region constructors
            public TotalPurchaseQuantityField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region total purchase amount field expression
        public sealed partial class TotalPurchaseAmountField : DoubleFieldExpression<Purchase>
        {
            #region constructors
            public TotalPurchaseAmountField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<double>(value));
            public AssignmentExpression Set(double value) => new AssignmentExpression(this, new LiteralExpression<double>(value, this));
            public AssignmentExpression Set(AnyElement<double> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region purchase date field expression
        public sealed partial class PurchaseDateField : DateTimeFieldExpression<Purchase>
        {
            #region constructors
            public PurchaseDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region ship date field expression
        public sealed partial class ShipDateField : NullableDateTimeFieldExpression<Purchase>
        {
            #region constructors
            public ShipDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(DateTime? value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region expected delivery date field expression
        public sealed partial class ExpectedDeliveryDateField : NullableDateTimeFieldExpression<Purchase>
        {
            #region constructors
            public ExpectedDeliveryDateField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(DateTime? value) => new AssignmentExpression(this, new LiteralExpression<DateTime?>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region tracking identifier field expression
        public sealed partial class TrackingIdentifierField : NullableGuidFieldExpression<Purchase>
        {
            #region constructors
            public TrackingIdentifierField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Guid?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<Guid?>(value, this));
            public AssignmentExpression Set(Guid? value) => new AssignmentExpression(this, new LiteralExpression<Guid?>(value, this));
            public AssignmentExpression Set(AnyElement<Guid?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(Guid value) => new AssignmentExpression(this, new LiteralExpression<Guid>(value, this));
            public AssignmentExpression Set(AnyElement<Guid> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region payment method type field expression
        public sealed partial class PaymentMethodTypeField : EnumFieldExpression<Purchase,Profiling.MsSql.PaymentMethodType>
        {
            #region constructors
            public PaymentMethodTypeField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Profiling.MsSql.PaymentMethodType>(value));
            public AssignmentExpression Set(Profiling.MsSql.PaymentMethodType value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.PaymentMethodType>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.PaymentMethodType> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region payment source type field expression
        public sealed partial class PaymentSourceTypeField : NullableEnumFieldExpression<Purchase,Profiling.MsSql.PaymentSourceType>
        {
            #region constructors
            public PaymentSourceTypeField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<Profiling.MsSql.PaymentSourceType?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.PaymentSourceType?>(value, this));
            public AssignmentExpression Set(Profiling.MsSql.PaymentSourceType value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.PaymentSourceType>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.PaymentSourceType> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(Profiling.MsSql.PaymentSourceType? value) => new AssignmentExpression(this, new LiteralExpression<Profiling.MsSql.PaymentSourceType?>(value, this));
            public AssignmentExpression Set(AnyElement<Profiling.MsSql.PaymentSourceType?> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<Purchase>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<Purchase>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region purchase line entity expression
    public sealed partial class PurchaseLineEntity : EntityExpression<PurchaseLine>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.IdField"/> representing the "dbo.PurchaseLine.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>identity</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.PurchaseIdField"/> representing the "dbo.PurchaseLine.PurchaseId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.PurchaseIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PurchaseId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PurchaseIdField PurchaseId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.ProductIdField"/> representing the "dbo.PurchaseLine.ProductId" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.ProductIdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>ProductId</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly ProductIdField ProductId;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.PurchasePriceField"/> representing the "dbo.PurchaseLine.PurchasePrice" column in the database, 
        /// with a .NET type of <see cref="decimal"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.PurchasePriceField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{decimal}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PurchasePrice</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>decimal(12,2)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PurchasePriceField PurchasePrice;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.QuantityField"/> representing the "dbo.PurchaseLine.Quantity" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.QuantityField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Quantity</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly QuantityField Quantity;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.DateCreatedField"/> representing the "dbo.PurchaseLine.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.DateUpdatedField"/> representing the "dbo.PurchaseLine.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PurchaseLineEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PurchaseLineEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(67, "Id", this));
            AddField(PurchaseId = new PurchaseIdField(68, "PurchaseId", this));
            AddField(ProductId = new ProductIdField(69, "ProductId", this));
            AddField(PurchasePrice = new PurchasePriceField(70, "PurchasePrice", this));
            AddField(Quantity = new QuantityField(71, "Quantity", this));
            AddField(DateCreated = new DateCreatedField(72, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(73, "DateUpdated", this));
        }
        #endregion

        #region methods
        public PurchaseLineEntity As(string dbex_alias)
            => new PurchaseLineEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<int>(PurchaseId)
                    ,new SelectExpression<int>(ProductId)
                    ,new SelectExpression<decimal>(PurchasePrice)
                    ,new SelectExpression<int>(Quantity)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(PurchaseId));
            set &= aliased != nameof(PurchaseId) ? new SelectExpression<int>(PurchaseId, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(ProductId));
            set &= aliased != nameof(ProductId) ? new SelectExpression<int>(ProductId, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(PurchasePrice));
            set &= aliased != nameof(PurchasePrice) ? new SelectExpression<decimal>(PurchasePrice, aliased) : GetInclusiveSelectExpressions()[3];
            aliased = dbex_alias(nameof(Quantity));
            set &= aliased != nameof(Quantity) ? new SelectExpression<int>(Quantity, aliased) : GetInclusiveSelectExpressions()[4];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[5];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[6];
            return set;
        }
		
        protected override InsertExpressionSet<PurchaseLine> GetInclusiveInsertExpression(PurchaseLine dbex_name)
        {
            return new InsertExpressionSet<PurchaseLine>(dbex_name 
                ,new InsertExpression<int>(dbex_name.PurchaseId, PurchaseId)
                ,new InsertExpression<int>(dbex_name.ProductId, ProductId)
                ,new InsertExpression<decimal>(dbex_name.PurchasePrice, PurchasePrice)
                ,new InsertExpression<int>(dbex_name.Quantity, Quantity)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(PurchaseLine target, PurchaseLine source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(PurchaseLineEntity.PurchaseIdField)) && target.PurchaseId != source.PurchaseId) { expr &= PurchaseId.Set(source.PurchaseId); }
            if (!exclusions.Contains(typeof(PurchaseLineEntity.ProductIdField)) && target.ProductId != source.ProductId) { expr &= ProductId.Set(source.ProductId); }
            if (!exclusions.Contains(typeof(PurchaseLineEntity.PurchasePriceField)) && target.PurchasePrice != source.PurchasePrice) { expr &= PurchasePrice.Set(source.PurchasePrice); }
            if (!exclusions.Contains(typeof(PurchaseLineEntity.QuantityField)) && target.Quantity != source.Quantity) { expr &= Quantity.Set(source.Quantity); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, PurchaseLine dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.PurchaseId = reader.ReadField()!.GetValue<int>();
            dbex_name.ProductId = reader.ReadField()!.GetValue<int>();
            dbex_name.PurchasePrice = reader.ReadField()!.GetValue<decimal>();
            dbex_name.Quantity = reader.ReadField()!.GetValue<int>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<PurchaseLine>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region purchase id field expression
        public sealed partial class PurchaseIdField : Int32FieldExpression<PurchaseLine>
        {
            #region constructors
            public PurchaseIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region product id field expression
        public sealed partial class ProductIdField : Int32FieldExpression<PurchaseLine>
        {
            #region constructors
            public ProductIdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region purchase price field expression
        public sealed partial class PurchasePriceField : DecimalFieldExpression<PurchaseLine>
        {
            #region constructors
            public PurchasePriceField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<decimal>(value));
            public AssignmentExpression Set(decimal value) => new AssignmentExpression(this, new LiteralExpression<decimal>(value, this));
            public AssignmentExpression Set(AnyElement<decimal> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region quantity field expression
        public sealed partial class QuantityField : Int32FieldExpression<PurchaseLine>
        {
            #region constructors
            public QuantityField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<PurchaseLine>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<PurchaseLine>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region person total purchases view entity expression
    public sealed partial class PersonTotalPurchasesViewEntity : EntityExpression<PersonTotalPurchasesView>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.IdField"/> representing the "dbo.PersonTotalPurchasesView.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.TotalAmountField"/> representing the "dbo.PersonTotalPurchasesView.TotalAmount" column in the database, 
        /// with a .NET type of <see cref="double"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.TotalAmountField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{double?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>TotalAmount</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>money</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly TotalAmountField TotalAmount;


        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.TotalCountField"/> representing the "dbo.PersonTotalPurchasesView.TotalCount" column in the database, 
        /// with a .NET type of <see cref="int"/>?.  The <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity.TotalCountField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int?}"/>?.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>TotalCount</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>yes</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly TotalCountField TotalCount;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PersonTotalPurchasesViewEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PersonTotalPurchasesViewEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(75, "Id", this));
            AddField(TotalAmount = new TotalAmountField(76, "TotalAmount", this));
            AddField(TotalCount = new TotalCountField(77, "TotalCount", this));
        }
        #endregion

        #region methods
        public PersonTotalPurchasesViewEntity As(string dbex_alias)
            => new PersonTotalPurchasesViewEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<double?>(TotalAmount)
                    ,new SelectExpression<int?>(TotalCount)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(TotalAmount));
            set &= aliased != nameof(TotalAmount) ? new SelectExpression<double?>(TotalAmount, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(TotalCount));
            set &= aliased != nameof(TotalCount) ? new SelectExpression<int?>(TotalCount, aliased) : GetInclusiveSelectExpressions()[2];
            return set;
        }
		
        protected override InsertExpressionSet<PersonTotalPurchasesView> GetInclusiveInsertExpression(PersonTotalPurchasesView dbex_name)
        {
            return new InsertExpressionSet<PersonTotalPurchasesView>(dbex_name 
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(PersonTotalPurchasesView target, PersonTotalPurchasesView source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, PersonTotalPurchasesView dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.TotalAmount = reader.ReadField()!.GetValue<double?>();
            dbex_name.TotalCount = reader.ReadField()!.GetValue<int?>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<PersonTotalPurchasesView>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region total amount field expression
        public sealed partial class TotalAmountField : NullableDoubleFieldExpression<PersonTotalPurchasesView>
        {
            #region constructors
            public TotalAmountField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<double?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<double?>(value, this));
            public AssignmentExpression Set(double? value) => new AssignmentExpression(this, new LiteralExpression<double?>(value, this));
            public AssignmentExpression Set(AnyElement<double?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(double value) => new AssignmentExpression(this, new LiteralExpression<double>(value, this));
            public AssignmentExpression Set(AnyElement<double> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region total count field expression
        public sealed partial class TotalCountField : NullableInt32FieldExpression<PersonTotalPurchasesView>
        {
            #region constructors
            public TotalCountField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int?>(value));
            public AssignmentExpression Set(NullElement value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(int? value) => new AssignmentExpression(this, new LiteralExpression<int?>(value, this));
            public AssignmentExpression Set(AnyElement<int?> value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region get max credit limit less than stored procedure expression
    public sealed partial class GetMaxCreditLimitLessThanStoredProcedure : StoredProcedureExpression
    {
        public GetMaxCreditLimitLessThanStoredProcedure(
            Schema schema
            ,int? CreditLimit
        ) : base(78, "GetMaxCreditLimitLessThan", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(79, "CreditLimit", CreditLimit, ParameterDirection.Input));
        }
    }
    #endregion

    #region get person by id stored procedure expression
    public sealed partial class GetPersonByIdStoredProcedure : StoredProcedureExpression
    {
        public GetPersonByIdStoredProcedure(
            Schema schema
            ,int? Id
        ) : base(80, "GetPersonById", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(81, "Id", Id, ParameterDirection.Input));
        }
    }
    #endregion

    #region get persons with credit limit less than stored procedure expression
    public sealed partial class GetPersonsWithCreditLimitLessThanStoredProcedure : StoredProcedureExpression
    {
        public GetPersonsWithCreditLimitLessThanStoredProcedure(
            Schema schema
            ,int? CreditLimit
        ) : base(82, "GetPersonsWithCreditLimitLessThan", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(83, "CreditLimit", CreditLimit, ParameterDirection.Input));
        }
    }
    #endregion

    #region select person_ as_ dynamic_ with_ input stored procedure expression
    public sealed partial class SelectPerson_As_Dynamic_With_InputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_Dynamic_With_InputStoredProcedure(
            Schema schema
            ,int? P1
        ) : base(84, "SelectPerson_As_Dynamic_With_Input", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(85, "P1", P1, ParameterDirection.Input));
        }
    }
    #endregion

    #region select person_ as_ dynamic_ with_ input_ and_ input output stored procedure expression
    public sealed partial class SelectPerson_As_Dynamic_With_Input_And_InputOutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_Dynamic_With_Input_And_InputOutputStoredProcedure(
            Schema schema
            ,int? P1
            ,int? CreditLimit
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(86, "SelectPerson_As_Dynamic_With_Input_And_InputOutput", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(87, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(88, "CreditLimit", CreditLimit, ParameterDirection.InputOutput));
        }
    }
    #endregion

    #region select person_ as_ dynamic_ with_ input_ and_ output stored procedure expression
    public sealed partial class SelectPerson_As_Dynamic_With_Input_And_OutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_Dynamic_With_Input_And_OutputStoredProcedure(
            Schema schema
            ,int? P1
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(89, "SelectPerson_As_Dynamic_With_Input_And_Output", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(90, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(91, "Count", ParameterDirection.Output));
        }
    }
    #endregion

    #region select person_ as_ dynamic list_ with_ input stored procedure expression
    public sealed partial class SelectPerson_As_DynamicList_With_InputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_DynamicList_With_InputStoredProcedure(
            Schema schema
            ,int? P1
        ) : base(92, "SelectPerson_As_DynamicList_With_Input", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(93, "P1", P1, ParameterDirection.Input));
        }
    }
    #endregion

    #region select person_ as_ dynamic list_ with_ input_ and_ input output stored procedure expression
    public sealed partial class SelectPerson_As_DynamicList_With_Input_And_InputOutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_DynamicList_With_Input_And_InputOutputStoredProcedure(
            Schema schema
            ,int? P1
            ,int? CreditLimit
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(94, "SelectPerson_As_DynamicList_With_Input_And_InputOutput", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(95, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(96, "CreditLimit", CreditLimit, ParameterDirection.InputOutput));
        }
    }
    #endregion

    #region select person_ as_ dynamic list_ with_ input_ and_ output stored procedure expression
    public sealed partial class SelectPerson_As_DynamicList_With_Input_And_OutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPerson_As_DynamicList_With_Input_And_OutputStoredProcedure(
            Schema schema
            ,int? P1
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(97, "SelectPerson_As_DynamicList_With_Input_And_Output", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(98, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(99, "Count", ParameterDirection.Output));
        }
    }
    #endregion

    #region select person id_ as_ scalar value_ with_ input stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValue_With_InputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValue_With_InputStoredProcedure(
            Schema schema
            ,int? P1
        ) : base(100, "SelectPersonId_As_ScalarValue_With_Input", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(101, "P1", P1, ParameterDirection.Input));
        }
    }
    #endregion

    #region select person id_ as_ scalar value_ with_ input_ and_ default_ value stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValue_With_Input_And_Default_ValueStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValue_With_Input_And_Default_ValueStoredProcedure(
            Schema schema
        ) : base(102, "SelectPersonId_As_ScalarValue_With_Input_And_Default_Value", schema)
        { 
        }
    }
    #endregion

    #region select person id_ as_ scalar value_ with_ input_ and_ input output stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValue_With_Input_And_InputOutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValue_With_Input_And_InputOutputStoredProcedure(
            Schema schema
            ,int? P1
            ,int? CreditLimit
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(103, "SelectPersonId_As_ScalarValue_With_Input_And_InputOutput", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(104, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(105, "CreditLimit", CreditLimit, ParameterDirection.InputOutput));
        }
    }
    #endregion

    #region select person id_ as_ scalar value_ with_ input_ and_ output stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValue_With_Input_And_OutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValue_With_Input_And_OutputStoredProcedure(
            Schema schema
            ,int? P1
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(106, "SelectPersonId_As_ScalarValue_With_Input_And_Output", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(107, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(108, "Count", ParameterDirection.Output));
        }
    }
    #endregion

    #region select person id_ as_ scalar value list_ with_ input stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValueList_With_InputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValueList_With_InputStoredProcedure(
            Schema schema
            ,int? P1
        ) : base(109, "SelectPersonId_As_ScalarValueList_With_Input", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(110, "P1", P1, ParameterDirection.Input));
        }
    }
    #endregion

    #region select person id_ as_ scalar value list_ with_ input_ and_ input output stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValueList_With_Input_And_InputOutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValueList_With_Input_And_InputOutputStoredProcedure(
            Schema schema
            ,int? P1
            ,int? CreditLimit
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(111, "SelectPersonId_As_ScalarValueList_With_Input_And_InputOutput", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(112, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(113, "CreditLimit", CreditLimit, ParameterDirection.InputOutput));
        }
    }
    #endregion

    #region select person id_ as_ scalar value list_ with_ input_ and_ output stored procedure expression
    public sealed partial class SelectPersonId_As_ScalarValueList_With_Input_And_OutputStoredProcedure : StoredProcedureExpression
    {
        public SelectPersonId_As_ScalarValueList_With_Input_And_OutputStoredProcedure(
            Schema schema
            ,int? P1
            ,Action<ISqlOutputParameterList> outputParameters
        ) : base(114, "SelectPersonId_As_ScalarValueList_With_Input_And_Output", schema, outputParameters)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(115, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(116, "Count", ParameterDirection.Output));
        }
    }
    #endregion

    #region set credit limit for person stored procedure expression
    public sealed partial class SetCreditLimitForPersonStoredProcedure : StoredProcedureExpression
    {
        public SetCreditLimitForPersonStoredProcedure(
            Schema schema
            ,int? Id
            ,int? CreditLimit
        ) : base(117, "SetCreditLimitForPerson", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(118, "Id", Id, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(119, "CreditLimit", CreditLimit, ParameterDirection.Input));
        }
    }
    #endregion

    #region update person credit limit_ with_ inputs stored procedure expression
    public sealed partial class UpdatePersonCreditLimit_With_InputsStoredProcedure : StoredProcedureExpression
    {
        public UpdatePersonCreditLimit_With_InputsStoredProcedure(
            Schema schema
            ,int? P1
            ,int? CreditLimit
        ) : base(120, "UpdatePersonCreditLimit_With_Inputs", schema)
        { 
            Attributes.Parameters.Add(new ParameterExpression<int?>(121, "P1", P1, ParameterDirection.Input));
            Attributes.Parameters.Add(new ParameterExpression<int?>(122, "CreditLimit", CreditLimit, ParameterDirection.Input));
        }
    }
    #endregion

    #region dbo
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
#pragma warning disable IDE1006 // Naming Styles
    public sealed partial class dbo
#pragma warning restore IDE1006 // Naming Styles
#pragma warning restore CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    {
        private static dboSchemaExpression? dbex_schema;

        #region interface
        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AccessAuditLogEntity"/> representing the "dbo.AccessAuditLog" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>AccessAuditLog</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_AccessAuditLog
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static AccessAuditLogEntity AccessAuditLog { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.AddressEntity"/> representing the "dbo.Address" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Address</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_Address
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static AddressEntity Address { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonEntity"/> representing the "dbo.Person" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Person</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_Person
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PersonEntity Person { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonAddressEntity"/> representing the "dbo.Person_Address" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Person_Address</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_Person_Address
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PersonAddressEntity PersonAddress { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.ProductEntity"/> representing the "dbo.Product" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Product</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_Product
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static ProductEntity Product { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseEntity"/> representing the "dbo.Purchase" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Purchase</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_Purchase
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PurchaseEntity Purchase { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PurchaseLineEntity"/> representing the "dbo.PurchaseLine" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PurchaseLine</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_PurchaseLine
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PurchaseLineEntity PurchaseLine { get; private set; } = null!;

        /// <summary>A <see cref="Profiling.MsSql.dboDataService.PersonTotalPurchasesViewEntity"/> representing the "dbo.PersonTotalPurchasesView" view in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>PersonTotalPurchasesView</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PersonTotalPurchasesViewEntity PersonTotalPurchasesView { get; private set; } = null!;

        #endregion

        #region use schema
        public static void UseSchema(dboSchemaExpression dbex_schema)
        { 
            if (dbex_schema == null)
                 throw new ArgumentNullException(nameof(dbex_schema));

            dbo.dbex_schema = dbex_schema;

            AccessAuditLog = dbex_schema.AccessAuditLog;
            Address = dbex_schema.Address;
            Person = dbex_schema.Person;
            PersonAddress = dbex_schema.PersonAddress;
            Product = dbex_schema.Product;
            Purchase = dbex_schema.Purchase;
            PurchaseLine = dbex_schema.PurchaseLine;
            PersonTotalPurchasesView = dbex_schema.PersonTotalPurchasesView;
        }
        #endregion
    }
    #endregion
}

namespace Profiling.MsSql.secDataService
{
	using Profiling.MsSql.secData;
	using System.Data;

    #region sec schema expression
    public sealed partial class secSchemaExpression : SchemaExpression
    {
        #region interface
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly PersonEntity Person;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public secSchemaExpression(int dbex_identifier, string dbex_name, Type dbex_schemaType) : base(dbex_identifier, dbex_name, dbex_schemaType)
        {
            AddEntity(Person = new PersonEntity(124, "Person", this));
        }
        #endregion
    }
    #endregion

    #region person entity expression
    public sealed partial class PersonEntity : EntityExpression<Person>
    {
        #region internals
        private List<SelectExpression>? _inclusiveSelectExpressions;
        private SelectExpressionSet? _inclusiveSelectExpressionSet;
        #endregion

        #region interface

        /// <summary>A <see cref="Profiling.MsSql.secDataService.PersonEntity.IdField"/> representing the "sec.Person.Id" column in the database, 
        /// with a .NET type of <see cref="int"/>.  The <see cref="Profiling.MsSql.secDataService.PersonEntity.IdField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{int}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Id</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>int</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly IdField Id;


        /// <summary>A <see cref="Profiling.MsSql.secDataService.PersonEntity.SocialSecurityNumberField"/> representing the "sec.Person.SSN" column in the database, 
        /// with a .NET type of <see cref="string"/>.  The <see cref="Profiling.MsSql.secDataService.PersonEntity.SocialSecurityNumberField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{string}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>SSN</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>char(11)</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly SocialSecurityNumberField SocialSecurityNumber;


        /// <summary>A <see cref="Profiling.MsSql.secDataService.PersonEntity.DateCreatedField"/> representing the "sec.Person.DateCreated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.secDataService.PersonEntity.DateCreatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateCreated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateCreatedField DateCreated;


        /// <summary>A <see cref="Profiling.MsSql.secDataService.PersonEntity.DateUpdatedField"/> representing the "sec.Person.DateUpdated" column in the database, 
        /// with a .NET type of <see cref="DateTime"/>.  The <see cref="Profiling.MsSql.secDataService.PersonEntity.DateUpdatedField"/> can be 
        /// used with any operation accepting a <see cref="DbExpression.Sql.AnyElement{DateTime}"/>.
        /// <para>Database Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>DateUpdated</description>
        /// </item>
        /// <item>
        /// <term>sql type</term><description>datetime</description>
        /// </item>
        /// <item>
        /// <term>allow null</term><description>no</description>
        /// </item>
        /// <item>
        /// <term>default</term><description>(getdate())</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly DateUpdatedField DateUpdated;

        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public PersonEntity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {
        }

        private PersonEntity(int dbex_identifier, string dbex_name, Schema dbex_schema, string? dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {
            AddField(Id = new IdField(125, "Id", this));
            AddField(SocialSecurityNumber = new SocialSecurityNumberField(126, "SocialSecurityNumber", this));
            AddField(DateCreated = new DateCreatedField(127, "DateCreated", this));
            AddField(DateUpdated = new DateUpdatedField(128, "DateUpdated", this));
        }
        #endregion

        #region methods
        public PersonEntity As(string dbex_alias)
            => new PersonEntity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {
                    new SelectExpression<int>(Id)
                    ,new SelectExpression<string>(SocialSecurityNumber)
                    ,new SelectExpression<DateTime>(DateCreated)
                    ,new SelectExpression<DateTime>(DateUpdated)
                }
            );
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet? set = null;
            string? aliased = null;

            aliased = dbex_alias(nameof(Id));
            set &= aliased != nameof(Id) ? new SelectExpression<int>(Id, aliased) : GetInclusiveSelectExpressions()[0];
            aliased = dbex_alias(nameof(SocialSecurityNumber));
            set &= aliased != nameof(SocialSecurityNumber) ? new SelectExpression<string>(SocialSecurityNumber, aliased) : GetInclusiveSelectExpressions()[1];
            aliased = dbex_alias(nameof(DateCreated));
            set &= aliased != nameof(DateCreated) ? new SelectExpression<DateTime>(DateCreated, aliased) : GetInclusiveSelectExpressions()[2];
            aliased = dbex_alias(nameof(DateUpdated));
            set &= aliased != nameof(DateUpdated) ? new SelectExpression<DateTime>(DateUpdated, aliased) : GetInclusiveSelectExpressions()[3];
            return set;
        }
		
        protected override InsertExpressionSet<Person> GetInclusiveInsertExpression(Person dbex_name)
        {
            return new InsertExpressionSet<Person>(dbex_name 
                ,new InsertExpression<int>(dbex_name.Id, Id)
                ,new InsertExpression<string>(dbex_name.SocialSecurityNumber, SocialSecurityNumber)
            );
        }

        protected override AssignmentExpressionSet GetAssignmentExpression(Person target, Person source, IEnumerable<Type> exclusions)
        {
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            if (!exclusions.Contains(typeof(PersonEntity.IdField)) && target.Id != source.Id) { expr &= Id.Set(source.Id); }
            if (!exclusions.Contains(typeof(PersonEntity.SocialSecurityNumberField)) && target.SocialSecurityNumber != source.SocialSecurityNumber) { expr &= SocialSecurityNumber.Set(source.SocialSecurityNumber); }
            return expr;
        }

        protected override void HydrateEntity(ISqlFieldReader reader, Person dbex_name)
        {
            dbex_name.Id = reader.ReadField()!.GetValue<int>();
            dbex_name.SocialSecurityNumber = reader.ReadField()!.GetValue<string>();
            dbex_name.DateCreated = reader.ReadField()!.GetValue<DateTime>();
            dbex_name.DateUpdated = reader.ReadField()!.GetValue<DateTime>();
        }
		#endregion

        #region classes
        #region id field expression
        public sealed partial class IdField : Int32FieldExpression<Person>
        {
            #region constructors
            public IdField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<int>(value));
            public AssignmentExpression Set(int value) => new AssignmentExpression(this, new LiteralExpression<int>(value, this));
            public AssignmentExpression Set(AnyElement<int> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region social security number field expression
        public sealed partial class SocialSecurityNumberField : StringFieldExpression<Person>
        {
            #region constructors
            public SocialSecurityNumberField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<string>(value));
            public AssignmentExpression Set(string value) => new AssignmentExpression(this, new LiteralExpression<string>(value, this));
            public AssignmentExpression Set(StringElement value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date created field expression
        public sealed partial class DateCreatedField : DateTimeFieldExpression<Person>
        {
            #region constructors
            public DateCreatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #region date updated field expression
        public sealed partial class DateUpdatedField : DateTimeFieldExpression<Person>
        {
            #region constructors
            public DateUpdatedField(int dbex_identifier, string dbex_name, Table dbex_entity) : base(dbex_identifier, dbex_name, dbex_entity)
            {

            }
            #endregion

            #region set
            public AssignmentExpression Set((string TableName, string FieldName) value) => new AssignmentExpression(this, new AliasExpression<DateTime>(value));
            public AssignmentExpression Set(DateTime value) => new AssignmentExpression(this, new LiteralExpression<DateTime>(value, this));
            public AssignmentExpression Set(AnyElement<DateTime> value) => new AssignmentExpression(this, value);
            #endregion
        }
        #endregion

        #endregion
    }
    #endregion

    #region sec
#pragma warning disable CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
#pragma warning disable IDE1006 // Naming Styles
    public sealed partial class sec
#pragma warning restore IDE1006 // Naming Styles
#pragma warning restore CS8981 // The type name only contains lower-cased ascii characters. Such names may become reserved for the language.
    {
        private static secSchemaExpression? dbex_schema;

        #region interface
        /// <summary>A <see cref="Profiling.MsSql.secDataService.PersonEntity"/> representing the "sec.Person" table in the database.
        /// <para>Properties:
        /// <list type="table">
        /// <item>
        /// <term>name</term><description>Person</description>
        /// </item>
        /// </list>
        /// </para>
        /// <para>Indexes:</para>
        /// <para>
        /// <list type="bullet">PK_secPerson
        /// <list type="table">
        /// <item>
        /// <term>primary key</term><description>yes</description>
        /// </item>
        /// <item>
        /// <term>columns</term><description>Id</description>
        /// </item>
        /// </list>
        /// </list>
        /// </para>
        /// </summary>
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public static PersonEntity Person { get; private set; } = null!;

        #endregion

        #region use schema
        public static void UseSchema(secSchemaExpression dbex_schema)
        { 
            if (dbex_schema == null)
                 throw new ArgumentNullException(nameof(dbex_schema));

            sec.dbex_schema = dbex_schema;

            Person = dbex_schema.Person;
        }
        #endregion
    }
    #endregion
}

#pragma warning restore IDE1006 // Naming Styles
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
#pragma warning restore CA1034 // Nested types should not be visible
