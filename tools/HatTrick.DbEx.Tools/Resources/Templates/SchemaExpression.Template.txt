using System;

namespace {() => ResolveRootNamespace}DataService
{{
    using HatTrick.DbEx.MsSql.Builder;
    using HatTrick.DbEx.Sql.Configuration;
    using HatTrick.DbEx.Sql;
    using HatTrick.DbEx.Sql.Connection;

    #region db
    public class db : MsSqlExpressionBuilder
    {{
		public static ISqlConnection GetConnection()
        {{
            if (!DbExpression.Configuration.Databases.TryGetValue("{() => ResolveSourceReferenceKey}", out var config))
                throw new DbExpressionConfigurationException($"Metadata for database named '{() => ResolveSourceReferenceKey}' has not been provided.");
            return config.ConnectionFactory.CreateSqlConnection();
        }}
    }}
    #endregion
}}

{#each Schemas}
{#if !($) => IsIgnored}
namespace {() => ResolveRootNamespace}{($) => ResolveName}DataService
{{
    using HatTrick.DbEx.Sql.Expression;
    using System;
    using HatTrick.DbEx.Sql;

    #region {$.Name}
    [Serializable]
    public class {($) => ResolveName}SchemaExpression : SchemaExpression
    {{
        #region internals
		{#each ($) => ResolveConsolidatedTablesAndViews}
		{#if !($) => IsIgnored}
        private const string _{($) => ToCamelCase}EntityName = "{$.Name}";
		{/if}
		{/each}
        #endregion

        #region interface
		{#each ($) => ResolveConsolidatedTablesAndViews}
		{#if !($) => IsIgnored}
        public {($) => ResolveName}Entity {($) => ResolveName} {{ get {{ return Entities[_{($) => ToCamelCase}EntityName] as {($) => ResolveName}Entity; }} }}
		{/if}
		{/each}
        #endregion

        #region constructors
        public {($) => ResolveName}SchemaExpression(Lazy<ISqlSchemaMetadata> metadata) : base("{($) => ResolveName}", metadata, null)
        {{
			{#each ($) => ResolveConsolidatedTablesAndViews}
			{#if !($) => IsIgnored}
            Entities.Add(_{($) => ToCamelCase}EntityName, new {($) => ResolveName}Entity(this, new Lazy<ISqlEntityMetadata>(() => metadata.Value.Entities[_{($) => ToCamelCase}EntityName])));
			{/if}
			{/each}
        }}
        #endregion
    }}
    #endregion
}}
{/if}
{/each}