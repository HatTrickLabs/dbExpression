    #region {($.EntityExpression.Name) => InsertSpaceOnCapitalizationAndToLower}
	public class {$.EntityExpression.Name}EntityMetadata : ISqlEntityMetadata
	{{
        #region interface
        public ISqlSchemaMetadata Schema {{ get; }}
        public string Identifier {{ get; }}
        public string Name {{ get; }}
        public IDictionary<string, ISqlFieldMetadata> Fields {{ get; }} = new Dictionary<string, ISqlFieldMetadata>();
        #endregion
		
        #region constructors
        public {$.EntityExpression.Name}EntityMetadata(ISqlSchemaMetadata schema, string identifier, string name)
        {{
            Schema = schema;
            Identifier = identifier;
            Name = name;
			//TODO: add overload to MsSqlFieldMetadata that accepts name, type, size, precision, and scale...
			{#each $.Items}
			{#if !$.FieldExpression.IsIgnored}
            Fields.Add($"{{identifier}}.{$.Column.Name}", new MsSqlFieldMetadata(this, $"{{identifier}}.{$.Column.Name}", "{$.Column.Name}", SqlDbType.{$.Column.SqlType}, {$.Column.MaxLength}){#if $.Column.IsIdentity} {{ IsIdentity = true }}{/if});
			{/if}
			{/each}
        }}
        #endregion
    }}
    #endregion