        #region sp
        /// <inheritdoc />
        public partial class sp : MsSqlStoredProcedureExpressionBuilder
        {{
            {-#each $.Schemas}
            {?var :schemaName = $.SchemaExpression.Name}
            /// <summary>
            /// Accessors to construct and execute stored procedure query expressions in the {:schemaName} schema.
            /// </summary>
            public partial class {:schemaName}
            {{
                {#each $.StoredProcedures}
                {?var:isFirstParameter = true}
                {>("StoredProcedureExpression.Documentation") => GetTemplatePartial+}
                public static StoredProcedureContinuation {$.StoredProcedureExpression.Name}({#each $.Parameters}{#if $.ParameterExpression.RequiresInput}{#if !:isFirstParameter}, {/if}{?:isFirstParameter = false}{$.ParameterExpression.Type.NullableAlias} {($.ParameterExpression.Name, "@") => TrimStart}{/if}{/each}{#if $.OutputParameters}{#if $.HasInputParameters}, {+/if}Action<ISqlOutputParameterList> outputParameters{/if})
                    => expressionBuilderFactory.CreateStoredProcedureBuilder(configuration, new {$.StoredProcedureExpression.Name}StoredProcedure("{:schemaName}", schemas.Single(s => s.Identifier == "dbo"){#each $.Parameters}{#if $.ParameterExpression.RequiresInput}, {($.ParameterExpression.Name, "@") => TrimStart}{/if}{/each}{#if $.OutputParameters}{#if $.HasInputParameters}, {+/if}outputParameters{/if}));

                {/each}
            }}

            {/each}
        }}
        #endregion