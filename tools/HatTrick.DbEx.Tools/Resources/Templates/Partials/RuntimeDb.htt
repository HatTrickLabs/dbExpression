    #region runtime db
    public abstract class {$.DatabaseExpression.Name}RuntimeSqlDatabase : IRuntimeSqlDatabase
    {{
        #region internals
        protected static RuntimeSqlDatabaseConfiguration config = new RuntimeSqlDatabaseConfiguration();
        protected static MsSqlQueryExpressionBuilderFactory expressionBuilderFactory = new MsSqlQueryExpressionBuilderFactory();
        #endregion

        #region interface
        RuntimeSqlDatabaseConfiguration IRuntimeSqlDatabase.Configuration => config;
        #endregion

        #region methods
        #region select one
        public static SelectEntity<TEntity> SelectOne<TEntity>()
            where TEntity : class, IDbEntity
            => expressionBuilderFactory.CreateSelectEntityBuilder<TEntity>(config);

        public static SelectValue<TEnum> SelectOne<TEnum>(EnumElement<TEnum> field)
            where TEnum : struct, Enum, IComparable
            => expressionBuilderFactory.CreateSelectValueBuilder<TEnum>(config, field);

        public static SelectValue<TEnum?> SelectOne<TEnum>(NullableEnumElement<TEnum> field)
            where TEnum : struct, Enum, IComparable
            => expressionBuilderFactory.CreateSelectValueBuilder<TEnum>(config, field);

        public static SelectValue<object> SelectOne(AnyObjectElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<bool> SelectOne(BooleanElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<bool?> SelectOne(NullableBooleanElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<byte> SelectOne(ByteElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<byte?> SelectOne(NullableByteElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<byte[]> SelectOne(ByteArrayElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<byte[]> SelectOne(NullableByteArrayElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<DateTime> SelectOne(DateTimeElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<DateTime?> SelectOne(NullableDateTimeElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<DateTimeOffset> SelectOne(DateTimeOffsetElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<DateTimeOffset?> SelectOne(NullableDateTimeOffsetElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<decimal> SelectOne(DecimalElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<decimal?> SelectOne(NullableDecimalElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<double> SelectOne(DoubleElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<double?> SelectOne(NullableDoubleElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<Guid> SelectOne(GuidElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<Guid?> SelectOne(NullableGuidElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<short> SelectOne(Int16Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<short?> SelectOne(NullableInt16Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<int> SelectOne(Int32Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<int?> SelectOne(NullableInt32Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<long> SelectOne(Int64Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<long?> SelectOne(NullableInt64Element field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<float> SelectOne(SingleElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<float?> SelectOne(NullableSingleElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<string> SelectOne(StringElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<string> SelectOne(NullableStringElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<TimeSpan> SelectOne(TimeSpanElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<TimeSpan?> SelectOne(NullableTimeSpanElement field)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field);

        public static SelectValue<ExpandoObject> SelectOne(IExpressionElement field1, IExpressionElement field2, params IExpressionElement[] fields)
            => expressionBuilderFactory.CreateSelectValueBuilder(config, field1, field2, fields);
        #endregion

        #region select many
        public static SelectEntities<TEntity> SelectMany<TEntity>()
           where TEntity : class, IDbEntity
           => expressionBuilderFactory.CreateSelectEntitiesBuilder<TEntity>(config);

        public static SelectValues<TEnum> SelectMany<TEnum>(EnumElement<TEnum> field)
            where TEnum : struct, Enum, IComparable
            => expressionBuilderFactory.CreateSelectValuesBuilder<TEnum>(config, field);

        public static SelectValues<TEnum?> SelectMany<TEnum>(NullableEnumElement<TEnum> field)
            where TEnum : struct, Enum, IComparable
            => expressionBuilderFactory.CreateSelectValuesBuilder<TEnum>(config, field);

        public static SelectValues<object> SelectMany(AnyObjectElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<bool> SelectMany(BooleanElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<bool?> SelectMany(NullableBooleanElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<byte> SelectMany(ByteElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<byte?> SelectMany(NullableByteElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<byte[]> SelectMany(ByteArrayElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<byte[]> SelectMany(NullableByteArrayElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<DateTime> SelectMany(DateTimeElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<DateTime?> SelectMany(NullableDateTimeElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<DateTimeOffset> SelectMany(DateTimeOffsetElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<DateTimeOffset?> SelectMany(NullableDateTimeOffsetElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<decimal> SelectMany(DecimalElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<decimal?> SelectMany(NullableDecimalElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<double> SelectMany(DoubleElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<double?> SelectMany(NullableDoubleElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<Guid> SelectMany(GuidElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<Guid?> SelectMany(NullableGuidElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<short> SelectMany(Int16Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<short?> SelectMany(NullableInt16Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<int> SelectMany(Int32Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<int?> SelectMany(NullableInt32Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<long> SelectMany(Int64Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<long?> SelectMany(NullableInt64Element field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<float> SelectMany(SingleElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<float?> SelectMany(NullableSingleElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<string> SelectMany(StringElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<string> SelectMany(NullableStringElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<TimeSpan> SelectMany(TimeSpanElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<TimeSpan?> SelectMany(NullableTimeSpanElement field)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field);

        public static SelectValues<ExpandoObject> SelectMany(AnyElement field1, AnyElement field2, params AnyElement[] fields)
            => expressionBuilderFactory.CreateSelectValuesBuilder(config, field1, field2, fields);
        #endregion

        #region update
        public static UpdateEntities Update(params EntityFieldAssignment[] fields)
            => expressionBuilderFactory.CreateUpdateExpressionBuilder(config, fields);

        public static UpdateEntities Update(IList<EntityFieldAssignment> fields)
            => expressionBuilderFactory.CreateUpdateExpressionBuilder(config, fields);

        public static UpdateEntities<TEntity> Update<TEntity>(TEntity updateValuesInThisEntity, TEntity fromValuesInThisEntity)
            where TEntity : class, IDbEntity
            => expressionBuilderFactory.CreateUpdateExpressionBuilder<TEntity>(config, updateValuesInThisEntity, fromValuesInThisEntity);     
        #endregion

        #region delete
        public static DeleteEntities Delete()
            => expressionBuilderFactory.CreateDeleteExpressionBulder(config);
        #endregion

        #region insert
        public static InsertEntity<TEntity> Insert<TEntity>(TEntity entity)
            where TEntity : class, IDbEntity
            => expressionBuilderFactory.CreateInsertExpressionBuilder(config, entity);

        public static InsertEntities<TEntity> InsertMany<TEntity>(params TEntity[] entities)
            where TEntity : class, IDbEntity
            => expressionBuilderFactory.CreateInsertExpressionBuilder(config, entities);

        public static InsertEntities<TEntity> InsertMany<TEntity>(IList<TEntity> entities)
            where TEntity : class, IDbEntity
            => expressionBuilderFactory.CreateInsertExpressionBuilder(config, entities);
        #endregion

        #region get connection
        public static ISqlConnection GetConnection()
            => new SqlConnector(config.ConnectionFactory);
        #pragma warning disable IDE1006 // Naming Styles
        #pragma warning restore IDE1006 // Naming Styles
        #endregion
        #endregion

{+>("Fx") => GetTemplatePartial+}

{+>("Alias") => GetTemplatePartial+}
    }}
    #endregion