{?var:nullableAnnotation = $.DatabaseExpression.LanguageFeatures.Nullable.Annotation}
{?var:databaseExpressionName = $.DatabaseExpression.Name}    
    #region {:databaseExpressionName}
    public class {:databaseExpressionName} : ISqlDatabaseRuntime, 
        SelectOneInitiation<{:databaseExpressionName}>, 
        SelectManyInitiation<{:databaseExpressionName}>,
        UpdateEntitiesInitiation<{:databaseExpressionName}>,
        DeleteEntitiesInitiation<{:databaseExpressionName}>,
        InsertEntitiesInitiation<{:databaseExpressionName}>
    {{
        #region internals
        private static List<SchemaExpression> _schemas = new List<SchemaExpression>();
        private static SqlDatabaseMetadataProvider _metadata = new SqlDatabaseMetadataProvider(new {:databaseExpressionName}SqlDatabaseMetadata("{:databaseExpressionName}", "{$.Database.Name}"));
       
        private {:databaseExpressionName}StoredProcedures{:nullableAnnotation} _sp;

        private {$.Platform}SqlDatabaseRuntimeConfiguration Configuration {{ get; }}
        #endregion

        #region interface
        public {$.Platform}FunctionExpressionBuilder fx => Configuration.FunctionExpressionBuilder;
        public {:databaseExpressionName}StoredProcedures sp => _sp ?? (_sp = new {:databaseExpressionName}StoredProcedures(this, _schemas));
        #endregion

        #region constructors
        static {:databaseExpressionName}()
        {{
            {#each $.Schemas}
            var {$.SchemaExpression.Name}Schema = new _{$.SchemaExpression.Name}DataService.{$.SchemaExpression.Name}SchemaExpression("{$.Schema.Name}");
            _schemas.Add({$.SchemaExpression.Name}Schema);
            _{$.SchemaExpression.Name}DataService.{$.SchemaExpression.Name}.UseSchema({$.SchemaExpression.Name}Schema);

            {/each}
        }}

        public {:databaseExpressionName}({$.Platform}SqlDatabaseRuntimeConfiguration configuration)
        {{
            Configuration = configuration ?? throw new ArgumentNullException(nameof(configuration));
            if (Configuration.MetadataProvider is null)
                Configuration.MetadataProvider = _metadata;

            Configuration.Validate();
        }}
        #endregion

        #region methods
        void ISqlDatabaseRuntime.InitializeStaticRuntime()
            => {$.DatabaseExpression.AccessorName}.UseDatabase(this);

        #region select one
        /// <summary>
        /// Start constructing a sql SELECT query expression for a single entity.
        /// <para>
        /// To retrieve a <see cref="{$.Documentation.AnyEntityExpression.NamespaceRoot}Data.{$.Documentation.AnyEntityExpression.Name}" />, use a type param of <see cref="{$.Documentation.AnyEntityExpression.NamespaceRoot}Data.{$.Documentation.AnyEntityExpression.Name}" />
        /// </para>
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntity{{{:databaseExpressionName}, TEntity}}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public SelectEntity<{:databaseExpressionName}, TEntity> SelectOne<TEntity>()
            where TEntity : class, IDbEntity, new()
            => Configuration.QueryExpressionBuilder.CreateSelectEntityBuilder<{:databaseExpressionName}, TEntity>(Configuration);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TEnum}}" />
        {#if $.Documentation.AnyEnumColumnExpression}
        {?var:column = $.Documentation.AnyEnumColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="Sql.SelectValue{{{:databaseExpressionName}, TEnum}}"/>, a fluent builder for constructing a sql SELECT query expression for a <typeparamref name="TEntity"/> entity.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public SelectValue<{:databaseExpressionName}, TEnum> SelectOne<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}, TEnum>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="TEnum"/>? value.  
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TEnum}}" />?
        {#if $.Documentation.AnyNullableEnumColumnExpression}
        {?var:column = $.Documentation.AnyNullableEnumColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TEnum}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="TEnum">The type of the Enum to select.</typeparam>
        public SelectValue<{:databaseExpressionName}, TEnum?> SelectOne<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}, TEnum>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, object}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, object>{:nullableAnnotation} SelectOne(ObjectElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="object"/>{:nullableAnnotation} value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, object}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, object{:nullableAnnotation}> SelectOne(NullableObjectElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{{T}}" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, T}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObject<{:databaseExpressionName}, T> SelectOne<T>(ObjectElement<T> element)
            where T : class
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}, T>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <typeparamref name="T"/>{:nullableAnnotation} value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement{{T}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, T}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObject<{:databaseExpressionName}, T{:nullableAnnotation}> SelectOne<T>(NullableObjectElement<T> element)
            where T : class{:nullableAnnotation}
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}, T>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Boolean}}" />
        {#if $.Documentation.AnyColumnOfTypeBoolean}
        {?var:column = $.Documentation.AnyColumnOfTypeBoolean}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, false)
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, bool> SelectOne(AnyElement<bool> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="bool" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Boolean}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableBoolean}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableBoolean}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}""
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, bool?> SelectOne(AnyElement<bool?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte}}" />
        {#if $.Documentation.AnyColumnOfTypeByte}
        {?var:column = $.Documentation.AnyColumnOfTypeByte}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, byte.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, byte> SelectOne(AnyElement<byte> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableByte}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableByte}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, byte?> SelectOne(AnyElement<byte?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="byte" />[] value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte[]}}" />
        {#if $.Documentation.AnyColumnOfTypeByteArray}
        {?var:column = $.Documentation.AnyColumnOfTypeByteArray}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, new byte[0])"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, byte[]> SelectOne(AnyElement<byte[]> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTime}}" />
        {#if $.Documentation.AnyColumnOfTypeDateTime}
        {?var:column = $.Documentation.AnyColumnOfTypeDateTime}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}) or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, DateTime.Now)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, DateTime> SelectOne(AnyElement<DateTime> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTime" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTime}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDateTime}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDateTime}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, DateTime?> SelectOne(AnyElement<DateTime?> field)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, field);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTimeOffset}}" />
        {#if $.Documentation.AnyColumnOfTypeDateTimeOffset}
        {?var:column = $.Documentation.AnyColumnOfTypeDateTimeOffset}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, DateTimeOffset.Now)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, DateTimeOffset> SelectOne(AnyElement<DateTimeOffset> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="DateTimeOffset" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTimeOffset}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDateTimeOffset}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDateTimeOffset}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})" 
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, DateTimeOffset?> SelectOne(AnyElement<DateTimeOffset?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Decimal}}" />
        {#if $.Documentation.AnyColumnOfTypeDecimal}
        {?var:column = $.Documentation.AnyColumnOfTypeDecimal}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, decimal.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, decimal> SelectOne(AnyElement<decimal> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="decimal" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Decimal}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDecimal}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDecimal}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Min({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, decimal?> SelectOne(AnyElement<decimal?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Double}}" />
        {#if $.Documentation.AnyColumnOfTypeDouble}
        {?var:column = $.Documentation.AnyColumnOfTypeDouble}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, double.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, double> SelectOne(AnyElement<double> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="double" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Double}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDouble}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDouble}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Min({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, double?> SelectOne(AnyElement<double?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Guid}}" />
        {#if $.Documentation.AnyColumnOfTypeGuid}
        {?var:column = $.Documentation.AnyColumnOfTypeGuid}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, Guid.Empty)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, Guid> SelectOne(AnyElement<Guid> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="Guid" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Guid}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableGuid}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableGuid}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, Guid?> SelectOne(AnyElement<Guid?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int16}}" />
        {#if $.Documentation.AnyColumnOfTypeInt16}
        {?var:column = $.Documentation.AnyColumnOfTypeInt16}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, short.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, short> SelectOne(AnyElement<short> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="short" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int16}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt16}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt16}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Max({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, short?> SelectOne(AnyElement<short?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int32}}" />?
        {#if $.Documentation.AnyColumnOfTypeInt32}  
        {?var:column = $.Documentation.AnyColumnOfTypeInt32}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Avg({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, int> SelectOne(AnyElement<int> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="int" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int32}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt32}  
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt32}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Avg({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, int?> SelectOne(AnyElement<int?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int64}}" />
        {#if $.Documentation.AnyColumnOfTypeInt64}
        {?var:column = $.Documentation.AnyColumnOfTypeInt64}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, long.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, long> SelectOne(AnyElement<long> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="long" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int64}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt64}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt64}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Max({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, long?> SelectOne(AnyElement<long?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Single}}" />
        {#if $.Documentation.AnyColumnOfTypeSingle}
        {?var:column = $.Documentation.AnyColumnOfTypeSingle}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, float.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, float> SelectOne(AnyElement<float> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="float" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Single}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableSingle}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableSingle}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Max({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, float?> SelectOne(AnyElement<float?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />{:nullableAnnotation} value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, String}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, string> SelectOne(StringElement element) 
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />{:nullableAnnotation} value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, String}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, string{:nullableAnnotation}> SelectOne(NullableStringElement element) 
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="string" />{:nullableAnnotation} value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, String}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, string{:nullableAnnotation}> SelectOne(SelectExpression<string{:nullableAnnotation}> element) 
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" /> value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TimeSpan}}" />
        {#if $.Documentation.AnyColumnOfTypeTimeSpan}
        {?var:column = $.Documentation.AnyColumnOfTypeTimeSpan}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, TimeSpan.MinValue)" or "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name} + DateTime.Now"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, TimeSpan> SelectOne(AnyElement<TimeSpan> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="TimeSpan" />? value.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TimeSpan}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableTimeSpan}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableTimeSpan}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValue{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValue<{:databaseExpressionName}, TimeSpan?> SelectOne(AnyElement<TimeSpan?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValueBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamic{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<{:databaseExpressionName}> SelectOne(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicBuilder<{:databaseExpressionName}>(Configuration, element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamic{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<{:databaseExpressionName}> SelectOne(IEnumerable<AnyElement> elements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicBuilder<{:databaseExpressionName}>(Configuration, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a single <see cref="System.Dynamic.ExpandoObject" /> object.  The properties of the object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamic{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamic<{:databaseExpressionName}> SelectOne(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicBuilder<{:databaseExpressionName}>(Configuration, (elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region select many
        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of entities.
        /// <para>
        /// To retrieve a list of <see cref="{$.Documentation.AnyEntityExpression.NamespaceRoot}Data.{$.Documentation.AnyEntityExpression.Name}" />(s), use a type param of <see cref="{$.Documentation.AnyEntityExpression.NamespaceRoot}Data.{$.Documentation.AnyEntityExpression.Name}" />
        /// </para>
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="SelectEntities{{{:databaseExpressionName}, TEntity}}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        /// <typeparam name="TEntity">The entity type to select.</typeparam>
        public SelectEntities<{:databaseExpressionName}, TEntity> SelectMany<TEntity>()
           where TEntity : class, IDbEntity, new()
           => Configuration.QueryExpressionBuilder.CreateSelectEntitiesBuilder<{:databaseExpressionName}, TEntity>(Configuration);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TEnum}}" />
        {#if $.Documentation.AnyEnumColumnExpression}
        {?var:column = $.Documentation.AnyEnumColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TEnum}}"/>, a fluent builder for constructing a sql SELECT query expression for a list of <typeparamref name="TEntity"/> entities.</returns>
        public SelectValues<{:databaseExpressionName}, TEnum> SelectMany<TEnum>(AnyElement<TEnum> element)
            where TEnum : struct, Enum, IComparable
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}, TEnum>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="TEnum"/>? values.
        /// </summary>
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// <param name="element">An expression of type <see cref="AnyElement{{TEnum}}" />?
        {#if $.Documentation.AnyNullableEnumColumnExpression}
        {?var:column = $.Documentation.AnyNullableEnumColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TEnum}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, TEnum?> SelectMany<TEnum>(AnyElement<TEnum?> element)
            where TEnum : struct, Enum, IComparable
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}, TEnum>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, object}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, object>{:nullableAnnotation} SelectMany(ObjectElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="object"/>{:nullableAnnotation} values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, object}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, object{:nullableAnnotation}> SelectMany(NullableObjectElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="ObjectElement{{T}}" />
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, T}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObjects<{:databaseExpressionName}, T> SelectMany<T>(ObjectElement<T> element)
            where T : class
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}, T>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <typeparamref name="T"/>{:nullableAnnotation} values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="NullableObjectElement{{T}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyObjectColumnExpression}
        {?var:column = $.Documentation.AnyObjectColumnExpression}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}      
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, T}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        /// <typeparam name="T">The type of the object to select.</typeparam>
        public SelectObjects<{:databaseExpressionName}, T{:nullableAnnotation}> SelectMany<T>(NullableObjectElement<T> element)
            where T : class{:nullableAnnotation}
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}, T>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Boolean}}" />
        {#if $.Documentation.AnyColumnOfTypeBoolean}
        {?var:column = $.Documentation.AnyColumnOfTypeBoolean}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, false)
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, bool> SelectMany(AnyElement<bool> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="bool" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Boolean}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableBoolean}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableBoolean}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}""
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, bool?> SelectMany(AnyElement<bool?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte}}" />
        {#if $.Documentation.AnyColumnOfTypeByte}
        {?var:column = $.Documentation.AnyColumnOfTypeByte}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, byte.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, byte> SelectMany(AnyElement<byte> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableByte}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableByte}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, byte?> SelectMany(AnyElement<byte?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="byte" />[] values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Byte[]}}" />
        {#if $.Documentation.AnyColumnOfTypeByteArray}
        {?var:column = $.Documentation.AnyColumnOfTypeByteArray}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, new byte[0])"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, byte[]> SelectMany(AnyElement<byte[]> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTime}}" />
        {#if $.Documentation.AnyColumnOfTypeDateTime}
        {?var:column = $.Documentation.AnyColumnOfTypeDateTime}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}) or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, DateTime.Now)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, DateTime> SelectMany(AnyElement<DateTime> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTime" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTime}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDateTime}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDateTime}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, DateTime?> SelectMany(AnyElement<DateTime?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTimeOffset}}" />
        {#if $.Documentation.AnyColumnOfTypeDateTimeOffset}
        {?var:column = $.Documentation.AnyColumnOfTypeDateTimeOffset}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, DateTimeOffset.Now)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, DateTimeOffset> SelectMany(AnyElement<DateTimeOffset> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="DateTimeOffset" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{DateTimeOffset}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDateTimeOffset}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDateTimeOffset}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.DateAdd(DateParts.Year, 1, {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})" 
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, DateTimeOffset?> SelectMany(AnyElement<DateTimeOffset?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Decimal}}" />
        {#if $.Documentation.AnyColumnOfTypeDecimal}
        {?var:column = $.Documentation.AnyColumnOfTypeDecimal}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, decimal.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, decimal> SelectMany(AnyElement<decimal> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="decimal" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Decimal}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDecimal}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDecimal}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, decimal?> SelectMany(AnyElement<decimal?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Double}}" />
        {#if $.Documentation.AnyColumnOfTypeDouble}
        {?var:column = $.Documentation.AnyColumnOfTypeDouble}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, double.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, double> SelectMany(AnyElement<double> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="double" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Double}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableDouble}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableDouble}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, double?> SelectMany(AnyElement<double?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Guid}}" />
        {#if $.Documentation.AnyColumnOfTypeGuid}
        {?var:column = $.Documentation.AnyColumnOfTypeGuid}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, Guid.Empty)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, Guid> SelectMany(AnyElement<Guid> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="Guid" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Guid}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableGuid}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableGuid}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, Guid?> SelectMany(AnyElement<Guid?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int16}}" />
        {#if $.Documentation.AnyColumnOfTypeInt16}
        {?var:column = $.Documentation.AnyColumnOfTypeInt16}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, short.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, short> SelectMany(AnyElement<short> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="short" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int16}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt16}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt16}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, short?> SelectMany(AnyElement<short?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int32}}" />
        {#if $.Documentation.AnyColumnOfTypeInt32}  
        {?var:column = $.Documentation.AnyColumnOfTypeInt32}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, int> SelectMany(AnyElement<int> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="int" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int32}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt32}  
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt32}
        ///, for example "{:column.Entity.Schema.Name}.:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, int?> SelectMany(AnyElement<int?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int64}}" />
        {#if $.Documentation.AnyColumnOfTypeInt64}
        {?var:column = $.Documentation.AnyColumnOfTypeInt64}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, long.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, long> SelectMany(AnyElement<long> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="long" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Int64}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableInt64}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt64}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, long?> SelectMany(AnyElement<long?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Single}}" />
        {#if $.Documentation.AnyColumnOfTypeSingle}
        {?var:column = $.Documentation.AnyColumnOfTypeSingle}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, float.MinValue)"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, float> SelectMany(AnyElement<float> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="float" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{Single}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableSingle}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableSingle}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, float?> SelectMany(AnyElement<float?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />{:nullableAnnotation} values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, String}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, string> SelectMany(StringElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />{:nullableAnnotation} values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, String}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, string{:nullableAnnotation}> SelectMany(NullableStringElement element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="string" />{:nullableAnnotation} values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{String}}" />{:nullableAnnotation}
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}" or "db.fx.Concat("Value: ", {:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name})"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, String}}"/>{:nullableAnnotation}, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, string{:nullableAnnotation}> SelectMany(SelectExpression<string{:nullableAnnotation}> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" /> values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TimeSpan}}" />
        {#if $.Documentation.AnyColumnOfTypeTimeSpan}
        {?var:column = $.Documentation.AnyColumnOfTypeTimeSpan}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}", "db.fx.IsNull({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}, TimeSpan.MinValue)" or "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name} + DateTime.Now"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, TimeSpan> SelectMany(AnyElement<TimeSpan> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="TimeSpan" />? values.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element">An expression of type <see cref="AnyElement{{TimeSpan}}" />?
        {#if $.Documentation.AnyColumnOfTypeNullableTimeSpan}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableTimeSpan}
        ///, for example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}"
        {/if}
        /// </param>
        /// <returns><see cref="SelectValues{{{:databaseExpressionName}, TValue}}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectValues<{:databaseExpressionName}, TimeSpan?> SelectMany(AnyElement<TimeSpan?> element)
            => Configuration.QueryExpressionBuilder.CreateSelectValuesBuilder<{:databaseExpressionName}>(Configuration, element);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="element1">Any expression</param>
        /// <param name="element2">Any expression</param>
        /// <param name="elements">Any expression</param>
        /// <returns><see cref="SelectDynamics{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<{:databaseExpressionName}> SelectMany(AnyElement element1, AnyElement element2, params AnyElement[] elements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicsBuilder<{:databaseExpressionName}>(Configuration, element1, element2, elements);

        /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression</param>
        /// <returns><see cref="SelectDynamics{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<{:databaseExpressionName}> SelectMany(IEnumerable<AnyElement> elements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicsBuilder<{:databaseExpressionName}>(Configuration, elements);

            /// <summary>
        /// Start constructing a sql SELECT query expression for a list of <see cref="System.Dynamic.ExpandoObject" /> objects.  The dynamic properties of each object are defined by the <see cref="AnyElement" /> method parameters.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/select-transact-sql">Microsoft docs on SELECT</see>
        /// </para>
        /// </summary>
        /// <param name="elements">A list of any expression that is valid for a SELECT query expression.</param>
        /// <param name="additionalElements">Any additional fields to select as part of the SELECT query expression.</param>
        /// <returns><see cref="SelectDynamics{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql SELECT query expression.</returns>
        public SelectDynamics<{:databaseExpressionName}> SelectMany(IEnumerable<AnyElement> elements, params AnyElement[] additionalElements)
            => Configuration.QueryExpressionBuilder.CreateSelectDynamicsBuilder<{:databaseExpressionName}>(Configuration, (elements ?? throw new ArgumentNullException(nameof(elements))).Concat(additionalElements));
        #endregion

        #region update
        /// <summary>
        /// Start constructing a sql UPDATE query expression to update record(s).
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/update-transact-sql">Microsoft docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignment">A <see cref="EntityFieldAssignment" /> assigning a database field/column a new value.  
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        /// For example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}.Set("new value")"
        {/if}
        {#if $.Documentation.AnyColumnOfTypeNullableInt32}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt32}
        /// or "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}.Set({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name} + 10)"
        {/if}
        /// </param>
        /// <param name="assignments">An additional list of <see cref="EntityFieldAssignment" />(s) assigning database fields/columns new values.  </param>
        /// <returns><see cref="UpdateEntities{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public UpdateEntities<{:databaseExpressionName}> Update(EntityFieldAssignment assignment, params EntityFieldAssignment[] assignments)
            => Configuration.QueryExpressionBuilder.CreateUpdateExpressionBuilder<{:databaseExpressionName}>(Configuration, assignment, assignments);

        /// <summary>
        /// Start constructing a sql UPDATE query expression to update records.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-US/sql/t-sql/queries/update-transact-sql">Microsoft docs on UPDATE</see>
        /// </para>
        /// </summary>
        /// <param name="assignments">A list of <see cref="EntityFieldAssignment" />(s) that assign a database field/column a new value.  
        {#if $.Documentation.AnyColumnOfTypeString}
        {?var:column = $.Documentation.AnyColumnOfTypeString}
        /// For example "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}.Set("new value")"
        {/if}
        {#if $.Documentation.AnyColumnOfTypeNullableInt32}
        {?var:column = $.Documentation.AnyColumnOfTypeNullableInt32}
        /// or "{:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name}.Set({:column.Entity.Schema.Name}.{:column.Entity.Name}.{:column.Name} + 10)"
        {/if}
        /// </param>
        /// <returns><see cref="UpdateEntities{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql UPDATE statement.</returns>
        public UpdateEntities<{:databaseExpressionName}> Update(IEnumerable<EntityFieldAssignment> assignments)
            => Configuration.QueryExpressionBuilder.CreateUpdateExpressionBuilder<{:databaseExpressionName}>(Configuration, assignments);   
        #endregion

        #region delete
        /// <summary>
        /// Start constructing a sql DELETE query expression to remove records.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/delete-transact-sql">Microsoft docs on DELETE</see>
        /// </para>
        /// </summary>
        /// <returns><see cref="DeleteEntities{{ {:databaseExpressionName} }}"/>, a fluent builder for constructing a sql DELETE statement.</returns>
        public DeleteEntities<{:databaseExpressionName}> Delete()
            => Configuration.QueryExpressionBuilder.CreateDeleteExpressionBuilder<{:databaseExpressionName}>(Configuration);
        #endregion

        #region insert
        /// <summary>
        /// Start constructing a sql INSERT query expression to insert a record.  Property values from the <paramref name="entity"/> instance are used to create the record values for the INSERT statement. 
        /// <para>
        /// <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql">Microsoft docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entity">The entity supplying the property values.
        /// </param>
        /// <returns><see cref="InsertEntity{{{:databaseExpressionName}, TEntity}}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entity to insert.</typeparam>
        public InsertEntity<{:databaseExpressionName}, TEntity> Insert<TEntity>(TEntity entity)
            where TEntity : class, IDbEntity
            => Configuration.QueryExpressionBuilder.CreateInsertExpressionBuilder<{:databaseExpressionName}, TEntity>(Configuration, entity);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql">Microsoft docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{{{:databaseExpressionName}, TEntity}}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public InsertEntities<{:databaseExpressionName}, TEntity> InsertMany<TEntity>(TEntity entity, params TEntity[] entities)
            where TEntity : class, IDbEntity
            => Configuration.QueryExpressionBuilder.CreateInsertExpressionBuilder<{:databaseExpressionName}, TEntity>(Configuration, entity, entities);

        /// <summary>
        /// Start constructing a sql INSERT query expression to insert one or more record.  The property values from each <paramref name="entities"/> entity instance are used to create the new record values for the INSERT statement.
        /// <para>
        /// <see href="https://docs.microsoft.com/en-us/sql/t-sql/statements/insert-transact-sql">Microsoft docs on INSERT</see>
        /// </para>
        /// </summary>
        /// <param name="entities">A list of entities.
        /// </param>
        /// <returns><see cref="InsertEntities{{{:databaseExpressionName}, TEntity}}"/>, a fluent builder for constructing a sql INSERT statement.</returns>
        /// <typeparam name="TEntity">The entity type of the entities to insert.</typeparam>
        public InsertEntities<{:databaseExpressionName}, TEntity> InsertMany<TEntity>(IEnumerable<TEntity> entities)
            where TEntity : class, IDbEntity
            => Configuration.QueryExpressionBuilder.CreateInsertExpressionBuilder<{:databaseExpressionName}, TEntity>(Configuration, entities);
        #endregion

        #region get connection
        /// <summary>
        /// Creates a connection to the database.
        /// <para>
        /// The connection has not been opened, use <see cref="System.Data.IDbConnection.Open"/> or <see cref="Connection.ISqlConnection.EnsureOpen"/> to ensure an open connection to the database prior to operations like <see cref="System.Data.IDbConnection.BeginTransaction"/>.
        /// </para>
        /// </summary>
        /// <returns><see cref="ISqlConnection"/>, a connection to the database.</returns>
        public ISqlConnection GetConnection()
            => new SqlConnector(Configuration.ConnectionStringFactory, Configuration.ConnectionFactory);
        #endregion
        #endregion

{+>("StoredProcedure") => GetTemplatePartial+}
    }}
    #endregion