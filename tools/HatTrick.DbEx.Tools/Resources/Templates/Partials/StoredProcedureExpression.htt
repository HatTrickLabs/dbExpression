	{?var:procedureName = $.StoredProcedure.Name}
    {?var:procedureExpressionName = $.StoredProcedureExpression.Name}
    #region {(:procedureExpressionName) => InsertSpaceOnCapitalizationAndToLower} stored procedure expression
    public partial class {:procedureExpressionName}StoredProcedure : StoredProcedureExpression
    {{
        public {:procedureExpressionName}StoredProcedure(
            string identifier
            ,SchemaExpression schema
            {#each $.Parameters}
            {#if $.ParameterExpression.RequiresInput}
            ,{$.ParameterExpression.Type.NullableAlias} {($.ParameterExpression.Name, "@") => TrimStart}
            {/if}
            {/each}
            {#if $.HasOutputParameters}
            ,Action<ISqlOutputParameterList> outputParameters
            {/if}
        ) : base(
                $"{{identifier}}.{:procedureName}"
                ,"{:procedureExpressionName}"
                ,schema
                {?var:isFirst = true}
                ,new List<ParameterExpression> 
                {{ 
                    {#each $.Parameters}
                    {+#if !:isFirst},{+/if}{+?:isFirst = false}new ParameterExpression<{$.ParameterExpression.Type.NullableAlias}>($"{{identifier}}.{:procedureName}.{$.Parameter.Name}", "{($.ParameterExpression.Name, "@") => TrimStart}"{#if $.ParameterExpression.RequiresInput}, {($.ParameterExpression.Name, "@") => TrimStart}{/if}, ParameterDirection.{$.ParameterExpression.Direction})
                    {/each}
                }}
                {#if $.HasOutputParameters}
                ,outputParameters
                {/if}
            )
        {{ }}
    }}
    #endregion