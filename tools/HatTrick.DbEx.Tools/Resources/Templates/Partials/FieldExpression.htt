{?var:fieldExpressionTypeName = ($) => BuildFieldExpressionTypeName}
{?var:expressionElementTypeName = ($) => BuildExpressionElementTypeName}
{?var:selectExpressionTypeName = ($) => BuildSelectExpressionTypeName}
        #region {($.FieldExpression.Name) => InsertSpaceOnCapitalizationAndToLower} field expression
        public partial class {$.FieldExpression.Name}Field : {:fieldExpressionTypeName}
        {{
            #region constructors
            public {$.FieldExpression.Name}Field(string identifier, string name, {$.FieldExpression.EntityExpression.Name}Entity entity) : base(identifier, name, entity)
            {{

            }}
            #endregion

            #region set
            {#if !$.Column.IsComputed}
            {#if !$.Column.IsIdentity}
            {#if $.FieldExpression.AllowUpdate}
            public AssignmentExpression Set({$.FieldExpression.Type.Alias} value) => new AssignmentExpression(this, new LiteralExpression<{$.FieldExpression.Type.Alias}>(value, this));
            public AssignmentExpression Set({(:expressionElementTypeName, "?", "") => Replace} value) => new AssignmentExpression(this, value);
            {#if $.FieldExpression.Type.IsNullable}
            public AssignmentExpression Set({$.FieldExpression.Type.NullableAlias} value) => new AssignmentExpression(this, new LiteralExpression<{$.FieldExpression.Type.NullableAlias}>(value, this));
            public AssignmentExpression Set({:expressionElementTypeName} value) => new AssignmentExpression(this, value);
            {/if}
            {/if}
            {/if}
            {#if $.Column.IsNullable}
            public AssignmentExpression Set(DBNull value) => new AssignmentExpression(this, new LiteralExpression<{$.FieldExpression.Type.Alias}>(value, this));
            {/if}
            {/if}
            #endregion
        }}
        #endregion
