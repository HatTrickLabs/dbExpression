{?var:isEnum = $.FieldExpression.Type.IsEnum}
        #region {($.FieldExpression.Name) => InsertSpaceOnCapitalizationAndToLower} field expression
        public partial class {$.FieldExpression.Name}Field : {+#if $.Column.IsNullable}Nullable{/if}{+#if :isEnum}Enum{/if}{+#if !:isEnum}{$.FieldExpression.Type.TypeName}{/if}FieldExpression<{$.FieldExpression.EntityExpression.Name}{#if :isEnum}, {$.FieldExpression.Type.TypeName}{/if}>
        {{
            #region constructors
            public {$.FieldExpression.Name}Field(string identifier, {$.FieldExpression.EntityExpression.Name}Entity entity) : base(identifier, entity)
            {{

            }}

            private {$.FieldExpression.Name}Field(string identifier, EntityExpression entity, string alias) : base(identifier, entity, alias)
            {{

            }}
            #endregion

            #region as
            public override {+#if $.Column.IsNullable}Nullable{/if}{+#if :isEnum}Enum{/if}{+#if !:isEnum}{$.FieldExpression.Type.TypeName}{/if}Element{+#if :isEnum}<{$.FieldExpression.Type.TypeName}>{/if+} As(string alias)
                => new {$.FieldExpression.Name}Field(base.identifier, base.entity, alias);
            #endregion

            #region set
            public AssignmentExpression Set({$.FieldExpression.Type.Alias} value) => new AssignmentExpression(this, new LiteralExpression<{$.FieldExpression.Type.Alias}>(value));
            public AssignmentExpression Set({+#if :isEnum}Enum{/if}{+#if !:isEnum}{$.FieldExpression.Type.TypeName}{/if}Element{+#if :isEnum}<{$.FieldExpression.Type.TypeName}>{/if+} value) => new AssignmentExpression(this, value);
            {#if $.Column.IsNullable}
            {#if $.FieldExpression.Type.IsNullable}
            public AssignmentExpression Set({$.FieldExpression.Type.NullableAlias} value) => new AssignmentExpression(this, new LiteralExpression<{$.FieldExpression.Type.NullableAlias}>(value));
            {/if}
            public AssignmentExpression Set(Nullable{+#if :isEnum}Enum{/if}{+#if !:isEnum}{$.FieldExpression.Type.TypeName}{/if}Element{+#if :isEnum}<{$.FieldExpression.Type.TypeName}>{/if+} value) => new AssignmentExpression(this, value);
            public AssignmentExpression Set(DBNull value) => new AssignmentExpression(this, new LiteralExpression<object>(DBNull.Value));
            {/if}
            #endregion

        }}
        #endregion
