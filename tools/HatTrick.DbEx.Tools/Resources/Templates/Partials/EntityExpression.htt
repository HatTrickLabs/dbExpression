    #region {($) => InsertSpaceOnCapitalizationAndToLower} entity expression
    {?var:table = $}
    {?var:tableName = ($) => ResolveName}
    {?var:columns = Columns.Values}
    public partial class {:tableName}Entity : EntityExpression<{:tableName}>
    {{
        #region interface properties
		{#each Columns.Values}
		{#if !($) => IsIgnored}
        {?var:columnName = ($) => ResolveName}
        public {($, $.IsNullable) => ResolveFieldExpressionTypeName}<{:tableName}{#if ($) => IsEnum}, {($, false) => ResolveClrTypeName} {/if}> {:columnName} {{ get; private set; }}
		{/if}
		{/each}
        #endregion

        #region constructors
        private {($) => ResolveName}Entity() : base(null, null, null)
        {{
        }}

		public {($) => ResolveName}Entity(string identifier, SchemaExpression schema) : this(identifier, schema, null)
        {{
        }}

        private {($) => ResolveName}Entity(string identifier, SchemaExpression schema, string alias) : base(identifier, schema, alias)
        {{
			{#each Columns.Values}
			{#if !($) => IsIgnored}
            {?var:columnName = ($) => ResolveName}
            Fields.Add($"{{identifier}}.{$.Name}", {:columnName} = new {($, $.IsNullable) => ResolveFieldExpressionTypeName}<{:tableName}{#if ($) => IsEnum}, {($, false) => ResolveClrTypeName} {/if}>($"{{identifier}}.{$.Name}", this));
			{/if}
			{/each}
        }}
        #endregion

        #region methods
        public {:tableName}Entity As(string name)
        {{
            return new {:tableName}Entity(this.identifier, this.schema, name);
        }}

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {{
            return new SelectExpressionSet(
				{#each Columns.Values}
				{#if !($) => IsIgnored}
                {($) => ResolveName}{#if !(:columns, $) => IsLast},{/if+}
				{/if}
				{/each}
            );
        }}
		
        protected override InsertExpressionSet<{($) => ResolveName}> GetInclusiveInsertExpression({($) => ResolveName} {($) => ToCamelCase})
        {{
            return new InsertExpressionSet<{($) => ResolveName}>({(:table) => ToCamelCase}, 
				{#each Columns.Values}
				{#if !($) => IsIgnored}
                new InsertExpression<{($, $.IsNullable) => ResolveClrTypeName}>({($) => ResolveName}, {(:table) => ToCamelCase}.{($) => ResolveName}){#if !(:columns, $) => IsLast},{/if+}
				{/if}
				{/each}                
            );
        }}

        protected override AssignmentExpressionSet GetAssignmentExpression({($) => ResolveName} target, {($) => ResolveName} source)
        {{
            AssignmentExpressionSet expr = new AssignmentExpressionSet();

            {#each Columns.Values}
            {#if !($) => IsIgnored}
            {#if !$.IsIdentity}
            if (target.{($) => ResolveName} != source.{($) => ResolveName}) {{ expr &= {($) => ResolveName}.Set(source.{($) => ResolveName}); }}; 
            {/if}
            {/if}
            {/each}

            return expr;
        }}

        protected override void HydrateEntity({($) => ResolveName} {($) => ToCamelCase}, ISqlFieldReader reader)
        {{
			{#each Columns.Values}
			{#if !($) => IsIgnored}
			{(:table) => ToCamelCase}.{($) => ResolveName} = reader.ReadField().GetValue<{($, $.IsNullable) => ResolveClrTypeName}>();
			{/if}
			{/each}
        }}
		#endregion
    }}
    #endregion