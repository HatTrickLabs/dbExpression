    #region {($) => InsertSpaceOnCapitalizationAndToLower} entity expression
    {?var:tableName = ($) => ResolveName}
    public partial class {($) => ResolveName}Entity : EntityExpression<{($) => ResolveName}>
    {{
        #region interface properties
		{#each Columns.Values}
		{#if !($) => IsIgnored}
        public {($, $.IsNullable) => ResolveFieldExpressionTypeName}<{:tableName}{#if ($) => IsEnum}, {($, false) => ResolveClrTypeName} {/if}> {($) => ResolveName} {{ get; private set; }}
		{/if}
		{/each}
        #endregion

        #region constructors
        private {($) => ResolveName}Entity() : base(null, null, null)
        {{
        }}

		public {($) => ResolveName}Entity(string identifier, SchemaExpression schema) : this(identifier, schema, null)
        {{
        }}

        private {($) => ResolveName}Entity(string identifier, SchemaExpression schema, string alias) : base(identifier, schema, alias)
        {{
			{#each Columns.Values}
			{#if !($) => IsIgnored}
            {?var:columnName = ($) => ResolveName}
            Fields.Add($"{{identifier}}.{$.Name}", {:columnName} = new {($, $.IsNullable) => ResolveFieldExpressionTypeName}<{:tableName}{#if ($) => IsEnum}, {($, false) => ResolveClrTypeName} {/if}>($"{{identifier}}.{$.Name}", this));
			{/if}
			{/each}
        }}
        #endregion

        #region methods
        public {($) => ResolveName}Entity As(string name)
        {{
            return new {($) => ResolveName}Entity(this.identifier, this.schema, name);
        }}

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {{
            return new SelectExpressionSet(
				{#each Columns.Values}
				{#if !($) => IsIgnored}
                {($) => ResolveName}{#if !(..\$.Columns.Values, $) => IsLast},{/if}
				{/if}
				{/each}
            );
        }}
		
        protected override InsertExpressionSet<{($) => ResolveName}> GetInclusiveInsertExpression({($) => ResolveName} {($) => ToCamelCase})
        {{
            return new InsertExpressionSet<{($) => ResolveName}>(
				{($) => ToCamelCase},
				{#each Columns.Values}
				{#if !($) => IsIgnored}
                {($) => ResolveName}.Insert({(..\$) => ToCamelCase}.{($) => ResolveName}){#if !(..\$.Columns.Values, $) => IsLast},{/if}
				{/if}
				{/each}
            );
        }}

        protected override AssignmentExpressionSet GetAssignmentExpression({($) => ResolveName} from, {($) => ResolveName} to)
        {{
            AssignmentExpressionSet expr = new AssignmentExpressionSet();

			{#each Columns.Values}
			{#if !($) => IsIgnored}
			{#if !$.IsIdentity}
			{#if ($.Name) => NameRepresentsLastTouchedTimestamp}
            expr &= {($) => ResolveName}.Set(DateTime.UtcNow);
			{/if}
			{#if !($.Name) => NameRepresentsLastTouchedTimestamp}
			if (from.{($) => ResolveName} != to.{($) => ResolveName}) {{ expr &= {($) => ResolveName}.Set(to.{($) => ResolveName}); }}; 
			{/if}
			{/if}
			{/if}
			{/each}
			
            return expr;
        }}

        protected override void HydrateEntity({($) => ResolveName} {($) => ToCamelCase}, ISqlFieldReader reader)
        {{
			{#each Columns.Values}
			{#if !($) => IsIgnored}
			{(..\$) => ToCamelCase}.{($) => ResolveName} = reader.ReadField().GetValue<{($, $.IsNullable) => ResolveClrTypeName}>();
			{/if}
			{/each}
        }}
		#endregion
    }}
    #endregion