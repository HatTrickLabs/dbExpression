{?var:nullableAnnotation = $.EntityExpression.LanguageFeatures.Nullable.Annotation}
{?var:nullableForgivingOperator = $.EntityExpression.LanguageFeatures.Nullable.ForgivingOperator}
    #region {($.EntityExpression.Name) => InsertSpaceOnCapitalizationAndToLower} entity expression
    public sealed partial class {$.EntityExpression.Name}Entity : EntityExpression<{$.EntityExpression.Name}>
    {{
        #region internals
        private List<SelectExpression>{:nullableAnnotation} _inclusiveSelectExpressions;
        private SelectExpressionSet{:nullableAnnotation} _inclusiveSelectExpressionSet;
        #endregion

        #region interface
        {#each $.Columns}
        {>("FieldExpression.Documentation") => GetTemplatePartial+}
#if NETCOREAPP
        [NotNull]
        [DisallowNull]
#endif
        public readonly {$.FieldExpression.Name}Field {$.FieldExpression.Name};

		{/each}
        #endregion

        #region constructors
#if NET7_0_OR_GREATER
        [SetsRequiredMembers]
#endif
        public {$.EntityExpression.Name}Entity(int dbex_identifier, string dbex_name, Schema dbex_schema) : this(dbex_identifier, dbex_name, dbex_schema, null)
        {{
        }}

        private {$.EntityExpression.Name}Entity(int dbex_identifier, string dbex_name, Schema dbex_schema, string{:nullableAnnotation} dbex_alias) : base(dbex_identifier, dbex_name, dbex_schema, dbex_alias)
        {{
            {#each $.Columns}
            AddField({$.FieldExpression.Name} = new {$.FieldExpression.Name}Field({$.Identifier}, "{$.FieldExpression.Name}", this));
            {/each}
        }}
        #endregion

        #region methods
        public {$.EntityExpression.Name}Entity As(string dbex_alias)
            => new {$.EntityExpression.Name}Entity(this.dbex_identifier, this.dbex_name, this.dbex_schema, dbex_alias);

        private List<SelectExpression> GetInclusiveSelectExpressions()
        {{
            {?var :applyComma = false}
            return _inclusiveSelectExpressions ?? (_inclusiveSelectExpressions = new List<SelectExpression>()
                {{
                    {#each $.Columns}
                    {+#if :applyComma},{/if}new {$.FieldExpression.SelectExpressionTypeName}({$.FieldExpression.Name})
                    {? :applyComma = true}
				    {/each}
                }}
            );
        }}

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {{
            return _inclusiveSelectExpressionSet ?? (_inclusiveSelectExpressionSet = new SelectExpressionSet(GetInclusiveSelectExpressions()));
        }}

        protected override SelectExpressionSet GetInclusiveSelectExpression(Func<string, string> dbex_alias)
        {{
            if (dbex_alias is null)
                throw new ArgumentNullException(nameof(dbex_alias));

            SelectExpressionSet{:nullableAnnotation} set = null;
            string{:nullableAnnotation} aliased = null;

            {?var:index = () => Iterator}
            {#each $.Columns}
            aliased = dbex_alias(nameof({$.FieldExpression.Name}));
            set &= aliased != nameof({$.FieldExpression.Name}) ? new {$.FieldExpression.SelectExpressionTypeName}({$.FieldExpression.Name}, aliased) : GetInclusiveSelectExpressions()[{:index.Current}];
            {/each}
            return set;
        }}
		
        protected override InsertExpressionSet<{$.EntityExpression.Name}> GetInclusiveInsertExpression({$.EntityExpression.Name} dbex_name)
        {{
            return new InsertExpressionSet<{$.EntityExpression.Name}>(dbex_name 
                {#each $.Columns}
                {#if !$.Column.IsIdentity}
                {#if !$.Column.IsComputed}
                {#if $.FieldExpression.AllowInsert}
                ,new {$.FieldExpression.InsertExpressionTypeName}(dbex_name.{$.FieldExpression.Name}, {$.FieldExpression.Name})
                {/if}
                {/if}
                {/if}
                {/each}                
            );
        }}

        protected override AssignmentExpressionSet GetAssignmentExpression({$.EntityExpression.Name} target, {$.EntityExpression.Name} source, IEnumerable<Type> exclusions)
        {{
            AssignmentExpressionSet expr = new AssignmentExpressionSet();
            {?var:entityName = $.EntityExpression.Name}
            {#each $.Columns}
            {#if !$.Column.IsIdentity}
            {#if !$.Column.IsComputed}
            {#if $.FieldExpression.AllowUpdate}
            if (!exclusions.Contains(typeof({:entityName}Entity.{$.FieldExpression.Name}Field)) && target.{$.FieldExpression.Name} != source.{$.FieldExpression.Name}) {{ expr &= {$.FieldExpression.Name}.Set(source.{$.FieldExpression.Name}); }}
            {/if}
            {/if}
            {/if}
            {/each}
            return expr;
        }}

        protected override void HydrateEntity(ISqlFieldReader reader, {$.EntityExpression.Name} dbex_name)
        {{
            {#each $.Columns}
            dbex_name.{$.FieldExpression.Name} = reader.ReadField(){:nullableForgivingOperator}.GetValue<{$.FieldExpression.TypeName}>();
            {/each}
        }}
		#endregion

        #region classes
        {#each $.Columns}
        {>("FieldExpression") => GetTemplatePartial+}
        {/each}
        #endregion
    }}
    #endregion