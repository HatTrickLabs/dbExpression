//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using HatTrick.DbEx.MsSql;
using HatTrick.DbEx.Sql;
using System;
using System.Collections.Generic;
using System.Data;
{#each $.Schemas}
using {$.SchemaExpression.NamespaceRoot}DataService;
{/each}
{$.LanguageFeatures.Nullable.Directive}
namespace {$.DatabaseExpression.NamespaceRoot}DataService
{{
    {?var:databaseName = $.DatabaseExpression.Name}
    public class {:databaseName}SqlDatabaseMetadata : ISqlDatabaseMetadata
    {{
        private static readonly Dictionary<int, ISqlMetadata> _metadata = new Dictionary<int, ISqlMetadata>();

        #region interface
        public string Name {{ get; private set; }} = "{$.Database.Name}";
        public IDictionary<int, ISqlMetadata> Metadata => _metadata;
        #endregion

        #region constructors
        static {$.DatabaseExpression.Name}SqlDatabaseMetadata()
        {{
            _metadata.Add({$.Identifier}, new SqlDatabaseMetadata(name:"{:databaseName}"));

            {#each $.Schemas}
            {?var:schemaName = $.Schema.Name}
            #region {:schemaName} schema
            _metadata.Add({$.Identifier}, new SqlSchemaMetadata(name:"{:schemaName}"));
            
            #region {:schemaName} entities
            {#each $.Entities}
            {?var:entityName = $.Entity.Name}
            #region {:schemaName}.{:entityName}
            // {:schemaName}.{:entityName}
            _metadata.Add({$.Identifier}, new SqlTableMetadata(name:"{:entityName}"));

            {#each $.Columns}
            // {:schemaName}.{:entityName}.{$.Column.Name}
            _metadata.Add({$.Identifier}, new MsSqlColumnMetadata(
                        name:"{$.Column.Name}", 
                        dbType:SqlDbType.{$.Column.SqlType}{#if $.Column.Size}, 
                        size:{$.Column.Size}{/if}{#if $.Column.Precision}, 
                        precision:{$.Column.Precision}{/if}{#if $.Column.Scale}, 
                        scale:{$.Column.Scale}{/if+}
                    ){#if $.Column.IsIdentity+} 
                    {{ 
                        IsIdentity = true 
                    }}{/if+}
                );

            {/each}
            #endregion

            {/each}
            #endregion

            #region {:schemaName} stored procedures
            {#each $.StoredProcedures}
            {?var:storedProcedureName = $.StoredProcedure.Name}
            #region {:schemaName}.{:storedProcedureName}
            // {:schemaName}.{:storedProcedureName}
            _metadata.Add({$.Identifier}, new StoredProcedureMetadata(name:"{:storedProcedureName}"));

            {#each $.Parameters}
            // {:schemaName}.{:storedProcedureName}.{$.Parameter.Name}
            _metadata.Add({$.Identifier}, new MsSqlParameterMetadata(
                        name:"{$.Parameter.Name}", 
                        dbType:SqlDbType.{$.Parameter.SqlType}{#if $.Parameter.Size}, 
                        size:{$.Parameter.Size}{/if}{#if $.Parameter.Precision}, 
                        precision:{$.Parameter.Precision}{/if}{#if $.Parameter.Scale}, 
                        scale:{$.Parameter.Scale}{/if+}
                    )
                );

            {/each}
            #endregion

            {/each}
            #endregion
            #endregion

		    {/each}
        }}

        public {$.DatabaseExpression.Name}SqlDatabaseMetadata(string name)
        {{
            Name = name ?? throw new ArgumentNullException(nameof(name));
        }}
        #endregion
    }}
}}