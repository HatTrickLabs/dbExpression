using System;
using {() => ResolveRootNamespace}Data;

{#each Schemas}
{#if !($) => IsIgnored}
namespace {() => ResolveRootNamespace}{($) => ResolveName}DataService
{{
    using {() => ResolveRootNamespace}{($) => ResolveName}Data;
    using HatTrick.DbEx.Sql;
    using HatTrick.DbEx.Sql.Executor;
    using HatTrick.DbEx.Sql.Expression;
    using HatTrick.DbEx.Sql.Mapper;

	{#each ($) => ResolveConsolidatedTablesAndViews}
	{#if !($) => IsIgnored}
    #region {($) => InsertSpaceOnCapitalizationAndToLower}
    public partial class {($) => ResolveName}Entity : EntityExpression<{($) => ResolveName}>
    {{
        #region internals
		{#each Columns}
		{#if !($) => IsIgnored}
        private const string _{($) => ToCamelCase}FieldName = "{$.Name}";
		{/if}
		{/each}
        #endregion

        #region interface properties
		{#each Columns}
		{#if !($) => IsIgnored}
		{($, ..\$) => BuildFieldExpressionInterfaceProperty}
		{/if}
		{/each}
        #endregion

        #region constructors
		public {($) => ResolveName}Entity(SchemaExpression schema, Lazy<ISqlEntityMetadata> metadata): this(schema, metadata, null)
        {{
        }}

        private {($) => ResolveName}Entity(SchemaExpression schema, Lazy<ISqlEntityMetadata> metadata, string alias) : base("{(..\$) => ResolveName}.{($) => ResolveName}", schema, metadata, alias)
        {{
			{#each Columns}
			{#if !($) => IsIgnored}
			{($, ..\$, ..\..\$) => BuildEntityExpressionConstructorForFieldExpression}
			{/if}
			{/each}
        }}
        #endregion

        #region methods
        public {($) => ResolveName}Entity As(string name)
        {{
            return new {($) => ResolveName}Entity(this.Schema, this.MetadataResolver, name);
        }}

        protected override SelectExpressionSet GetInclusiveSelectExpression()
        {{
            return new SelectExpressionSet(
				{#each Columns}
				{#if !($) => IsIgnored}
                {($) => ResolveName}{#if !(..\$.Columns, $) => IsLast},{/if}
				{/if}
				{/each}
            );
        }}
		
        protected override InsertExpressionSet<{($) => ResolveName}> GetInclusiveInsertExpression({($) => ResolveName} {($) => ToCamelCase})
        {{
            return new InsertExpressionSet<{($) => ResolveName}>(
				{($) => ToCamelCase},
				{#each Columns}
				{#if !($) => IsIgnored}
                {($) => ResolveName}.Insert({(..\$) => ToCamelCase}.{($) => ResolveName}){#if !(..\$.Columns, $) => IsLast},{/if}
				{/if}
				{/each}
            );
        }}

        protected override AssignmentExpressionSet GetAssignmentExpression({($) => ResolveName} from, {($) => ResolveName} to)
        {{
            AssignmentExpressionSet expr = new AssignmentExpressionSet();

			{#each Columns}
			{#if !($) => IsIgnored}
			{#if !$.IsIdentity}
			{#if ($.Name) => NameRepresentsLastTouchedTimestamp}
            expr &= {($) => ResolveName}.Set(DateTime.UtcNow);
			{/if}
			{#if !($.Name) => NameRepresentsLastTouchedTimestamp}
			if (from.{($) => ResolveName} != to.{($) => ResolveName}) {{ expr &= {($) => ResolveName}.Set(to.{($) => ResolveName}); }}; 
			{/if}
			{/if}
			{/if}
			{/each}
			
            return expr;
        }}

        protected override void HydrateEntity({($) => ResolveName} {($) => ToCamelCase}, ISqlFieldReader reader)
        {{
			{#each Columns}
			{#if !($) => IsIgnored}
			{(..\$) => ToCamelCase}.{($) => ResolveName} = reader.ReadField().GetValue<{($, $.IsNullable) => ResolveAssemblyTypeName}>();
			{/if}
			{/each}
        }}
		#endregion
    }}
    #endregion
	{/if}
    {/each}
}}
{/if}
{/each}