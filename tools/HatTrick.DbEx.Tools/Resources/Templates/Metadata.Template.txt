namespace {() => ResolveRootNamespace}DataService
{{
	{#each Schemas}
	{#if !($) => IsIgnored}
	using {() => ResolveRootNamespace}{($) => ResolveName}DataService;
	{/if}
	{/each}
    using HatTrick.DbEx.Sql;
    using System.Collections.Generic;

    public class {($) => ResolveName} : RuntimeEnvironmentSqlDatabase
    {{
        public {($) => ResolveName}() : base(new db(), new SqlDatabaseMetadataProvider(new {($) => ResolveName}SqlDatabaseMetadata("{($) => ResolveName}", "{($) => ResolveName}"))) 
        {{ 
        
        }}
    }}

    public class {($) => ResolveName}SqlDatabaseMetadata : ISqlDatabaseMetadata
    {{
        #region internals
		{#each Schemas}
		{#if !($) => IsIgnored}
        private static string _{($) => ToCamelCase}SchemaIdentifier;
		{/if}
		{/each}
        #endregion

        #region interface
        public string Identifier {{ get; private set; }}
        public string Name {{ get; private set; }}
        public IDictionary<string, ISqlSchemaMetadata> Schemas {{ get; }} = new Dictionary<string, ISqlSchemaMetadata>();
        #endregion

        #region constructors
        public {($) => ResolveName}SqlDatabaseMetadata(string identifier, string name)
        {{
            Identifier = identifier;
            Name = name;
			{#each Schemas}
			{#if !($) => IsIgnored}
            Schemas.Add(_{($) => ToCamelCase}SchemaIdentifier = $"{{identifier}}.{$.Name}", new {($) => ResolveName}SchemaMetadata(this, _{($) => ToCamelCase}SchemaIdentifier, "{$.Name}"));
			{/if}
			{/each}
        }}
        #endregion
    }}
}}

{#each Schemas}
{#if !($) => IsIgnored}
namespace {() => ResolveRootNamespace}{($) => ResolveName}DataService
{{
	using HatTrick.DbEx.MsSql.Expression;
    using HatTrick.DbEx.Sql;
    using System.Collections.Generic;
    using System.Data;

    #region {($) => InsertSpaceOnCapitalizationAndToLower}
	public class {($) => ResolveName}SchemaMetadata : ISqlSchemaMetadata
    {{
		#region interface
        public ISqlDatabaseMetadata Database {{ get; }}
        public string Identifier {{ get; }}
        public string Name {{ get; }}
        public IDictionary<string, ISqlEntityMetadata> Entities {{ get; }} = new Dictionary<string, ISqlEntityMetadata>();
		#endregion

        #region constructors
        public {($) => ResolveName}SchemaMetadata(ISqlDatabaseMetadata database, string identifier, string name)
        {{
            Database = database;
            Identifier = identifier;
            Name = name;
			{#each ($) => ResolveConsolidatedTablesAndViews}
			{#if !($) => IsIgnored}
            Entities.Add($"{{identifier}}.{$.Name}", new {($) => ResolveName}EntityMetadata(this, $"{{identifier}}.{$.Name}", "{$.Name}"));
			{/if}
			{/each}
        }}
        #endregion
    }}
    #endregion

	{#each ($) => ResolveConsolidatedTablesAndViews}
	{#if !($) => IsIgnored}
    #region {($)  => InsertSpaceOnCapitalizationAndToLower}
	public class {($)  => ResolveName}EntityMetadata : ISqlEntityMetadata
	{{
        #region interface
        public ISqlSchemaMetadata Schema {{ get; }}
        public string Identifier {{ get; }}
        public string Name {{ get; }}
        public IDictionary<string, ISqlFieldMetadata> Fields {{ get; }} = new Dictionary<string, ISqlFieldMetadata>();
        #endregion
		
        #region constructors
        public {($) => ResolveName}EntityMetadata(ISqlSchemaMetadata schema, string identifier, string name)
        {{
            Schema = schema;
            Identifier = identifier;
            Name = name;
			//TODO: JRod, add overload to MsSqlFieldMetadata that accepts name, type, size, precision, and scale...
			{#each Columns}
			{#if !($) => IsIgnored}
            Fields.Add($"{{identifier}}.{$.Name}", new MsSqlFieldMetadata(this, $"{{identifier}}.{$.Name}", "{$.Name}", SqlDbType.{$.SqlType}, {$.MaxLength}){#if $.IsIdentity} {{ IsIdentity = true }}{/if});
			{/if}
			{/each}
        }}
        #endregion
    }}
    #endregion

	{/if}
	{/each}
}}
{/if}
{/each}