{?var:databaseName = $.DatabaseExpression.Name}
        #region sp
        public sealed partial class {:databaseName}StoredProcedures
        {{
            #region internals
            {-#each $.Schemas}
            private readonly {$.SchemaExpression.Name}StoredProcedures _{$.SchemaExpression.Name}StoredProcedures;
            {/each}
            #endregion

            #region interface
            {-#each $.Schemas}
            /// <summary>
            /// Accessors to construct and execute stored procedure query expressions in the {$.SchemaExpression.Name} schema.
            /// </summary>
            public {$.SchemaExpression.Name}StoredProcedures {$.SchemaExpression.Name} => _{$.SchemaExpression.Name}StoredProcedures;

            {/each}
            #endregion

            #region constructors
            public {:databaseName}StoredProcedures(I{$.Platform.Key}QueryExpressionBuilderFactory<{:databaseName}> factory, IEnumerable<SchemaExpression> schemas)
            {{
                if (factory is null)
                    throw new ArgumentNullException(nameof(factory));
                {-#each $.Schemas}
                _{$.SchemaExpression.Name}StoredProcedures = new {$.SchemaExpression.Name}StoredProcedures(factory, schemas.Single(s => s is {$.SchemaExpression.Name}SchemaExpression));
                {/each}
            }}
            #endregion
        }}

        #region classes
        {-#each $.Schemas}
        /// <summary>
        /// Accessors to construct and execute stored procedure query expressions in the {$.SchemaExpression.Name} schema.
        /// </summary>
        public sealed partial class {$.SchemaExpression.Name}StoredProcedures
        {{
            #region internals
            private readonly I{$.Platform.Key}QueryExpressionBuilderFactory<{:databaseName}> _factory;
            private readonly SchemaExpression _{$.SchemaExpression.Name};
            #endregion

            #region constructors
            public {$.SchemaExpression.Name}StoredProcedures(I{$.Platform.Key}QueryExpressionBuilderFactory<{:databaseName}> factory, SchemaExpression schema)
            {{
                _factory = factory ?? throw new ArgumentNullException(nameof(factory));
                _{$.SchemaExpression.Name} = schema ?? throw new ArgumentNullException(nameof(schema));
            }}
            #endregion

            #region methods
            {?var:schemaName = $.Schema.Name}
            {?var:schemaExpressionName = $.SchemaExpression.Name}
            {#each $.StoredProcedures}
            {?var:isFirstParameter = true}
            {>("StoredProcedureExpression.Documentation") => GetTemplatePartial+}
            public StoredProcedureContinuation<{:databaseName}, {$.StoredProcedureExpression.Name}StoredProcedure> {$.StoredProcedureExpression.Name}({#each $.Parameters}{#if $.ParameterExpression.RequiresInput}{#if !:isFirstParameter}, {/if}{?:isFirstParameter = false}{$.ParameterExpression.Type.NullableAlias} {($.ParameterExpression.Name, "@") => TrimStart}{/if}{/each}{#if $.HasOutputParameters}{#if $.HasInputParameters}, {+/if}Action<ISqlOutputParameterList> outputParameters{/if})
                => _factory.CreateStoredProcedureQueryBuilder(new {$.StoredProcedureExpression.Name}StoredProcedure(_{:schemaExpressionName}{#each $.Parameters}{#if $.ParameterExpression.RequiresInput}, {($.ParameterExpression.Name, "@") => TrimStart}{/if}{/each}{#if $.HasOutputParameters}{#if $.HasInputParameters}, {+/if}outputParameters{/if}));

            {/each}
            #endregion
        }}

        {/each}
        #endregion
        #endregion