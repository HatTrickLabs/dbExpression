using System;

namespace {Namespace}
{{
    public partial class Nullable{Type.Name}ExpressionMediator
    {{
        #region implicit operators
        public static implicit operator SelectExpression<{Type.Alias}{#if Type.IsNullable}?{/if}>(Nullable{Type.Name}ExpressionMediator a) => new SelectExpression<{Type.Alias}{#if Type.IsNullable}?{/if}>(a);
        public static implicit operator OrderByExpression(Nullable{Type.Name}ExpressionMediator a) => new OrderByExpression(a, OrderExpressionDirection.ASC);
        {#if IsGroupBySupported}
        public static implicit operator GroupByExpression(Nullable{Type.Name}ExpressionMediator a) => new GroupByExpression(a);
        {/if}
        #endregion

        #region arithmetic operators 
        #region data type 
        {#each ArithmeticOperations}
        {#if $.ReturnType.IsNullable}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, {..\$.OperationType.Alias} b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias} a, Nullable{..\..\$.Type.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(a)), b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#if OperationType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, {..\$.OperationType.Alias}? b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, new Nullable{..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}?>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias}? a, Nullable{..\..\$.Type.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}?>(a)), b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}    
        {/if}
        #endregion
        {/if}

        {/each}
        #endregion

        #region fields
        {#each ArithmeticOperations}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, {..\$.OperationType.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, new {..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, Nullable{..\$.OperationType.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, new Nullable{..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        #endregion

        {/each}
        #endregion

        #region mediators
        {#each ArithmeticOperations}
        {#if $.ReturnType.IsNullable}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, {..\$.OperationType.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}ExpressionMediator a, Nullable{..\$.OperationType.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        #endregion
        {/if}

        {/each}
        #endregion

        #region alias
        //moved to non-generated file
        #endregion
        #endregion

        #region filter operators
        #region {Type.Alias}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, {..\$.Type.Alias} b) => new FilterExpression<bool?>(a, new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias} a, Nullable{..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(a)), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, {..\$.Type.Alias}? b) => new FilterExpression<bool?>(a, new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias}? a, Nullable{..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(a)), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion

        #region fields
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, {..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(a, new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, Nullable{..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(a, new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        
        #region mediator
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, {..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}ExpressionMediator a, Nullable{..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(new {..\$.Type.Name}ExpressionMediator(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        #endregion
    }}
}}
