#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

{?var:mediatorType = Type-}
using System;
{#each Usings-}
using {$};
{/each-}

#nullable enable

namespace {Namespace}
{{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class Nullable{:mediatorType}ExpressionMediator
    {{
        #region arithmetic operators 
        #region data type 
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        {-#if :returnMediatorType.IsNullable-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:operationType.Alias} b) 
        {{
            if (a.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new LiteralExpression<{:operationType.Alias}>(b));
                return new(a.Expression);
            }}
            return new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, Nullable{:mediatorType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, new LiteralExpression<{:operationType.Alias}>(a));
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}b{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:operationType.NullableAlias} b) 
        {{
            if (a.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new LiteralExpression<{:operationType.NullableAlias}>(b));
                return new(a.Expression);
            }}
            return new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, Nullable{:mediatorType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, new LiteralExpression<{:operationType.NullableAlias}>(a));
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}b{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}    
        {-/if-}
        #endregion
        {-/if-}

        {-/each-}
        #endregion

        #region fields
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:operationType.Name}FieldExpression b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return new(a.Expression);
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, Nullable{:operationType.Name}FieldExpression b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}a{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        #endregion

        {-/each-}
        #endregion

        #region mediator
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        {-#if :returnMediatorType.IsNullable-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:operationType.Name}ExpressionMediator b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return new(a.Expression);
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, Nullable{:operationType.Name}ExpressionMediator b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}a{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        #endregion
        {-/if-}

        {-/each-}
        #endregion

        #region alias
        {-#each ($.ArithmeticOperations, :mediatorType.Type) => GetArithmeticOperationsForType-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, AliasExpression b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return a;
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each ($.ArithmeticOperations, :mediatorType.Type) => GetArithmeticOperationsForType-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, (string TableAlias, string FieldAlias) b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new AliasExpression<{:mediatorType.Alias}>(b));
                return a;
            }}
            return new(new ArithmeticExpression(a, new AliasExpression<{:mediatorType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region null
        public static FilterExpression<bool?> operator ==(Nullable{:mediatorType.Name}ExpressionMediator a, NullElement b) => new FilterExpression<bool?>(a, a.Expression is FieldExpression field ? new LiteralExpression<{:mediatorType.NullableAlias}>(b, field) : b, FilterExpressionOperator.Equal);
        
        public static FilterExpression<bool?> operator !=(Nullable{:mediatorType.Name}ExpressionMediator a, NullElement b) => new FilterExpression<bool?>(a, a.Expression is FieldExpression field ? new LiteralExpression<{:mediatorType.NullableAlias}>(b, field) : b, FilterExpressionOperator.NotEqual);
        
        public static FilterExpression<bool?> operator ==(NullElement a, Nullable{:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool?>(new LiteralExpression<{:mediatorType.NullableAlias}>(a), b.Expression is FieldExpression field ? new LiteralExpression<{:mediatorType.NullableAlias}>(a, field) : a, FilterExpressionOperator.Equal);
        
        public static FilterExpression<bool?> operator !=(NullElement a, Nullable{:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool?>(new LiteralExpression<{:mediatorType.NullableAlias}>(a), b.Expression is FieldExpression field ? new LiteralExpression<{:mediatorType.NullableAlias}>(a, field) : a, FilterExpressionOperator.NotEqual);
        #endregion

        #region data type
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#if Operations-}
        #region {:otherType.Alias}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:otherType.Alias} b) => new FilterExpression<bool?>(a, new LiteralExpression<{:otherType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:otherType.Alias} a, Nullable{:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool?>(new LiteralExpression<{:otherType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#if Type.IsNullable-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:otherType.NullableAlias} b) => new FilterExpression<bool?>(a, new LiteralExpression<{:otherType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:otherType.NullableAlias} a, Nullable{:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool?>(new LiteralExpression<{:otherType.NullableAlias}>(a), b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/if-}
        #endregion

        {-/if-}
        {-/each-}
        #endregion

        #region fields
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#if Operations-}
        #region {:otherType.Alias}
        {-#each Operations-}
        {-#if (:mediatorType.Type) => IsNotTypeOfObject-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:otherType.Name}FieldExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});

        {-/if-}
        {-/each-}
        {-#if :otherType.IsNullable-}
        {-#each Operations-}
        {-#if (:mediatorType.Type) => IsNotTypeOfObject-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, Nullable{:otherType.Name}FieldExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});

        {-/if-}
        {-/each-}
        {-/if-}
        #endregion

        {-/if-}
        {-/each-}
        #endregion
        
        #region mediator
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#if Operations-}
        #region {:otherType.Alias}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, {:otherType.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#if Type.IsNullable-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, Nullable{:otherType.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/if-}
        #endregion

        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters.ThisTypeOnlyFilters-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, AliasExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}(Nullable{:mediatorType.Name}ExpressionMediator a, (string TableName, string FieldName) b) => new FilterExpression<bool?>(a, new AliasExpression<{:mediatorType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
