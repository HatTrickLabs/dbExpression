#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

{?var:mediatorType = Type-}
using System;
{#each Usings-}
using {$};
{/each-}

#nullable enable

namespace {Namespace}
{{
    public partial class {:mediatorType.Name}ExpressionMediator
    {{
        #region arithmetic operators
        #region data type
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:operationType.Alias} b)
        {{
            if (a.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new LiteralExpression<{:operationType.Alias}>(b));
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return a;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(a.Expression);
                {-/if-}
            }}
            return new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, {:mediatorType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, new LiteralExpression<{:operationType.Alias}>(a));
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return b;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(b.Expression);
                {-/if-}
            }}
            return new(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#if $.OperationType.IsNullable-}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:operationType.NullableAlias} b) 
        {{
            if (a.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new LiteralExpression<{:operationType.NullableAlias}>(b));
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return a;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(a.Expression);
                {-/if-}            
            }}
            return new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, {:mediatorType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, new LiteralExpression<{:operationType.NullableAlias}>(a));
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return b;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(b.Expression);
                {-/if-}
            }}
            return new(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region fields
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        {-#if Operations-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:operationType.Name}FieldExpression b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return a;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(a.Expression);
                {-/if-}            
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, Nullable{:operationType.Name}FieldExpression b)
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return new(a.Expression);
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        #endregion

        {-/if-}
        {-/each-}
        #endregion

        #region mediators
        {-#each ArithmeticOperations-}
        {-?var:returnMediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        {-#if :returnMediatorType.IsNullable-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:operationType.Name}ExpressionMediator b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                {-#if (:returnMediatorType, :mediatorType) => IsSameType-}
                return a;
                {-/if-}
                {-#if (:returnMediatorType, :mediatorType) => IsNotSameType-}
                return new(a.Expression);
                {-/if-}
            }}
            if (b.Expression is ArithmeticExpression bm && bm is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, a);
                {-#if (:returnMediatorType, :operationType) => IsSameType-}
                return b;
                {-/if-}
                {-#if (:returnMediatorType, :operationType) => IsNotSameType-}
                return new(b.Expression);
                {-/if-}            
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:returnMediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, Nullable{:operationType.Name}ExpressionMediator b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return new(a.Expression);
            }}
            if (b.Expression is ArithmeticExpression bm && bm is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, a);
                {-#if (:returnMediatorType, :operationType) => IsSameType-}
                return b;
                {-/if-}
                {-#if (:returnMediatorType, :operationType) => IsNotSameType-}
                return new(b.Expression);
                {-/if-}            
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-/if-}
        #endregion
        
        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each ($.ArithmeticOperations, :mediatorType.Type) => GetArithmeticOperationsForType-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, AliasExpression b) 
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(b);
                return a;
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}

        {-#each ($.ArithmeticOperations, :mediatorType.Type) => GetArithmeticOperationsForType-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, (string TableAlias, string FieldAlias) b)
        {{
            if (a.Expression is ArithmeticExpression am && am is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> ae && ae.Expression.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                ae.Expression.Args.Add(new AliasExpression<{:mediatorType.Alias}>(b));
                return a;
            }}
            return new(new ArithmeticExpression(a, new AliasExpression<{:mediatorType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region {Type.Alias}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:mediatorType.Alias} b) => new FilterExpression<bool{#if :mediatorType.Type => IsTypeOfObject}?{/if}>(a, new LiteralExpression<{:mediatorType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Alias} a, {:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool{#if :mediatorType.Type => IsTypeOfObject}?{/if}>(new LiteralExpression<{:mediatorType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/each-}
        #endregion

        #region fields
        {-#each Filters-}
        {-#each Operations-}
        {-#if !:mediatorType.Type => IsTypeOfObject-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:mediatorType.Name}FieldExpression b) => new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/if-}
        {-/each-}
        {-/each-}

        {-#if Type.IsNullable-}
        {-#each Filters-}
        {-#each Operations-}
        {-#if !:mediatorType.Type => IsTypeOfObject-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, Nullable{:mediatorType.Name}FieldExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/if-}
        {-/each-}
        {-/each-}
        {-/if-}
        #endregion

        #region mediators
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, {:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#if Type.IsNullable-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, Nullable{:mediatorType.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, AliasExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}({:mediatorType.Name}ExpressionMediator a, (string TableName, string FieldName) b) => new FilterExpression<bool?>(a, new AliasExpression<{:mediatorType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
