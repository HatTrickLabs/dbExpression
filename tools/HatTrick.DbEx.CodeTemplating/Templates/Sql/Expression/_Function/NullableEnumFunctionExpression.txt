
using System;
{Usings => BuildUsings}

namespace {Namespace}
{{
    public partial class NullableEnum{FunctionName}FunctionExpression<TEnum>
    {{
        #region implicit operators
        public static implicit operator NullableEnumExpressionMediator<TEnum>(NullableEnum{FunctionName}FunctionExpression<TEnum> a) => new NullableEnumExpressionMediator<TEnum>(new NullableEnumExpressionMediator<TEnum>(a));
        public static implicit operator OrderByExpression(NullableEnum{FunctionName}FunctionExpression<TEnum> a) => new OrderByExpression(new NullableEnumExpressionMediator<TEnum>(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(NullableEnum{FunctionName}FunctionExpression<TEnum> a) => new GroupByExpression(new NullableEnumExpressionMediator<TEnum>(a));
        #endregion
        
        #region order
        public override OrderByExpression Asc => new OrderByExpression(new NullableEnumExpressionMediator<TEnum>(this), OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(new NullableEnumExpressionMediator<TEnum>(this), OrderExpressionDirection.DESC);
        #endregion
        
        #region filter operators
        #region TValue
        #region {Type.Alias}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> a, TEnum b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(a), new EnumExpressionMediator<TEnum>(new LiteralExpression<TEnum>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(TEnum a, NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> b) => new FilterExpression<bool?>(new EnumExpressionMediator<TEnum>(new LiteralExpression<TEnum>(a)), new NullableEnumExpressionMediator<TEnum>(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> a, TEnum? b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(a), new NullableEnumExpressionMediator<TEnum>(new LiteralExpression<TEnum?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(TEnum? a, NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(new LiteralExpression<TEnum?>(a)), new NullableEnumExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        #endregion

        #region mediator
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> a, EnumExpressionMediator<TEnum> b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(NullableEnum{..\$.FunctionName}FunctionExpression<TEnum> a, NullableEnumExpressionMediator<TEnum> b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        #endregion
        #endregion
    }}
}}
