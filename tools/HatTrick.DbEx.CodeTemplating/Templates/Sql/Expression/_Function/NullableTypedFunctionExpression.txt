using System;
{Usings => BuildUsings}

namespace {Namespace}
{{
    public partial class Nullable{Type.Name}{FunctionName}FunctionExpression
    {{
        #region implicit operators
        public static implicit operator Nullable{Type.Name}ExpressionMediator(Nullable{Type.Name}{FunctionName}FunctionExpression a) => new Nullable{Type.Name}ExpressionMediator(a);
        public static implicit operator OrderByExpression(Nullable{Type.Name}{FunctionName}FunctionExpression a) => new OrderByExpression(new {Type.Name}ExpressionMediator(a), OrderExpressionDirection.ASC);
        {#if IsGroupBySupported}
        public static implicit operator GroupByExpression(Nullable{Type.Name}{FunctionName}FunctionExpression a) => new GroupByExpression(new {Type.Name}ExpressionMediator(a));
        {/if}
        #endregion

        #region order
        public override OrderByExpression Asc => new OrderByExpression(new {Type.Name}ExpressionMediator(this), OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(new {Type.Name}ExpressionMediator(this), OrderExpressionDirection.DESC);
        #endregion

        #region arithmetic operators
        #region TValue
        {#each ArithmeticOperations}
        #region {$.OperationType.Alias}
        {#if $.ReturnType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression a, {..\$.OperationType.Alias} b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\..\$.Type.Name}ExpressionMediator(a), new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias} a, Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(a)), new Nullable{..\..\$.Type.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#if $.OperationType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression a, {..\$.OperationType.Alias}? b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\..\$.Type.Name}ExpressionMediator(a), new Nullable{..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}?>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias}? a, Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}?>(a)), new Nullable{..\..\$.Type.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        {/if}
        {/if}
        {/if}
        #endregion
        
        {/each}
        #endregion

        #region mediator
        {#each ArithmeticOperations}
        {#if $.ReturnType.IsNullable}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression a, {..\$.OperationType.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\..\$.Type.Name}ExpressionMediator(a), b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#if $.OperationType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}{..\..\$.FunctionName}FunctionExpression a, Nullable{..\$.OperationType.Name}ExpressionMediator b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\..\$.Type.Name}ExpressionMediator(a), b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        {/if}
        #endregion
        
        {/if}
        {/each}
        #endregion
        #endregion

        #region filter operators
        #region TValue
        #region {Type.Alias}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression a, {..\$.Type.Alias} b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias} a, Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression b) => new FilterExpression<bool?>(new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(a)), new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression a, {..\$.Type.Alias}? b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias}? a, Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(a)), new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        #endregion

        #region mediator
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression a, {..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}{..\$.FunctionName}FunctionExpression a, Nullable{..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        #endregion
    }}
}}
