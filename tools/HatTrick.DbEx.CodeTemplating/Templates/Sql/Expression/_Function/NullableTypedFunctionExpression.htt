#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

{?var:functionName = FunctionName-}
{?var:dataType = Type-}
using System;
{#each Usings-}
using {$};
{/each-}

namespace {Namespace}
{{
    public partial class Nullable{:dataType.Name}{:functionName}FunctionExpression
    {{
        #region implicit operators
        public static implicit operator Nullable{:dataType.Name}ExpressionMediator(Nullable{:dataType.Name}{:functionName}FunctionExpression a) => new Nullable{:dataType.Name}ExpressionMediator(a);
        #endregion

        #region arithmetic operators
        #region data types
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#if :mediatorType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Alias} b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:operationType.NullableAlias} b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}FieldExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}FieldExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion        
        {-/each-}
        {-/if-}
        #endregion

        #region mediator
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = $.OperationType-}
        {-#if :mediatorType.IsNullable-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}ExpressionMediator b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}ExpressionMediator b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        #endregion
        
        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each ($.ArithmeticOperations, :dataType.Type) => GetArithmeticOperationsForType-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new ObjectExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-#each ($.ArithmeticOperations, :dataType.Type) => GetArithmeticOperationsForType-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, (string TableName, string FieldName) b) => new ObjectExpressionMediator(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region DBNull
        public static FilterExpressionSet operator ==(Nullable{:dataType.Name}{:functionName}FunctionExpression a, DBNull b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.NullableAlias}>(b), FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=(Nullable{:dataType.Name}{:functionName}FunctionExpression a, DBNull b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.NullableAlias}>(b), FilterExpressionOperator.NotEqual));
        public static FilterExpressionSet operator ==(DBNull a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<{:dataType.NullableAlias}>(a), b, FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=(DBNull a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<{:dataType.NullableAlias}>(a), b, FilterExpressionOperator.NotEqual));
        #endregion

        #region data type
        #region {:dataType.Alias}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Alias} b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Alias} a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<{:dataType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:dataType.NullableAlias} b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.NullableAlias} a, Nullable{:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<{:dataType.NullableAlias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/each-}
        #endregion
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Name}FieldExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        
        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, Nullable{:dataType.Name}FieldExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}

        {-/each-}        
        {-/if-}
        #endregion

        #region mediators
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Name}ExpressionMediator b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, Nullable{:dataType.Name}ExpressionMediator b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Nullable{:dataType.Name}{:functionName}FunctionExpression a, (string TableName, string FieldName) b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new AliasExpression(b.TableName, b.FieldName), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/each-}
        #endregion

        #endregion
    }}
}}
