#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

{?var:functionName = FunctionName-}
{?var:dataType = Type-}
using System;
using HatTrick.DbEx.Sql;
{#each Usings-}
using {$};
{/each-}

#nullable disable

namespace {Namespace}
{{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class {:dataType.Name}{:functionName}FunctionExpression
    {{
        #region implicit operators
        public static implicit operator {:dataType.Name}ExpressionMediator({:dataType.Name}{:functionName}FunctionExpression a) => new(a);
        #endregion

        #region arithmetic operators
        #region data types
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        {-#if Operations-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType}{:functionName}FunctionExpression a, {:operationType.Alias} b) => new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, {..\..\$.Type.Name}{:functionName}FunctionExpression b) => new(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.NullableAlias} b) => new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/if-}
        {-/each-}
        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/if-}
        {-/each-}
        #endregion
        {-/if-}
        
        {-/each-}
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}FieldExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        {-#if :mediatorType.IsNullable-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}FieldExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion        
        {-/each-}
        {-/if-}
        #endregion

        #region mediators
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, a);
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}b{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-#if :mediatorType.IsNullable-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}ExpressionMediator b) 
        {{
            if (b.Expression is IExpressionProvider<ArithmeticExpression.ArithmeticExpressionElements> be && be.Expression!.ArithmeticOperator == ArithmeticExpressionOperator.{ArithmeticOperatorName})
            {{
                be.Expression.Args.Insert(0, a);
                return {#if (:mediatorType, :operationType) => IsNotSameType}new({/if}b{#if (:mediatorType, :operationType) => IsNotSameType}.Expression){/if};
            }}
            return new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        }}

        {-/each-}
        {-/if-}
        {-/if-}
        #endregion
 
        {-/each-}
        #endregion

        #region alias
        {-#each ($.ArithmeticOperations, :dataType.Type) => GetArithmeticOperationsForType-}
        public static {:dataType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        {-#each ($.ArithmeticOperations, :dataType.Type) => GetArithmeticOperationsForType-}
        public static Nullable{:dataType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression<{:dataType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        
        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region null
        public static FilterExpression<bool?> operator ==({:dataType.Name}{:functionName}FunctionExpression a, NullElement b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.Equal);
        
        public static FilterExpression<bool?> operator !=({:dataType.Name}{:functionName}FunctionExpression a, NullElement b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.NotEqual);
        
        public static FilterExpression<bool?> operator ==(NullElement a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.Equal);
        
        public static FilterExpression<bool?> operator !=(NullElement a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.NotEqual);
        #endregion

        #region data types
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#if Operations-}
        #region {:otherType.Alias}
        {-#each Operations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:otherType.Alias} b) => new FilterExpression<bool>(a, new LiteralExpression<{:otherType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:otherType.Alias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpression<bool>(new LiteralExpression<{:otherType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:otherType.NullableAlias} b) => new FilterExpression<bool?>(a, new LiteralExpression<{:otherType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:otherType.NullableAlias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpression<bool?>(new LiteralExpression<{:otherType.NullableAlias}>(a), b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/if-}
        #endregion

        {-/if-}        
        {-/each-}
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#each Operations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:otherType.Name}FieldExpression b) => new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}        
        {-#if Type.IsNullable-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:otherType.Name}FieldExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/if-}
        {-/each-}
        {-/if-}
        #endregion

        #region mediators
        {-#each Filters.AllDataTypeFilters-}
        {-?var:otherType = Type-}
        {-#if Operations-}
        #region {:otherType.Alias}
        {-#each Operations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:otherType.Name}ExpressionMediator b) => new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:otherType.Name}ExpressionMediator b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-/if-}
        #endregion

        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters.ThisTypeOnlyFilters-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        
        {-/each-}
        {-#each Operations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, (string TableName, string FieldName) b) => new FilterExpression<bool?>(a, new AliasExpression<{:dataType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName});
        
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}((string TableName, string FieldName) a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpression<bool?>(new AliasExpression<{:dataType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName});

        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
