{?var:functionName = FunctionName-}
{?var:dataType = Type-}
using System;
{#each Usings-}
using {$};
{/each-}

namespace {Namespace}
{{
    public partial class {:dataType.Name}{:functionName}FunctionExpression
    {{
        #region implicit operators
        public static implicit operator {:dataType.Name}ExpressionMediator({:dataType.Name}{:functionName}FunctionExpression a) => new {:dataType.Name}ExpressionMediator(a);
        public static implicit operator OrderByExpression({:dataType.Name}{:functionName}FunctionExpression a) => new OrderByExpression(a, OrderExpressionDirection.ASC);
        {-#if !IsAggregateFunction-}
        public static implicit operator GroupByExpression({:dataType.Name}{:functionName}FunctionExpression a) => new GroupByExpression(a);
        {-/if-}
        #endregion

        #region order
        public override OrderByExpression Asc => new OrderByExpression(this, OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(this, OrderExpressionDirection.DESC);
        #endregion

        #region arithmetic operators
        #region data types
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType}{:functionName}FunctionExpression a, {:operationType.Alias} b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, {..\..\$.Type.Name}{:functionName}FunctionExpression b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.NullableAlias} b) => new {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/if-}
        {-/each-}

        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new {#if :mediatorType.IsNullable}Nullable{/if}{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/if-}
        {-/each-}
        #endregion
        
        {-/each-}
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}FieldExpression b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}FieldExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion        
        {-/each-}
        {-/if-}
        #endregion

        #region mediators
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = ReturnType-}
        {-?var:operationType = OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:operationType.Name}ExpressionMediator b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:operationType.Name}ExpressionMediator b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion        
        {-/each-}
        #endregion

        #region alias
        {-#each ($.ArithmeticOperations, :dataType.Type) => GetArithmeticOperationsForType-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new ObjectExpressionMediator(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region data types
        #region {:dataType.Alias}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Alias} b) => new FilterExpressionSet(new FilterExpression<bool>(a, new LiteralExpression<{:dataType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Alias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool>(new LiteralExpression<{:dataType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:dataType.NullableAlias} b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.NullableAlias} a, {:dataType.Name}{:functionName}FunctionExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<{:dataType.NullableAlias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/each-}
        #endregion
        #endregion

        #region fields
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Name}FieldExpression b) => new FilterExpressionSet(new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        
        {-#if Type.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:dataType.Name}FieldExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}

        {-/each-}
        {-/if-}
        #endregion

        #region mediators
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, {:dataType.Name}ExpressionMediator b) => new FilterExpressionSet(new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, Nullable{:dataType.Name}ExpressionMediator b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Name}{:functionName}FunctionExpression a, AliasExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
