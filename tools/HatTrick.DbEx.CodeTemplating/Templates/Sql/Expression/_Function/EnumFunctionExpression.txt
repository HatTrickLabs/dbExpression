
using System;
{Usings => BuildUsings}

namespace {Namespace}
{{
    public partial class Enum{FunctionName}FunctionExpression<TEnum>
    {{
        #region implicit operators
        public static implicit operator EnumExpressionMediator<TEnum>(Enum{FunctionName}FunctionExpression<TEnum> a) => new EnumExpressionMediator<TEnum>(new EnumExpressionMediator<TEnum>(a));
        public static implicit operator OrderByExpression(Enum{FunctionName}FunctionExpression<TEnum> a) => new OrderByExpression(new EnumExpressionMediator<TEnum>(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(Enum{FunctionName}FunctionExpression<TEnum> a) => new GroupByExpression(new EnumExpressionMediator<TEnum>(a));
        #endregion

        #region order
        public override OrderByExpression Asc => new OrderByExpression(new EnumExpressionMediator<TEnum>(this), OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(new EnumExpressionMediator<TEnum>(this), OrderExpressionDirection.DESC);
        #endregion

        #region filter operators
        #region TValue
        #region {Type.Alias}
        {#each FilterOperations}
        public static FilterExpression<bool> operator {$.FilterOperatorSymbol}(Enum{..\$.FunctionName}FunctionExpression<TEnum> a, TEnum b) => new FilterExpression<bool>(new EnumExpressionMediator<TEnum>(a), new EnumExpressionMediator<TEnum>(new LiteralExpression<TEnum>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool> operator {$.FilterOperatorSymbol}(TEnum a, Enum{..\$.FunctionName}FunctionExpression<TEnum> b) => new FilterExpression<bool>(new EnumExpressionMediator<TEnum>(new LiteralExpression<TEnum>(a)), new EnumExpressionMediator<TEnum>(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Enum{..\$.FunctionName}FunctionExpression<TEnum> a, TEnum? b) => new FilterExpression<bool?>(new EnumExpressionMediator<TEnum>(a), new NullableEnumExpressionMediator<TEnum>(new LiteralExpression<TEnum?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(TEnum? a, Enum{..\$.FunctionName}FunctionExpression<TEnum> b) => new FilterExpression<bool?>(new NullableEnumExpressionMediator<TEnum>(new LiteralExpression<TEnum?>(a)), new EnumExpressionMediator<TEnum>(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        #endregion
        #endregion

        #region mediator
        {#each FilterOperations}
        public static FilterExpression<bool> operator {$.FilterOperatorSymbol}(Enum{..\$.FunctionName}FunctionExpression<TEnum> a, EnumExpressionMediator<TEnum> b) => new FilterExpression<bool>(new EnumExpressionMediator<TEnum>(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Enum{..\$.FunctionName}FunctionExpression<TEnum> a, NullableEnumExpressionMediator<TEnum> b) => new FilterExpression<bool?>(new EnumExpressionMediator<TEnum>(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        #endregion
        #endregion
    }}
}}
