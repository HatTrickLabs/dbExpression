#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

{?var:functionName = FunctionName-}
{#each Usings-}
using {$};
{/each-}

#nullable enable

namespace {Namespace}
{{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public partial class Enum{:functionName}FunctionExpression<TEnum>
    {{
        #region implicit operators
        public static implicit operator EnumExpressionMediator<TEnum>(Enum{:functionName}FunctionExpression<TEnum> a) => new(new EnumExpressionMediator<TEnum>(a));
        #endregion

        #region filter operators
        #region TEnum
        #region {Type.Alias}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, TEnum b) => new FilterExpression<bool>(a, new LiteralExpression<TEnum>(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(TEnum a, Enum{:functionName}FunctionExpression<TEnum> b) => new FilterExpression<bool>(new LiteralExpression<TEnum>(a), b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, TEnum? b) => new FilterExpression<bool?>(a, new LiteralExpression<TEnum?>(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(TEnum? a, Enum{:functionName}FunctionExpression<TEnum> b) => new FilterExpression<bool?>(new LiteralExpression<TEnum?>(a), b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/each-}
        #endregion
        #endregion

        #region mediator
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, EnumExpressionMediator<TEnum> b) => new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, NullableEnumExpressionMediator<TEnum> b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, AliasExpression b) => new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-#each Operations-}
        public static FilterExpression operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, (string TableName, string FieldName) b) => new FilterExpression<bool?>(a, new AliasExpression(b.TableName, b.FieldName), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
