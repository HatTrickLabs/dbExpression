{?var:functionName = FunctionName-}
{#each Usings-}
using {$};
{/each-}

namespace {Namespace}
{{
    public partial class Enum{:functionName}FunctionExpression<TEnum>
    {{
        #region implicit operators
        public static implicit operator EnumExpressionMediator<TEnum>(Enum{:functionName}FunctionExpression<TEnum> a) => new EnumExpressionMediator<TEnum>(new EnumExpressionMediator<TEnum>(a));
        #endregion

        #region filter operators
        #region TEnum
        #region {Type.Alias}
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, TEnum b) => new FilterExpressionSet(new FilterExpression<bool>(a, new LiteralExpression<TEnum>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(TEnum a, Enum{:functionName}FunctionExpression<TEnum> b) => new FilterExpressionSet(new FilterExpression<bool>(new LiteralExpression<TEnum>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, TEnum? b) => new FilterExpressionSet(new FilterExpression<bool?>(a, new LiteralExpression<TEnum?>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(TEnum? a, Enum{:functionName}FunctionExpression<TEnum> b) => new FilterExpressionSet(new FilterExpression<bool?>(new LiteralExpression<TEnum?>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/each-}
        #endregion
        #endregion

        #region mediator
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, EnumExpressionMediator<TEnum> b) => new FilterExpressionSet(new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, NullableEnumExpressionMediator<TEnum> b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/each-}
        #endregion

        #region alias
        {-#each Filters-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(Enum{:functionName}FunctionExpression<TEnum> a, AliasExpression b) => new FilterExpressionSet(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/each-}
        #endregion
        #endregion
    }}
}}
