using System;

namespace {Namespace}
{{
    public partial class Nullable{Type.Name}FieldExpression
    {{
        #region in value set
        public override FilterExpression In(params {Type.Alias}[] value) => value is object ? new FilterExpression<{Type.Alias}>(new Nullable{Type.Name}ExpressionMediator(this), new {Type.Name}ExpressionMediator(new LiteralExpression<{Type.Alias}[]>(value)), FilterExpressionOperator.In) : null;
        #endregion

        #region isnull
        public override FilterExpression<bool> IsNull() => new FilterExpression<bool>(new Nullable{Type.Name}ExpressionMediator(this), new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), FilterExpressionOperator.Equal);
        public override FilterExpression<bool> IsNotNull() => new FilterExpression<bool>(new Nullable{Type.Name}ExpressionMediator(this), new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), FilterExpressionOperator.NotEqual);
        #endregion

        #region set
        public override AssignmentExpression Set({Type.Alias} value) => new AssignmentExpression(this, new {Type.Name}ExpressionMediator(new LiteralExpression<{Type.Alias}>(value)));
        public override AssignmentExpression Set(ExpressionMediator<{Type.Alias}> value) => new AssignmentExpression(this, value);
        public override AssignmentExpression Set({Type.Alias}? value) => new AssignmentExpression(this, new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>(value)));
        public override AssignmentExpression Set(NullableExpressionMediator<{Type.Alias}> value) => new AssignmentExpression(this, value);
        #endregion

        #region insert
        public override InsertExpression Insert({Type.Alias} value) => new InsertExpression(this, new {Type.Name}ExpressionMediator(new LiteralExpression<{Type.Alias}>(value)));
        public override InsertExpression Insert({Type.Alias}? value) => new InsertExpression(this, new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>(value)));
        #endregion

        #region order
        public override OrderByExpression Asc => new OrderByExpression(new Nullable{Type.Name}ExpressionMediator(this), OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(new Nullable{Type.Name}ExpressionMediator(this), OrderExpressionDirection.DESC);
        #endregion

        #region implicit operators
        public static implicit operator SelectExpression<{Type.Alias}{#if Type.IsNullable}?{/if}>(Nullable{Type.Name}FieldExpression a) => new SelectExpression<{Type.Alias}{#if Type.IsNullable}?{/if}>(new Nullable{Type.Name}ExpressionMediator(a));
        public static implicit operator Nullable{Type.Name}ExpressionMediator(Nullable{Type.Name}FieldExpression a) => new Nullable{Type.Name}ExpressionMediator(a);
        {#if IsOrderBySupported}
        public static implicit operator OrderByExpression(Nullable{Type.Name}FieldExpression a) => new OrderByExpression(new Nullable{Type.Name}ExpressionMediator(a), OrderExpressionDirection.ASC);
        {/if}
        {#if IsGroupBySupported}
        public static implicit operator GroupByExpression(Nullable{Type.Name}FieldExpression a) => new GroupByExpression(new Nullable{Type.Name}ExpressionMediator(a));
        {/if}
        #endregion

        #region arithmetic operators
        #region TValue
        {#each ArithmeticOperations}
        {#if $.ReturnType.IsNullable}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}FieldExpression a, {..\$.OperationType.Alias} b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(a), new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias} a, Nullable{..\..\$.Type.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new {..\$.OperationType.Name}ExpressionMediator(new LiteralExpression<{..\$.OperationType.Alias}>(a)), new Nullable{..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#if OperationType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}FieldExpression a, {..\$.OperationType.Alias}? b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(a), new Nullable{..\$.OperationType.Name}ExpressionMediator(new NullableLiteralExpression<{..\$.OperationType.Alias}?>(b)), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        {/if}

        {#if OperationType.IsNullable}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}({..\$.OperationType.Alias}? a, Nullable{..\..\$.Type.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(new NullableLiteralExpression<{..\$.OperationType.Alias}?>(a)), new Nullable{..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        {/if}
        #endregion
        
        {/if}
        {/each}
        #endregion

        #region mediator
        {#each ArithmeticOperations}
        {#if $.OperationType.IsNullable}
        #region {$.OperationType.Alias}
        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}FieldExpression a, {..\$.OperationType.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{..\$.OperationType.Name}ExpressionMediator(a), new {..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}

        {#each Operations}
        public static Nullable{..\$.ReturnType.Name}ExpressionMediator operator {$.ArithmeticOperatorSymbol}(Nullable{..\..\$.Type.Name}FieldExpression a, Nullable{..\$.OperationType.Name}FieldExpression b) => new Nullable{..\$.ReturnType.Name}ExpressionMediator(new ArithmeticExpression(new {..\$.OperationType.Name}ExpressionMediator(a), new Nullable{..\$.OperationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {/each}
        #endregion
        
        {/if}
        {/each}
        #endregion
        #endregion

        #region filter operators
        #region DBNull
        public static FilterExpression<bool?> operator ==(Nullable{Type.Name}FieldExpression a, DBNull b) => new FilterExpression<bool?>(new Nullable{Type.Name}ExpressionMediator(a), new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), FilterExpressionOperator.Equal);
        public static FilterExpression<bool?> operator !=(Nullable{Type.Name}FieldExpression a, DBNull b) => new FilterExpression<bool?>(new Nullable{Type.Name}ExpressionMediator(a), new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), FilterExpressionOperator.NotEqual);
        public static FilterExpression<bool?> operator ==(DBNull a, Nullable{Type.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), new Nullable{Type.Name}ExpressionMediator(b), FilterExpressionOperator.Equal);
        public static FilterExpression<bool?> operator !=(DBNull a, Nullable{Type.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{Type.Name}ExpressionMediator(new NullableLiteralExpression<{Type.Alias}?>()), new Nullable{Type.Name}ExpressionMediator(b), FilterExpressionOperator.NotEqual);
        #endregion

        #region {Type.Alias}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}FieldExpression a, {..\$.Type.Alias} b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#each FilterOperations}
        {#if ..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias} a, Nullable{..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(new {..\$.Type.Name}ExpressionMediator(new NullableLiteralExpression<{..\$.Type.Alias}?>(a)), new {..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {#if !..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias} a, Nullable{..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(new {..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}>(a)), new {..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        {#if ..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}FieldExpression a, {..\$.Type.Alias}? b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), new Nullable{..\$.Type.Name}ExpressionMediator(new NullableLiteralExpression<{..\$.Type.Alias}?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {#if !..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}FieldExpression a, {..\$.Type.Alias}? b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(b)), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {/each}

        {#each FilterOperations}
        {#if ..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias}? a, Nullable{..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(new NullableLiteralExpression<{..\$.Type.Alias}?>(a)), new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {#if !..\$.Type.IsNullable}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}({..\$.Type.Alias}? a, Nullable{..\$.Type.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(new LiteralExpression<{..\$.Type.Alias}?>(a)), new Nullable{..\$.Type.Name}ExpressionMediator(b), FilterExpressionOperator.{$.FilterOperatorName});
        {/if}
        {/each}
        {/if}
        #endregion
        
        #region mediator
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}FieldExpression a, {..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}

        {#if Type.IsNullable}
        {#each FilterOperations}
        public static FilterExpression<bool?> operator {$.FilterOperatorSymbol}(Nullable{..\$.Type.Name}FieldExpression a, Nullable{..\$.Type.Name}ExpressionMediator b) => new FilterExpression<bool?>(new Nullable{..\$.Type.Name}ExpressionMediator(a), b, FilterExpressionOperator.{$.FilterOperatorName});
        {/each}
        {/if}
        #endregion
        #endregion
    }}
}}
