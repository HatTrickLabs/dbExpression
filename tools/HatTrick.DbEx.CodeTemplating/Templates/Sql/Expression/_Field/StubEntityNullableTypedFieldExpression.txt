using System;
using System.Linq.Expressions;

namespace {Namespace}
{{
    public partial class Nullable{Type.Name}FieldExpression<TEntity> : 
        Nullable{Type.Name}FieldExpression,
        ISupportedForExpression<AssignmentExpression, TEntity, {Type.Alias}?>,
        IEquatable<Nullable{Type.Name}FieldExpression<TEntity>>
        where TEntity : IDbEntity
    {{
        #region constructors
        public Nullable{Type.Name}FieldExpression(EntityExpression entity, ISqlFieldMetadata metadata, Expression<Func<IDbEntity, {Type.Alias}?>> mapExpression) : base(entity, metadata, mapExpression)
        {{

        }}

        private Nullable{Type.Name}FieldExpression(EntityExpression entity, ISqlFieldMetadata metadata, Lazy<Action<IDbEntity, {Type.Alias}?>> mapExpression, string alias) : base(entity, metadata, mapExpression, alias)
        {{

        }}
        #endregion
        
        #region as
        public new Nullable{Type.Name}FieldExpression<TEntity> As(string alias)
            => new Nullable{Type.Name}FieldExpression<TEntity>(base.Entity, base.Metadata, Mapper, alias);
        #endregion

        #region equals
        public bool Equals(Nullable{Type.Name}FieldExpression<TEntity> obj)
            => obj is Nullable{Type.Name}FieldExpression<TEntity> && base.Equals(obj);

        public override bool Equals(object obj)
            => obj is Nullable{Type.Name}FieldExpression<TEntity> exp && base.Equals(exp);

        public override int GetHashCode()
            => base.GetHashCode();
        #endregion
    }}
}}
