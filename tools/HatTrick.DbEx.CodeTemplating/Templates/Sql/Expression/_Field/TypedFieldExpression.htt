{?var:fieldExpressionType = Type-}
using System;
using System.Collections.Generic;

namespace {Namespace}
{{
    public partial class {:fieldExpressionType.Name}FieldExpression
    {{
        #region in value set
        public override FilterExpression<bool> In(params {:fieldExpressionType.Alias}[] value) => value is object ? new FilterExpression<bool>(new {:fieldExpressionType.Name}ExpressionMediator(this), new {:fieldExpressionType.Name}ExpressionMediator(new InExpression<{:fieldExpressionType.Alias}>(value)), FilterExpressionOperator.None) : null;
        public override FilterExpression<bool> In(IEnumerable<{:fieldExpressionType.Alias}> value) => value is object ? new FilterExpression<bool>(new {:fieldExpressionType.Name}ExpressionMediator(this), new {:fieldExpressionType.Name}ExpressionMediator(new InExpression<{:fieldExpressionType.Alias}>(value)), FilterExpressionOperator.None) : null;
        #endregion

        #region set
        public override AssignmentExpression Set({:fieldExpressionType.Alias} value) => new AssignmentExpression(this, new {:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.Alias}>(value)));
        public virtual AssignmentExpression Set({:fieldExpressionType.Name}Element value) => new AssignmentExpression(this, value);
        #endregion

        #region insert
        public override InsertExpression Insert({:fieldExpressionType.Alias} value) => new InsertExpression(this, new {:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.Alias}>(value)));
        #endregion

        #region order
        public override OrderByExpression Asc => new OrderByExpression(new {:fieldExpressionType.Name}ExpressionMediator(this), OrderExpressionDirection.ASC);
        public override OrderByExpression Desc => new OrderByExpression(new {:fieldExpressionType.Name}ExpressionMediator(this), OrderExpressionDirection.DESC);
        #endregion

        #region implicit operators
        public static implicit operator SelectExpression<{:fieldExpressionType.Alias}>({:fieldExpressionType.Name}FieldExpression a) => new SelectExpression<{:fieldExpressionType.Alias}>(new {:fieldExpressionType.Name}ExpressionMediator(a));
        public static implicit operator {:fieldExpressionType.Name}ExpressionMediator({:fieldExpressionType.Name}FieldExpression a) => new {:fieldExpressionType.Name}ExpressionMediator(a);
        public static implicit operator OrderByExpression({:fieldExpressionType.Name}FieldExpression a) => new OrderByExpression(new {:fieldExpressionType.Name}ExpressionMediator(a), OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression({:fieldExpressionType.Name}FieldExpression a) => new GroupByExpression(new {:fieldExpressionType.Name}ExpressionMediator(a));
        #endregion

        #region arithmetic operators
        #region data type
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = $.ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:operationType.Alias} b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new {:fieldExpressionType.Name}ExpressionMediator(a), new {:mediatorType.Name}ExpressionMediator(new LiteralExpression<{:operationType.Alias}>(b)), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, {:fieldExpressionType.Name}FieldExpression b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new {:operationType.Name}ExpressionMediator(new LiteralExpression<{:operationType.Alias}>(a)), new {:mediatorType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {-/each-}

        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:operationType.NullableAlias} b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new {:fieldExpressionType.Name}ExpressionMediator(a), new Nullable{:operationType.Name}ExpressionMediator(new LiteralExpression<{:operationType.NullableAlias}>(b)), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, {:fieldExpressionType.Name}FieldExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new Nullable{:operationType.Name}ExpressionMediator(new LiteralExpression<{:operationType.NullableAlias}>(a)), new {:fieldExpressionType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region fields
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = $.ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static {:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:operationType.Name}FieldExpression b) => new {:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new {:fieldExpressionType.Name}ExpressionMediator(a), new {:operationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static Nullable{:mediatorType.Name}ExpressionMediator operator {ArithmeticOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, Nullable{:operationType.Name}FieldExpression b) => new Nullable{:mediatorType.Name}ExpressionMediator(new ArithmeticExpression(new {:fieldExpressionType.Name}ExpressionMediator(a), new Nullable{:operationType.Name}ExpressionMediator(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/if-}
        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion
        #endregion

        #region filter operators
        #region DBNull
        public static FilterExpression<bool?> operator ==({:fieldExpressionType.Name}FieldExpression a, DBNull b) => new FilterExpression<bool?>(new {:fieldExpressionType.Name}ExpressionMediator(a), new Nullable{:fieldExpressionType.Name}ExpressionMediator(new NullableLiteralExpression<{:fieldExpressionType.NullableAlias}>()), FilterExpressionOperator.Equal);
        public static FilterExpression<bool?> operator !=({:fieldExpressionType.Name}FieldExpression a, DBNull b) => new FilterExpression<bool?>(new {:fieldExpressionType.Name}ExpressionMediator(a), new Nullable{:fieldExpressionType.Name}ExpressionMediator(new NullableLiteralExpression<{:fieldExpressionType.NullableAlias}>()), FilterExpressionOperator.NotEqual);
        public static FilterExpression<bool?> operator ==(DBNull a, {:fieldExpressionType.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{:fieldExpressionType.Name}ExpressionMediator(new NullableLiteralExpression<{:fieldExpressionType.NullableAlias}>()), new {:fieldExpressionType.Name}ExpressionMediator(b), FilterExpressionOperator.Equal);
        public static FilterExpression<bool?> operator !=(DBNull a, {:fieldExpressionType.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{:fieldExpressionType.Name}ExpressionMediator(new NullableLiteralExpression<{:fieldExpressionType.NullableAlias}>()), new {:fieldExpressionType.Name}ExpressionMediator(b), FilterExpressionOperator.NotEqual);
        #endregion

        #region {:fieldExpressionType.Alias}
        {-#each FilterOperations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:fieldExpressionType.Alias} b) => new FilterExpression<bool>(new {:fieldExpressionType.Name}ExpressionMediator(a), new {:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.Alias}>(b)), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each FilterOperations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:fieldExpressionType.Alias} a, {:fieldExpressionType.Name}FieldExpression b) => new FilterExpression<bool>(new {:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.Alias}>(a)), new {:fieldExpressionType.Name}ExpressionMediator(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#if :fieldExpressionType.IsNullable-}
        {-#each FilterOperations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:fieldExpressionType.NullableAlias} b) => new FilterExpression<bool?>(new {:fieldExpressionType.Name}ExpressionMediator(a), new Nullable{:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.NullableAlias}>(b)), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#each FilterOperations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:fieldExpressionType.NullableAlias} a, {:fieldExpressionType.Name}FieldExpression b) => new FilterExpression<bool?>(new Nullable{:fieldExpressionType.Name}ExpressionMediator(new LiteralExpression<{:fieldExpressionType.NullableAlias}>(a)), new {:fieldExpressionType.Name}ExpressionMediator(b), FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/if-}
        #endregion
        
        #region mediator
        {-#each FilterOperations-}
        public static FilterExpression<bool> operator {FilterOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, {:fieldExpressionType.Name}ExpressionMediator b) => new FilterExpression<bool>(new {:fieldExpressionType.Name}ExpressionMediator(a), b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}

        {-#if :fieldExpressionType.IsNullable-}
        {-#each FilterOperations-}
        public static FilterExpression<bool?> operator {FilterOperatorSymbol}({:fieldExpressionType.Name}FieldExpression a, Nullable{:fieldExpressionType.Name}ExpressionMediator b) => new FilterExpression<bool?>(new {:fieldExpressionType.Name}ExpressionMediator(a), b, FilterExpressionOperator.{FilterOperatorName});
        {-/each-}
        {-/if-}
        #endregion
        #endregion
    }}
}}
