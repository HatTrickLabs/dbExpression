#region license
// Copyright (c) HatTrick Labs, LLC.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// The latest version of this file can be found at https://github.com/HatTrickLabs/db-ex
#endregion

using System;
using System.Collections.Generic;

#nullable enable

namespace {Namespace}
{{
    public partial class AliasExpression
    {{
        #region order
        public OrderByExpression Asc => new(this, OrderExpressionDirection.ASC);
        public OrderByExpression Desc => new(this, OrderExpressionDirection.DESC);
        #endregion

        #region implicit operators
        public static implicit operator OrderByExpression(AliasExpression a) => new(a, OrderExpressionDirection.ASC);
        public static implicit operator GroupByExpression(AliasExpression a) => new(a);
        public static implicit operator ObjectExpressionMediator(AliasExpression a) => new(a);
        #endregion

        #region arithmetic operators
        #region data types
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = $.ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, {:operationType.Alias} b) => new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.Alias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.Alias} a, AliasExpression b) => new(new ArithmeticExpression(new LiteralExpression<{:operationType.Alias}>(a), b, ArithmeticExpressionOperator.{$.ArithmeticOperatorName}));
        {-/each-}

        {-#if :operationType.IsNullable-}
        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, {:operationType.NullableAlias} b) => new(new ArithmeticExpression(a, new LiteralExpression<{:operationType.NullableAlias}>(b), ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}({:operationType.NullableAlias} a, AliasExpression b) => new(new ArithmeticExpression(new LiteralExpression<{:operationType.NullableAlias}>(a), b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region fields
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = $.ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, {:operationType.Name}FieldExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, Nullable{:operationType.Name}FieldExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/if-}
        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region mediators
        {-#each ArithmeticOperations-}
        {-?var:mediatorType = $.ReturnType-}
        {-?var:operationType = $.OperationType-}
        #region {:operationType.Alias}
        {-#each Operations-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, {:operationType.Name}ExpressionMediator b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/each-}

        {-#if :mediatorType.IsNullable-}
        {-#each Operations-}
        {-#if :operationType.IsNullable-}
        public static ObjectExpressionMediator operator {ArithmeticOperatorSymbol}(AliasExpression a, Nullable{:operationType.Name}ExpressionMediator b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.{ArithmeticOperatorName}));
        {-/if-}
        {-/each-}
        {-/if-}
        #endregion
        
        {-/each-}
        #endregion

        #region alias
        public static ObjectExpressionMediator operator +(AliasExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add));
        public static ObjectExpressionMediator operator -(AliasExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract));
        public static ObjectExpressionMediator operator *(AliasExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply));
        public static ObjectExpressionMediator operator /(AliasExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide));
        public static ObjectExpressionMediator operator %(AliasExpression a, AliasExpression b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo));

        public static ObjectExpressionMediator operator +(AliasExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.Add));
        public static ObjectExpressionMediator operator -(AliasExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.Subtract));
        public static ObjectExpressionMediator operator *(AliasExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.Multiply));
        public static ObjectExpressionMediator operator /(AliasExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.Divide));
        public static ObjectExpressionMediator operator %(AliasExpression a, (string TableName, string FieldName) b) => new(new ArithmeticExpression(a, new AliasExpression(b.TableName, b.FieldName), ArithmeticExpressionOperator.Modulo));

        public static ObjectExpressionMediator operator +((string TableName, string FieldName) a, AliasExpression b) => new(new ArithmeticExpression(new AliasExpression(a.TableName, a.FieldName), b, ArithmeticExpressionOperator.Add));
        public static ObjectExpressionMediator operator -((string TableName, string FieldName) a, AliasExpression b) => new(new ArithmeticExpression(new AliasExpression(a.TableName, a.FieldName), b, ArithmeticExpressionOperator.Subtract));
        public static ObjectExpressionMediator operator *((string TableName, string FieldName) a, AliasExpression b) => new(new ArithmeticExpression(new AliasExpression(a.TableName, a.FieldName), b, ArithmeticExpressionOperator.Multiply));
        public static ObjectExpressionMediator operator /((string TableName, string FieldName) a, AliasExpression b) => new(new ArithmeticExpression(new AliasExpression(a.TableName, a.FieldName), b, ArithmeticExpressionOperator.Divide));
        public static ObjectExpressionMediator operator %((string TableName, string FieldName) a, AliasExpression b) => new(new ArithmeticExpression(new AliasExpression(a.TableName, a.FieldName), b, ArithmeticExpressionOperator.Modulo));
        #endregion
        #endregion

        #region filter operators
        #region DBNull
        public static FilterExpressionSet operator ==(AliasExpression a, DBNull b) => new(new FilterExpression<bool?>(a, new LiteralExpression<object>(DBNull.Value), FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=(AliasExpression a, DBNull b) => new(new FilterExpression<bool?>(a, new LiteralExpression<object>(DBNull.Value), FilterExpressionOperator.NotEqual));
        public static FilterExpressionSet operator ==(DBNull a, AliasExpression b) => new(new FilterExpression<bool?>(new LiteralExpression<object>(DBNull.Value), b, FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=(DBNull a, AliasExpression b) => new(new FilterExpression<bool?>(new LiteralExpression<object>(DBNull.Value), b, FilterExpressionOperator.NotEqual));
        #endregion

        #region data types
        {-#each Filters-}
        {-?var:dataType = Type-}
        #region {:dataType.Alias}
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, {:dataType.Alias} b) => new(new FilterExpression<bool>(a, new LiteralExpression<{:dataType.Alias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.Alias} a, AliasExpression b) => new(new FilterExpression<bool>(new LiteralExpression<{:dataType.Alias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, {:dataType.NullableAlias} b) => new(new FilterExpression<bool?>(a, new LiteralExpression<{:dataType.NullableAlias}>(b), FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}({:dataType.NullableAlias} a, AliasExpression b) => new(new FilterExpression<bool?>(new LiteralExpression<{:dataType.NullableAlias}>(a), b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion

        {-/each-}
        #endregion
        {-/each-}

        #region fields
        {-#each Filters-}
        {-?var:dataType = Type-}
        #region {:dataType.Alias}
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, {:dataType.Name}FieldExpression b) => new(new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, Nullable{:dataType.Name}FieldExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion

        {-/each}
        #endregion
        
        #region mediators
        {-#each Filters-}
        {-?var:dataType = Type-}
        #region {:dataType.Alias}
        {-#if !:dataType.Type => IsTypeOfObject-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, {:dataType.Name}ExpressionMediator b) => new(new FilterExpression<bool>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}

        {-#if :dataType.IsNullable-}
        {-#each Operations-}
        public static FilterExpressionSet operator {FilterOperatorSymbol}(AliasExpression a, Nullable{:dataType.Name}ExpressionMediator b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.{FilterOperatorName}));
        {-/each-}
        {-/if-}
        {-/if-}
        #endregion

        {-/each-}
        #endregion

        #region alias
        public static FilterExpressionSet operator ==(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.NotEqual));
        public static FilterExpressionSet operator <(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.LessThan));
        public static FilterExpressionSet operator >(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.GreaterThan));
        public static FilterExpressionSet operator <=(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.LessThanOrEqual));
        public static FilterExpressionSet operator >=(AliasExpression a, AliasExpression b) => new(new FilterExpression<bool?>(a, b, FilterExpressionOperator.GreaterThanOrEqual));

        public static FilterExpressionSet operator ==((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.Equal));
        public static FilterExpressionSet operator !=((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.NotEqual));
        public static FilterExpressionSet operator <((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.LessThan));
        public static FilterExpressionSet operator >((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.GreaterThan));
        public static FilterExpressionSet operator <=((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.LessThanOrEqual));
        public static FilterExpressionSet operator >=((string TableName, string FieldName) a, AliasExpression b) => new(new FilterExpression<bool?>(new AliasExpression(a.TableName, a.FieldName), b, FilterExpressionOperator.GreaterThanOrEqual));
        #endregion
        #endregion
    }}

    public partial class AliasExpression<T>
    {{
        #region alias
        public static ObjectExpressionMediator operator +(AliasExpression<T> a, AliasExpression<T> b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Add));
        public static ObjectExpressionMediator operator -(AliasExpression<T> a, AliasExpression<T> b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Subtract));
        public static ObjectExpressionMediator operator *(AliasExpression<T> a, AliasExpression<T> b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Multiply));
        public static ObjectExpressionMediator operator /(AliasExpression<T> a, AliasExpression<T> b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Divide));
        public static ObjectExpressionMediator operator %(AliasExpression<T> a, AliasExpression<T> b) => new(new ArithmeticExpression(a, b, ArithmeticExpressionOperator.Modulo));
        #endregion
    }}
}}
